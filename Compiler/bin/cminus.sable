Package Cminus;

Helpers
	digit    = ['0'..'9'];
	letter   = [['a' .. 'z']+['A' .. 'Z']];
	line_end = 10 | 13 | 10 13;



States
	normal,
	comment,
	string;



Tokens
	/* KEY-WORDS */
	else   = 'else';
	if     = 'if';
	int    = 'int';
	string = 'string';
	return = 'return';
	void   = 'void';
	while  = 'while';
	main   = 'main';
	input  = 'input';
	output = 'output';
	
	/* IDs AND NUMBERS */
	id           = letter+;
	num          = digit+;
	string_value = '"' ('\"' | [[0 .. 0xffff] - '"'])* '"';
	
	/* MATH OPERATORS */
	plus     = '+';
	minus    = '-';
	slash    = '/';
	asterisk = '*';
	
	/* RELATIONAL OPERATORS */
	less_than   = '<';
	less_equal  = '<=';
	great_than  = '>';
	great_equal = '>=';
	equal       = '==';
	different   = '!=';

	attribution = '=';
	
	/* PUNCTUATION SIGNS */
	comma         = ',';
	semicolon     = ';';
	left_par      = '(';
	right_par     = ')';
	left_bracket  = '[';
	right_bracket = ']';
	left_brace    = '{';
	right_brace   = '}';
	
	/* COMMENT SIGNS */
	{normal->comment, comment} open_comment = '/*';
	close_comment = '*/';
	block_comment = '/*' [[0 .. 0xffff] - ['*' + '/']]* '*/';
	
	/* IGNORED TOKENS */
	space        = (9 | ' ')+;
	end_line     = line_end+;
	line_comment = '//' [[0 .. 0xffff] - [10 + 13]]* line_end;


	
Ignored Tokens
	space, end_line, line_comment, open_comment, close_comment, block_comment;
	

	
Productions
	program
		= declaration* main_declaration {-> New program([declaration.declaration, main_declaration.declaration])}
		;

	declaration {-> declaration}
		= {var} [var]:variable_declaration   {-> var.declaration}
		| {func} [func]:function_declaration {-> func.declaration}
		;
	main_declaration {-> declaration} 
		= {main} [type]:implicit_type_specifier [id]:main left_par void right_par [statement]:compound_statement {-> New declaration.function_main(type.type, id, [statement.statement])}
		;

	variable_declaration {-> declaration}
		= {variable} [type]:type_specifier [var]:var_dec semicolon {-> New declaration.variable(type.type, var.name)}
		;
	var_dec {-> name}	
		= {single} id                            {-> New name.single(id)}
		| {array}  id [array]:array_declaration+ {-> New name.array(id, [array.array])}
		;
	array_declaration {-> array}
		= left_bracket num right_bracket {-> New array.dim(num)}
		;

	type_specifier {-> type}
		= {int} int       {-> New type.int(int)}
		| {string} string {-> New type.string(string)}
		;
	implicit_type_specifier {-> type}
		= {int} int       {-> New type.int(int)}
		| {string} string {-> New type.string(string)}
		| {void} void     {-> New type.void(void)}
		;

	function_declaration {-> declaration}
		= {void} [type]:implicit_type_specifier id left_par void right_par [statement]:compound_statement       {-> New declaration.function(type.type, id, [statement.statement])}
		| {args} [type]:implicit_type_specifier id left_par parameters right_par [statement]:compound_statement {-> New declaration.function_arg(type.type, id, [parameters.arg], [statement.statement])}
		;
	parameters {-> arg*}
		= {list} [list]:parameters comma [single]:single_parameter {-> [list.arg, single.arg]}
		| {single} [single]:single_parameter                       {-> [single.arg]}
		;
	single_parameter {-> arg}
		= [type]:type_specifier [par]:par_dec {-> New arg(type.type, par.id)}
		;
	par_dec {-> id}
		= {single} id                  {-> id}
		| {array}  id array_parameter+ {-> id}
		;
	array_parameter {-> array}
		= left_bracket right_bracket {-> New array.empty()}
		;


	/* Based on p.69 of Appel - Modern Compiler Implementation in Java - 2nd Edition*/
	statement_list {-> statement*}
		= {list} statement_list statement {-> [statement_list.statement, statement.statement]}
		| {empty} epsilon                 {-> New statement.empty()}
		;
	statement {-> statement}
		= {attribution} attribution_statement {-> attribution_statement.statement}
		| {compound_stm} compound_statement   {-> compound_statement.statement}
		| {return} return_statement           {-> return_statement.statement}
		| {if_stm} if_statement               {-> if_statement.statement}
		| {if_else_stm} if_else_statement     {-> if_else_statement.statement}
		| {iteration_stm} iteration_statement {-> iteration_statement.statement}
		;
	statement_with_else {-> statement}
		= {attribution} attribution_statement      {-> attribution_statement.statement}
		| {compound_stm} compound_statement        {-> compound_statement.statement}
		| {return} return_statement                {-> return_statement.statement}
		| {if_else_stm} if_else_statement2         {-> if_else_statement2.statement}
		| {iteration_stm} iteration_statement_else {-> iteration_statement_else.statement}
		;
	
	attribution_statement {-> statement}
		= {int} variable attribution exp semicolon             {-> New statement.attribution(variable.name, exp)}
		| {string} variable attribution string_value semicolon {-> New statement.attribution_string(variable.name, string_value)}
		| {call} call semicolon                                {-> call.statement}
		| {empty} semicolon                                    {-> New statement.empty()}
		;
	
	compound_statement {-> statement}
		= left_brace [var]:variable_declaration* [stm]:statement_list right_brace {-> New statement.block([var.declaration], [stm.statement])}
		;
	
	if_statement {-> statement}
		= if left_par [rel_exp]:relational_expression right_par [stm]:statement {-> New statement.if(rel_exp.rel_exp, stm.statement)}
		;
	if_else_statement {-> statement}
		= if left_par [rel_exp]:relational_expression right_par [true]:statement_with_else else [false]:statement {-> New statement.ifelse(rel_exp.rel_exp, true.statement, false.statement)}
		;
	if_else_statement2 {-> statement}
		= if left_par [rel_exp]:relational_expression right_par [true]:statement_with_else else [false]:statement_with_else {-> New statement.ifelse(rel_exp.rel_exp, true.statement, false.statement)}
		;
	
	iteration_statement {-> statement}
		= while left_par [rel_exp]:relational_expression right_par [stm]:statement {-> New statement.while(rel_exp.rel_exp, stm.statement)}
		;
	iteration_statement_else {-> statement}
		= while left_par [rel_exp]:relational_expression right_par [stm]:statement_with_else {-> New statement.while(rel_exp.rel_exp, stm.statement)}
		;
	
	return_statement {-> statement}
		= {empty} return semicolon      {-> New statement.empty()}
		| {return} return exp semicolon {-> New statement.return(exp)}
		;
	
	relational_expression {-> rel_exp}
		= {less_than}   [left]:exp less_than   [right]:exp {-> New rel_exp.less_than(left.exp, right.exp)}
		| {less_equal}  [left]:exp less_equal  [right]:exp {-> New rel_exp.less_equal(left.exp, right.exp)}
		| {great_than}  [left]:exp great_than  [right]:exp {-> New rel_exp.great_than(left.exp, right.exp)}
		| {great_equal} [left]:exp great_equal [right]:exp {-> New rel_exp.great_equal(left.exp, right.exp)}
		| {equal}       [left]:exp equal       [right]:exp {-> New rel_exp.equal(left.exp, right.exp)}
		| {different}   [left]:exp different   [right]:exp {-> New rel_exp.different(left.exp, right.exp)}
		;
	/*
	input_function
		= type_specifier input left_par void right_par
		;
	output_function
		= void output left_par type_specifier id right_par
		;
	*/
	exp {-> exp}
		= {plus}  exp plus term  {-> New exp.plus(exp, term.exp)}
		| {minus} exp minus term {-> New exp.minus(exp, term.exp)}
		| {term}  term           {-> term.exp}
		;

	term {-> exp}
		= {mult}   term asterisk factor {-> New exp.mult(term.exp, factor.exp)}
		| {div}    term slash factor    {-> New exp.div(term.exp, factor.exp)}
		| {factor} factor               {-> factor.exp}
		;
 
	factor {-> exp} 
		= {exp} left_par exp right_par {-> exp}
		| {var} variable               {-> variable.name}
		//| {call} call                  {-> }
		| {num} num                    {-> New exp.num(num)}
		;

	variable {-> name}
		= id array_expression* {-> New name.array(id, [array_expression.array])}
		;
	array_expression {-> array}
		= left_bracket num right_bracket {-> New array.dim(num)}
		;
		
	call {-> statement}
		= id left_par arguments right_par {-> New statement.call(id, [arguments.arg])}
		;
	arguments {-> arg*}
		= {list} arguments_list {-> [arguments_list.arg]}
		| {empty} epsilon       {-> []}
		;
	arguments_list {-> arg*}
		= {list} arguments_list comma id {-> [arguments_list.arg, id]}
		| {single} exp                    {-> exp.id}
		;
	epsilon
		=
		;

		
		
		
Abstract Syntax Tree
	program = declaration+;
	
	declaration 
		= {variable} type name
		| {function} type id statement*
		| {function_main} type main statement*
		| {function_arg} type id arg* statement*
		;

	type 
		= {int} int
		| {string} string
		| {void} void
		;
		 
	arg = type id;
	
	name
		= {single} id
		| {array}  id array*;
		 
	array 
		= {empty} 
		| {dim} num;
	
	statement 
		= {attribution} name exp
		| {attribution_string} name string_value
		| {block} declaration* statement*
		| {declaration} declaration
		| {call} id arg*
		| {if} rel_exp statement
		| {ifelse} rel_exp [right]:statement [left]:statement
		| {while} rel_exp statement
		| {return} exp
		| {empty}
		;
	
	rel_exp 
		= {less_than}   [left]:exp [right]:exp
		| {less_equal}  [left]:exp [right]:exp
		| {great_than}  [left]:exp [right]:exp
		| {great_equal} [left]:exp [right]:exp
		| {equal}       [left]:exp [right]:exp
		| {different}   [left]:exp [right]:exp
		;
	
	exp = {plus}  [left]:exp [right]:exp
		| {minus} [left]:exp [right]:exp
		| {mult}  [left]:exp [right]:exp
		| {div}   [left]:exp [right]:exp
		| {num}   num
		| {id}    id
		;