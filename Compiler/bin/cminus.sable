Package Cminus;

Helpers
	all = [0 .. 0xffff];

	digit = ['0'..'9'];
	
	lower_letter = ['a'..'z'];
	upper_letter = ['A'..'Z'];
	letter = lower_letter | upper_letter;
	
	tab = 9;
	space = ' ';
	new_line = 10;
	carriage_return = 13;
	
	white = tab | space;
	line_end = new_line | carriage_return | new_line carriage_return;
	
States
	initial, comment;

Tokens
	/* KEY-WORDS */
	else = 'else';
	if = 'if';
	int = 'int';
	string = 'string';
	return  = 'return';
	void = 'void';
	while = 'while';
	
	/* IDs AND NUMBERS */
	id = letter+;
	num = digit+;
	
	/* MATH OPERATORS */
	plus = '+';
	minus = '-';
	slash = '/';
	asterisk = '*';
	
	/* LOGICAL OPERATORS */
	less = '<';
	less_equal = '<=';
	great = '>';
	great_equal = '>=';
	equal = '==';
	difference = '!=';
	attribution = '=';
	
	/* PUNCTUATION SIGNS */
	semicolon = ';';
	comma = ',';
	left_par = '(';
	right_par = ')';
	left_bracket = '[';
	right_bracket = ']';
	left_brace = '{';
	right_brace = '}';
	{initial->comment, comment} open_comment = '/*';
	close_comment = '*/';
	block_comment = '/*' [all - ['*' + '/']]* '*/';
	
	/* IGNORED TOKENS */
	blank = (white | line_end)+;
	end_line = line_end+;
	line_comment = '//' [all - [new_line + carriage_return]]* line_end;
	
Ignored Tokens
	blank, end_line, line_comment;