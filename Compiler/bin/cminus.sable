Package Cminus;

Helpers
	digit    = ['0'..'9'];
	letter   = [['a' .. 'z']+['A' .. 'Z']];
	line_end = 10 | 13 | 10 13;



States
	normal,
	comment,
	string;



Tokens
	/* KEY-WORDS */
	else   = 'else';
	if     = 'if';
	int    = 'int';
	string = 'string';
	return = 'return';
	void   = 'void';
	while  = 'while';
	
	/* IDs AND NUMBERS */
	id           = letter+;
	num          = digit+;
	string_value = '"' ('\"' | [[0 .. 0xffff] - '"'])* '"';
	
	/* MATH OPERATORS */
	plus     = '+';
	minus    = '-';
	slash    = '/';
	asterisk = '*';
	
	/* RELATIONAL OPERATORS */
	less_than   = '<';
	less_equal  = '<=';
	great_than  = '>';
	great_equal = '>=';
	equal       = '==';
	different   = '!=';

	attribution = '=';
	
	/* PUNCTUATION SIGNS */
	comma         = ',';
	semicolon     = ';';
	left_par      = '(';
	right_par     = ')';
	left_bracket  = '[';
	right_bracket = ']';
	left_brace    = '{';
	right_brace   = '}';
	
	/* COMMENT SIGNS */
	{normal->comment, comment} open_comment = '/*';
	close_comment = '*/';
	block_comment = '/*' [[0 .. 0xffff] - ['*' + '/']]* '*/';
	
	/* IGNORED TOKENS */
	space        = (9 | ' ')+;
	end_line     = line_end+;
	line_comment = '//' [[0 .. 0xffff] - [10 + 13]]* line_end;


	
Ignored Tokens
	space, end_line, line_comment, open_comment, close_comment, block_comment;
	

	
Productions
	program                  = declaration+;
	declaration              = {a} variable_declaration | {b} function_declaration;
	
	variable_declaration     = type_specifier id array_declaration* semicolon;
	array_declaration        = left_bracket num right_bracket;
	type_specifier           = {a} int | {b} string | {c} void;

	function_declaration     = type_specifier id left_par parameters right_par compound_statement;
	parameters               = {a} parameters_list | {b} void;
	parameters_list          = {a} parameters_list comma single_parameter | {b} single_parameter;
	single_parameter         = type_specifier id array_parameter*;
	array_parameter          = left_bracket right_bracket;

	/* Based on p.69 of Appel - Modern Compiler Implementation in Java - 2nd Edition*/
	statement_list           = {a} statement_list statement | {b} epsilon;
	statement                = {a} expression_statement | {b} compound_statement | {c} return_statement | {d} if_statement | {e} if_else_statement | {f} iteration_statement;
	statement_with_else      = {a} expression_statement | {b} compound_statement | {c} return_statement | {d} if_else_statement2 | {e} iteration_statement_else;
	
	expression_statement     = {a} expression semicolon | {b} semicolon;
	
	compound_statement       = left_brace local_declarations statement_list right_brace;
	local_declarations       = {a} local_declarations variable_declaration | {b} epsilon;
	
	if_statement             = if left_par expression right_par statement;
	if_else_statement        = if left_par expression right_par [true]:statement_with_else else [false]:statement;
	if_else_statement2       = if left_par expression right_par [true]:statement_with_else else [false]:statement_with_else;
	
	iteration_statement      = while left_par expression right_par statement;
	iteration_statement_else = while left_par expression right_par statement_with_else;
	
	return_statement         = {a} return semicolon | {b} return expression semicolon;
	
	variable                 = id array_expression*;
	array_expression         = left_bracket exp right_bracket;
	
	expression               = {a} variable attribution exp | {b} variable attribution string_value | {c} simple_expression;
	
	simple_expression        = {a} simple_expression relational_operator exp | {b} exp;
	relational_operator      = {a} less_than | {b} less_equal | {c} great_than | {d} great_equal | {e} equal | {f} different;
	
	/* Exp, Term, Factor grammar */
	exp                      = {a} exp add term | {b} term;
	add                      = {a} plus | {b} minus;
	term                     = {a} term mult factor | {b} factor;
	mult                     = {a} asterisk | {b} slash;
	factor                   = {a} left_par expression right_par | {b} variable | {c} call | {d} num;
	
	call                     = id left_par arguments right_par;
	arguments_list           = {a} arguments_list comma expression | {b} expression;
	arguments                = {a} arguments_list | {b} epsilon;
	epsilon                  = ;
	
	
	/*
	exp             = {plus} exp plus term   {-> New exp.plus(exp, term.exp)}
                    | {minus} exp minus term {-> New exp.minus(exp, term.exp)}
                    | {term} term            {-> term.exp}
                    ;
							 
	term   {-> exp} = {mult} term asterisk factor {-> New exp.mult(term.exp, factor.exp)}
	                | {div} term slash factor     {-> New exp.div(term.exp, factor.exp)}
	                | {factor} factor             {-> factor.exp}
	                ;
	                
	factor {-> exp} = {exp} left_par exp right_par {-> exp}
	                | {variable} variable          {-> variable}
	                | {call} call                  {-> exp}
	                | {num} num                    {-> New exp.num(num)}
	                ;

Abstract Syntax Tree
	program = declaration+;
	
	declaration = {variable} type id array*
				| {function} type id statement*
				| {function} type id parameter* statement*
				;

	exp = {plus} [left]:exp [right]:exp
		| {minus} [left]:exp [right]:exp
		| {mult} [left]:exp [right]:exp
		| {div} [left]:exp [right]:exp
		| {num} num
		;
	*/