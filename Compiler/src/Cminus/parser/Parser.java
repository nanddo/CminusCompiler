/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.parser;

import Cminus.lexer.*;
import Cminus.node.*;
import Cminus.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AADeclarationList */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce ABDeclarationList */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AADeclaration */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ABDeclaration */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AAVarDeclaration */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce ABVarDeclaration */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AATypeSpecifier */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ABTypeSpecifier */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce ACTypeSpecifier */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce AFuncDeclaration */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce AAParams */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce ABParams */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce AAParamList */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce ABParamList */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce AAParam */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce ABParam */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce ACompoundStatement */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list, false);
            }
            break;
            case 18: /* reduce AALocalDeclarations */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list, false);
            }
            break;
            case 19: /* reduce ABLocalDeclarations */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list, false);
            }
            break;
            case 20: /* reduce AAStatementList */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list, false);
            }
            break;
            case 21: /* reduce ABStatementList */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list, false);
            }
            break;
            case 22: /* reduce AAStatement */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list, false);
            }
            break;
            case 23: /* reduce ABStatement */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list, false);
            }
            break;
            case 24: /* reduce ACStatement */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list, false);
            }
            break;
            case 25: /* reduce ADStatement */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list, false);
            }
            break;
            case 26: /* reduce AEStatement */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list, false);
            }
            break;
            case 27: /* reduce AAExpressionStatement */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
            case 28: /* reduce ABExpressionStatement */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list, false);
            }
            break;
            case 29: /* reduce ASelectionStatement */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list, false);
            }
            break;
            case 30: /* reduce AIterationStatement */
            {
                ArrayList<Object> list = new30();
                push(goTo(15), list, false);
            }
            break;
            case 31: /* reduce AAReturnStatement */
            {
                ArrayList<Object> list = new31();
                push(goTo(16), list, false);
            }
            break;
            case 32: /* reduce ABReturnStatement */
            {
                ArrayList<Object> list = new32();
                push(goTo(16), list, false);
            }
            break;
            case 33: /* reduce AAExpression */
            {
                ArrayList<Object> list = new33();
                push(goTo(17), list, false);
            }
            break;
            case 34: /* reduce ABExpression */
            {
                ArrayList<Object> list = new34();
                push(goTo(17), list, false);
            }
            break;
            case 35: /* reduce AAVar */
            {
                ArrayList<Object> list = new35();
                push(goTo(18), list, false);
            }
            break;
            case 36: /* reduce ABVar */
            {
                ArrayList<Object> list = new36();
                push(goTo(18), list, false);
            }
            break;
            case 37: /* reduce AASimpleExpression */
            {
                ArrayList<Object> list = new37();
                push(goTo(19), list, false);
            }
            break;
            case 38: /* reduce ABSimpleExpression */
            {
                ArrayList<Object> list = new38();
                push(goTo(19), list, false);
            }
            break;
            case 39: /* reduce AARelop */
            {
                ArrayList<Object> list = new39();
                push(goTo(20), list, false);
            }
            break;
            case 40: /* reduce ABRelop */
            {
                ArrayList<Object> list = new40();
                push(goTo(20), list, false);
            }
            break;
            case 41: /* reduce ACRelop */
            {
                ArrayList<Object> list = new41();
                push(goTo(20), list, false);
            }
            break;
            case 42: /* reduce ADRelop */
            {
                ArrayList<Object> list = new42();
                push(goTo(20), list, false);
            }
            break;
            case 43: /* reduce AERelop */
            {
                ArrayList<Object> list = new43();
                push(goTo(20), list, false);
            }
            break;
            case 44: /* reduce AFRelop */
            {
                ArrayList<Object> list = new44();
                push(goTo(20), list, false);
            }
            break;
            case 45: /* reduce AAAdditiveExpression */
            {
                ArrayList<Object> list = new45();
                push(goTo(21), list, false);
            }
            break;
            case 46: /* reduce ABAdditiveExpression */
            {
                ArrayList<Object> list = new46();
                push(goTo(21), list, false);
            }
            break;
            case 47: /* reduce AAAddop */
            {
                ArrayList<Object> list = new47();
                push(goTo(22), list, false);
            }
            break;
            case 48: /* reduce ABAddop */
            {
                ArrayList<Object> list = new48();
                push(goTo(22), list, false);
            }
            break;
            case 49: /* reduce AATerm */
            {
                ArrayList<Object> list = new49();
                push(goTo(23), list, false);
            }
            break;
            case 50: /* reduce ABTerm */
            {
                ArrayList<Object> list = new50();
                push(goTo(23), list, false);
            }
            break;
            case 51: /* reduce AAMulop */
            {
                ArrayList<Object> list = new51();
                push(goTo(24), list, false);
            }
            break;
            case 52: /* reduce ABMulop */
            {
                ArrayList<Object> list = new52();
                push(goTo(24), list, false);
            }
            break;
            case 53: /* reduce AAFactor */
            {
                ArrayList<Object> list = new53();
                push(goTo(25), list, false);
            }
            break;
            case 54: /* reduce ABFactor */
            {
                ArrayList<Object> list = new54();
                push(goTo(25), list, false);
            }
            break;
            case 55: /* reduce ACFactor */
            {
                ArrayList<Object> list = new55();
                push(goTo(25), list, false);
            }
            break;
            case 56: /* reduce ADFactor */
            {
                ArrayList<Object> list = new56();
                push(goTo(25), list, false);
            }
            break;
            case 57: /* reduce ACall */
            {
                ArrayList<Object> list = new57();
                push(goTo(26), list, false);
            }
            break;
            case 58: /* reduce AAArgs */
            {
                ArrayList<Object> list = new58();
                push(goTo(27), list, false);
            }
            break;
            case 59: /* reduce ABArgs */
            {
                ArrayList<Object> list = new59();
                push(goTo(27), list, false);
            }
            break;
            case 60: /* reduce AAArgsList */
            {
                ArrayList<Object> list = new60();
                push(goTo(28), list, false);
            }
            break;
            case 61: /* reduce ABArgsList */
            {
                ArrayList<Object> list = new61();
                push(goTo(28), list, false);
            }
            break;
            case 62: /* reduce AEpsilon */
            {
                ArrayList<Object> list = new62();
                push(goTo(29), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PDeclarationList pdeclarationlistNode2;
        pdeclarationlistNode2 = (PDeclarationList)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pdeclarationlistNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AADeclarationList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationList pdeclarationlistNode1;
        {
            // Block
        PDeclarationList pdeclarationlistNode2;
        PDeclaration pdeclarationNode3;
        pdeclarationlistNode2 = (PDeclarationList)nodeArrayList1.get(0);
        pdeclarationNode3 = (PDeclaration)nodeArrayList2.get(0);

        pdeclarationlistNode1 = new AADeclarationList(pdeclarationlistNode2, pdeclarationNode3);
        }
	nodeList.add(pdeclarationlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ABDeclarationList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationList pdeclarationlistNode1;
        {
            // Block
        PDeclaration pdeclarationNode2;
        pdeclarationNode2 = (PDeclaration)nodeArrayList1.get(0);

        pdeclarationlistNode1 = new ABDeclarationList(pdeclarationNode2);
        }
	nodeList.add(pdeclarationlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AADeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PVarDeclaration pvardeclarationNode2;
        pvardeclarationNode2 = (PVarDeclaration)nodeArrayList1.get(0);

        pdeclarationNode1 = new AADeclaration(pvardeclarationNode2);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ABDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PFuncDeclaration pfuncdeclarationNode2;
        pfuncdeclarationNode2 = (PFuncDeclaration)nodeArrayList1.get(0);

        pdeclarationNode1 = new ABDeclaration(pfuncdeclarationNode2);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAVarDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDeclaration pvardeclarationNode1;
        {
            // Block
        PTypeSpecifier ptypespecifierNode2;
        TId tidNode3;
        TSemicolon tsemicolonNode4;
        ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pvardeclarationNode1 = new AAVarDeclaration(ptypespecifierNode2, tidNode3, tsemicolonNode4);
        }
	nodeList.add(pvardeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ABVarDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDeclaration pvardeclarationNode1;
        {
            // Block
        PTypeSpecifier ptypespecifierNode2;
        TId tidNode3;
        TLeftBracket tleftbracketNode4;
        TNum tnumNode5;
        TRightBracket trightbracketNode6;
        TSemicolon tsemicolonNode7;
        ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tleftbracketNode4 = (TLeftBracket)nodeArrayList3.get(0);
        tnumNode5 = (TNum)nodeArrayList4.get(0);
        trightbracketNode6 = (TRightBracket)nodeArrayList5.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList6.get(0);

        pvardeclarationNode1 = new ABVarDeclaration(ptypespecifierNode2, tidNode3, tleftbracketNode4, tnumNode5, trightbracketNode6, tsemicolonNode7);
        }
	nodeList.add(pvardeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AATypeSpecifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeSpecifier ptypespecifierNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypespecifierNode1 = new AATypeSpecifier(tintNode2);
        }
	nodeList.add(ptypespecifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ABTypeSpecifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeSpecifier ptypespecifierNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        ptypespecifierNode1 = new ABTypeSpecifier(tvoidNode2);
        }
	nodeList.add(ptypespecifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ACTypeSpecifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeSpecifier ptypespecifierNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypespecifierNode1 = new ACTypeSpecifier(tstringNode2);
        }
	nodeList.add(ptypespecifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AFuncDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDeclaration pfuncdeclarationNode1;
        {
            // Block
        PTypeSpecifier ptypespecifierNode2;
        TId tidNode3;
        TLeftPar tleftparNode4;
        PParams pparamsNode5;
        TRightPar trightparNode6;
        PCompoundStatement pcompoundstatementNode7;
        ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tleftparNode4 = (TLeftPar)nodeArrayList3.get(0);
        pparamsNode5 = (PParams)nodeArrayList4.get(0);
        trightparNode6 = (TRightPar)nodeArrayList5.get(0);
        pcompoundstatementNode7 = (PCompoundStatement)nodeArrayList6.get(0);

        pfuncdeclarationNode1 = new AFuncDeclaration(ptypespecifierNode2, tidNode3, tleftparNode4, pparamsNode5, trightparNode6, pcompoundstatementNode7);
        }
	nodeList.add(pfuncdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        PParamList pparamlistNode2;
        pparamlistNode2 = (PParamList)nodeArrayList1.get(0);

        pparamsNode1 = new AAParams(pparamlistNode2);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ABParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        pparamsNode1 = new ABParams(tvoidNode2);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAParamList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamList pparamlistNode1;
        {
            // Block
        PParamList pparamlistNode2;
        TComma tcommaNode3;
        PParam pparamNode4;
        pparamlistNode2 = (PParamList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pparamNode4 = (PParam)nodeArrayList3.get(0);

        pparamlistNode1 = new AAParamList(pparamlistNode2, tcommaNode3, pparamNode4);
        }
	nodeList.add(pparamlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ABParamList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamList pparamlistNode1;
        {
            // Block
        PParam pparamNode2;
        pparamNode2 = (PParam)nodeArrayList1.get(0);

        pparamlistNode1 = new ABParamList(pparamNode2);
        }
	nodeList.add(pparamlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        PTypeSpecifier ptypespecifierNode2;
        TId tidNode3;
        ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparamNode1 = new AAParam(ptypespecifierNode2, tidNode3);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ABParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        PTypeSpecifier ptypespecifierNode2;
        TId tidNode3;
        TLeftBracket tleftbracketNode4;
        TRightBracket trightbracketNode5;
        ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tleftbracketNode4 = (TLeftBracket)nodeArrayList3.get(0);
        trightbracketNode5 = (TRightBracket)nodeArrayList4.get(0);

        pparamNode1 = new ABParam(ptypespecifierNode2, tidNode3, tleftbracketNode4, trightbracketNode5);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ACompoundStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompoundStatement pcompoundstatementNode1;
        {
            // Block
        TLeftBrace tleftbraceNode2;
        PLocalDeclarations plocaldeclarationsNode3;
        PStatementList pstatementlistNode4;
        TRightBrace trightbraceNode5;
        tleftbraceNode2 = (TLeftBrace)nodeArrayList1.get(0);
        plocaldeclarationsNode3 = (PLocalDeclarations)nodeArrayList2.get(0);
        pstatementlistNode4 = (PStatementList)nodeArrayList3.get(0);
        trightbraceNode5 = (TRightBrace)nodeArrayList4.get(0);

        pcompoundstatementNode1 = new ACompoundStatement(tleftbraceNode2, plocaldeclarationsNode3, pstatementlistNode4, trightbraceNode5);
        }
	nodeList.add(pcompoundstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AALocalDeclarations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDeclarations plocaldeclarationsNode1;
        {
            // Block
        PLocalDeclarations plocaldeclarationsNode2;
        PVarDeclaration pvardeclarationNode3;
        plocaldeclarationsNode2 = (PLocalDeclarations)nodeArrayList1.get(0);
        pvardeclarationNode3 = (PVarDeclaration)nodeArrayList2.get(0);

        plocaldeclarationsNode1 = new AALocalDeclarations(plocaldeclarationsNode2, pvardeclarationNode3);
        }
	nodeList.add(plocaldeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ABLocalDeclarations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDeclarations plocaldeclarationsNode1;
        {
            // Block
        PEpsilon pepsilonNode2;
        pepsilonNode2 = (PEpsilon)nodeArrayList1.get(0);

        plocaldeclarationsNode1 = new ABLocalDeclarations(pepsilonNode2);
        }
	nodeList.add(plocaldeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAStatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementList pstatementlistNode1;
        {
            // Block
        PStatementList pstatementlistNode2;
        PStatement pstatementNode3;
        pstatementlistNode2 = (PStatementList)nodeArrayList1.get(0);
        pstatementNode3 = (PStatement)nodeArrayList2.get(0);

        pstatementlistNode1 = new AAStatementList(pstatementlistNode2, pstatementNode3);
        }
	nodeList.add(pstatementlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ABStatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementList pstatementlistNode1;
        {
            // Block
        PEpsilon pepsilonNode2;
        pepsilonNode2 = (PEpsilon)nodeArrayList1.get(0);

        pstatementlistNode1 = new ABStatementList(pepsilonNode2);
        }
	nodeList.add(pstatementlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpressionStatement pexpressionstatementNode2;
        pexpressionstatementNode2 = (PExpressionStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AAStatement(pexpressionstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ABStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCompoundStatement pcompoundstatementNode2;
        pcompoundstatementNode2 = (PCompoundStatement)nodeArrayList1.get(0);

        pstatementNode1 = new ABStatement(pcompoundstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ACStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PSelectionStatement pselectionstatementNode2;
        pselectionstatementNode2 = (PSelectionStatement)nodeArrayList1.get(0);

        pstatementNode1 = new ACStatement(pselectionstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ADStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIterationStatement piterationstatementNode2;
        piterationstatementNode2 = (PIterationStatement)nodeArrayList1.get(0);

        pstatementNode1 = new ADStatement(piterationstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AEStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PReturnStatement preturnstatementNode2;
        preturnstatementNode2 = (PReturnStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AEStatement(preturnstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAExpressionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionStatement pexpressionstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TSemicolon tsemicolonNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pexpressionstatementNode1 = new AAExpressionStatement(pexpressionNode2, tsemicolonNode3);
        }
	nodeList.add(pexpressionstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ABExpressionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionStatement pexpressionstatementNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pexpressionstatementNode1 = new ABExpressionStatement(tsemicolonNode2);
        }
	nodeList.add(pexpressionstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ASelectionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSelectionStatement pselectionstatementNode1;
        {
            // Block
        TIf tifNode2;
        TLeftPar tleftparNode3;
        PExpression pexpressionNode4;
        TRightPar trightparNode5;
        PStatement pstatementNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tleftparNode3 = (TLeftPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trightparNode5 = (TRightPar)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        pselectionstatementNode1 = new ASelectionStatement(tifNode2, tleftparNode3, pexpressionNode4, trightparNode5, pstatementNode6);
        }
	nodeList.add(pselectionstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AIterationStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterationStatement piterationstatementNode1;
        {
            // Block
        TWhile twhileNode2;
        TLeftPar tleftparNode3;
        PExpression pexpressionNode4;
        TRightPar trightparNode5;
        PStatement pstatementNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tleftparNode3 = (TLeftPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trightparNode5 = (TRightPar)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        piterationstatementNode1 = new AIterationStatement(twhileNode2, tleftparNode3, pexpressionNode4, trightparNode5, pstatementNode6);
        }
	nodeList.add(piterationstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAReturnStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnStatement preturnstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        preturnstatementNode1 = new AAReturnStatement(treturnNode2, tsemicolonNode3);
        }
	nodeList.add(preturnstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ABReturnStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnStatement preturnstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpression pexpressionNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        preturnstatementNode1 = new ABReturnStatement(treturnNode2, pexpressionNode3, tsemicolonNode4);
        }
	nodeList.add(preturnstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PVar pvarNode2;
        TAttribution tattributionNode3;
        PExpression pexpressionNode4;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tattributionNode3 = (TAttribution)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAExpression(pvarNode2, tattributionNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ABExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PSimpleExpression psimpleexpressionNode2;
        psimpleexpressionNode2 = (PSimpleExpression)nodeArrayList1.get(0);

        pexpressionNode1 = new ABExpression(psimpleexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AAVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ABVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TLeftBracket tleftbracketNode3;
        PExpression pexpressionNode4;
        TRightBracket trightbracketNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tleftbracketNode3 = (TLeftBracket)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trightbracketNode5 = (TRightBracket)nodeArrayList4.get(0);

        pvarNode1 = new ABVar(tidNode2, tleftbracketNode3, pexpressionNode4, trightbracketNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AASimpleExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleExpression psimpleexpressionNode1;
        {
            // Block
        PSimpleExpression psimpleexpressionNode2;
        PRelop prelopNode3;
        PAdditiveExpression padditiveexpressionNode4;
        psimpleexpressionNode2 = (PSimpleExpression)nodeArrayList1.get(0);
        prelopNode3 = (PRelop)nodeArrayList2.get(0);
        padditiveexpressionNode4 = (PAdditiveExpression)nodeArrayList3.get(0);

        psimpleexpressionNode1 = new AASimpleExpression(psimpleexpressionNode2, prelopNode3, padditiveexpressionNode4);
        }
	nodeList.add(psimpleexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ABSimpleExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleExpression psimpleexpressionNode1;
        {
            // Block
        PAdditiveExpression padditiveexpressionNode2;
        padditiveexpressionNode2 = (PAdditiveExpression)nodeArrayList1.get(0);

        psimpleexpressionNode1 = new ABSimpleExpression(padditiveexpressionNode2);
        }
	nodeList.add(psimpleexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AARelop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TLessThan tlessthanNode2;
        tlessthanNode2 = (TLessThan)nodeArrayList1.get(0);

        prelopNode1 = new AARelop(tlessthanNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ABRelop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TLessEqual tlessequalNode2;
        tlessequalNode2 = (TLessEqual)nodeArrayList1.get(0);

        prelopNode1 = new ABRelop(tlessequalNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ACRelop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TGreatThan tgreatthanNode2;
        tgreatthanNode2 = (TGreatThan)nodeArrayList1.get(0);

        prelopNode1 = new ACRelop(tgreatthanNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ADRelop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TGreatEqual tgreatequalNode2;
        tgreatequalNode2 = (TGreatEqual)nodeArrayList1.get(0);

        prelopNode1 = new ADRelop(tgreatequalNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AERelop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        prelopNode1 = new AERelop(tequalNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AFRelop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TDifferent tdifferentNode2;
        tdifferentNode2 = (TDifferent)nodeArrayList1.get(0);

        prelopNode1 = new AFRelop(tdifferentNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAAdditiveExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveExpression padditiveexpressionNode1;
        {
            // Block
        PAdditiveExpression padditiveexpressionNode2;
        PAddop paddopNode3;
        PTerm ptermNode4;
        padditiveexpressionNode2 = (PAdditiveExpression)nodeArrayList1.get(0);
        paddopNode3 = (PAddop)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        padditiveexpressionNode1 = new AAAdditiveExpression(padditiveexpressionNode2, paddopNode3, ptermNode4);
        }
	nodeList.add(padditiveexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ABAdditiveExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveExpression padditiveexpressionNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        padditiveexpressionNode1 = new ABAdditiveExpression(ptermNode2);
        }
	nodeList.add(padditiveexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAAddop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddop paddopNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        paddopNode1 = new AAAddop(tplusNode2);
        }
	nodeList.add(paddopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ABAddop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddop paddopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        paddopNode1 = new ABAddop(tminusNode2);
        }
	nodeList.add(paddopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AATerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        PMulop pmulopNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        pmulopNode3 = (PMulop)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new AATerm(ptermNode2, pmulopNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ABTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new ABTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAMulop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMulop pmulopNode1;
        {
            // Block
        TAsterisk tasteriskNode2;
        tasteriskNode2 = (TAsterisk)nodeArrayList1.get(0);

        pmulopNode1 = new AAMulop(tasteriskNode2);
        }
	nodeList.add(pmulopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ABMulop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMulop pmulopNode1;
        {
            // Block
        TSlash tslashNode2;
        tslashNode2 = (TSlash)nodeArrayList1.get(0);

        pmulopNode1 = new ABMulop(tslashNode2);
        }
	nodeList.add(pmulopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TLeftPar tleftparNode2;
        PExpression pexpressionNode3;
        TRightPar trightparNode4;
        tleftparNode2 = (TLeftPar)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trightparNode4 = (TRightPar)nodeArrayList3.get(0);

        pfactorNode1 = new AAFactor(tleftparNode2, pexpressionNode3, trightparNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ABFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pfactorNode1 = new ABFactor(pvarNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ACFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PCall pcallNode2;
        pcallNode2 = (PCall)nodeArrayList1.get(0);

        pfactorNode1 = new ACFactor(pcallNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ADFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        pfactorNode1 = new ADFactor(tnumNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ACall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCall pcallNode1;
        {
            // Block
        TId tidNode2;
        TLeftPar tleftparNode3;
        PArgs pargsNode4;
        TRightPar trightparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tleftparNode3 = (TLeftPar)nodeArrayList2.get(0);
        pargsNode4 = (PArgs)nodeArrayList3.get(0);
        trightparNode5 = (TRightPar)nodeArrayList4.get(0);

        pcallNode1 = new ACall(tidNode2, tleftparNode3, pargsNode4, trightparNode5);
        }
	nodeList.add(pcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PArgsList pargslistNode2;
        pargslistNode2 = (PArgsList)nodeArrayList1.get(0);

        pargsNode1 = new AAArgs(pargslistNode2);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ABArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PEpsilon pepsilonNode2;
        pepsilonNode2 = (PEpsilon)nodeArrayList1.get(0);

        pargsNode1 = new ABArgs(pepsilonNode2);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAArgsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgsList pargslistNode1;
        {
            // Block
        PArgsList pargslistNode2;
        TComma tcommaNode3;
        PExpression pexpressionNode4;
        pargslistNode2 = (PArgsList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pargslistNode1 = new AAArgsList(pargslistNode2, tcommaNode3, pexpressionNode4);
        }
	nodeList.add(pargslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ABArgsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgsList pargslistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pargslistNode1 = new ABArgsList(pexpressionNode2);
        }
	nodeList.add(pargslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AEpsilon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PEpsilon pepsilonNode1;
        {
            // Block

        pepsilonNode1 = new AEpsilon();
        }
	nodeList.add(pepsilonNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 4}, {31, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 8}, {7, SHIFT, 11}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 11}, {22, SHIFT, 12}, {23, SHIFT, 13}, {25, SHIFT, 14}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 13}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 15}, },
			{{-1, ERROR, 14}, {8, SHIFT, 20}, },
			{{-1, REDUCE, 8}, {24, REDUCE, 12}, },
			{{-1, ERROR, 16}, {7, SHIFT, 21}, },
			{{-1, ERROR, 17}, {24, SHIFT, 22}, },
			{{-1, REDUCE, 11}, {21, SHIFT, 23}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 20}, {26, SHIFT, 24}, },
			{{-1, REDUCE, 15}, {25, SHIFT, 25}, },
			{{-1, ERROR, 22}, {27, SHIFT, 26}, },
			{{-1, ERROR, 23}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, ERROR, 24}, {22, SHIFT, 29}, },
			{{-1, ERROR, 25}, {26, SHIFT, 30}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 62}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 34}, {7, SHIFT, 37}, },
			{{-1, ERROR, 35}, {1, SHIFT, 38}, {4, SHIFT, 39}, {6, SHIFT, 40}, {7, SHIFT, 41}, {8, SHIFT, 42}, {22, SHIFT, 43}, {23, SHIFT, 44}, {27, SHIFT, 26}, {28, SHIFT, 45}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 37}, {22, SHIFT, 12}, {25, SHIFT, 14}, },
			{{-1, ERROR, 38}, {23, SHIFT, 59}, },
			{{-1, ERROR, 39}, {7, SHIFT, 41}, {8, SHIFT, 42}, {22, SHIFT, 60}, {23, SHIFT, 44}, },
			{{-1, ERROR, 40}, {23, SHIFT, 62}, },
			{{-1, REDUCE, 35}, {23, SHIFT, 63}, {25, SHIFT, 64}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 44}, {7, SHIFT, 41}, {8, SHIFT, 42}, {23, SHIFT, 44}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 52}, {22, SHIFT, 66}, },
			{{-1, REDUCE, 54}, {20, SHIFT, 67}, },
			{{-1, REDUCE, 34}, {14, SHIFT, 68}, {15, SHIFT, 69}, {16, SHIFT, 70}, {17, SHIFT, 71}, {18, SHIFT, 72}, {19, SHIFT, 73}, },
			{{-1, REDUCE, 38}, {10, SHIFT, 75}, {11, SHIFT, 76}, },
			{{-1, REDUCE, 46}, {12, SHIFT, 78}, {13, SHIFT, 79}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 59}, {7, SHIFT, 41}, {8, SHIFT, 42}, {23, SHIFT, 44}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 61}, {22, SHIFT, 82}, },
			{{-1, ERROR, 62}, {7, SHIFT, 41}, {8, SHIFT, 42}, {23, SHIFT, 44}, },
			{{-1, REDUCE, 62}, {7, SHIFT, 41}, {8, SHIFT, 42}, {23, SHIFT, 44}, },
			{{-1, ERROR, 64}, {7, SHIFT, 41}, {8, SHIFT, 42}, {23, SHIFT, 44}, },
			{{-1, ERROR, 65}, {24, SHIFT, 89}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 67}, {7, SHIFT, 41}, {8, SHIFT, 42}, {23, SHIFT, 44}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 74}, {7, SHIFT, 41}, {8, SHIFT, 42}, {23, SHIFT, 44}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 77}, {7, SHIFT, 41}, {8, SHIFT, 42}, {23, SHIFT, 44}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 80}, {7, SHIFT, 41}, {8, SHIFT, 42}, {23, SHIFT, 44}, },
			{{-1, ERROR, 81}, {24, SHIFT, 95}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 83}, {24, SHIFT, 96}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 85}, {24, SHIFT, 97}, },
			{{-1, REDUCE, 58}, {21, SHIFT, 98}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 88}, {26, SHIFT, 99}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 37}, {10, SHIFT, 75}, {11, SHIFT, 76}, },
			{{-1, REDUCE, 45}, {12, SHIFT, 78}, {13, SHIFT, 79}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 95}, {1, SHIFT, 38}, {4, SHIFT, 39}, {6, SHIFT, 40}, {7, SHIFT, 41}, {8, SHIFT, 42}, {22, SHIFT, 43}, {23, SHIFT, 44}, {27, SHIFT, 26}, },
			{{-1, ERROR, 96}, {1, SHIFT, 38}, {4, SHIFT, 39}, {6, SHIFT, 40}, {7, SHIFT, 41}, {8, SHIFT, 42}, {22, SHIFT, 43}, {23, SHIFT, 44}, {27, SHIFT, 26}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 98}, {7, SHIFT, 41}, {8, SHIFT, 42}, {23, SHIFT, 44}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 60}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, },
			{{-1, 6}, {5, 10}, },
			{{-1, 7}, {31, 33}, },
			{{-1, 8}, {13, 16}, {23, 16}, {31, 34}, },
			{{-1, 9}, },
			{{-1, 17}, },
			{{-1, 18}, },
			{{-1, 19}, {23, 28}, },
			{{-1, 46}, {22, 27}, },
			{{-1, 31}, },
			{{-1, 35}, },
			{{-1, 47}, {95, 100}, {96, 101}, },
			{{-1, 48}, },
			{{-1, 49}, },
			{{-1, 50}, },
			{{-1, 51}, },
			{{-1, 52}, {39, 61}, {44, 65}, {59, 81}, {62, 83}, {63, 84}, {64, 88}, {67, 90}, {98, 102}, },
			{{-1, 53}, {74, 91}, {77, 91}, {80, 91}, },
			{{-1, 54}, },
			{{-1, 74}, },
			{{-1, 55}, {74, 92}, },
			{{-1, 77}, },
			{{-1, 56}, {77, 93}, },
			{{-1, 80}, },
			{{-1, 57}, {80, 94}, },
			{{-1, 58}, },
			{{-1, 85}, },
			{{-1, 86}, },
			{{-1, 32}, {31, 36}, {63, 87}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'int', 'string', 'void'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'int', 'string', 'void', EOF",
			"expecting: ';', '(', '['",
			"expecting: 'if', 'int', 'string', 'return', 'void', 'while', id, num, ';', '(', '{', '}', EOF",
			"expecting: num",
			"expecting: id, ')'",
			"expecting: ')'",
			"expecting: ',', ')'",
			"expecting: ']'",
			"expecting: ',', ')', '['",
			"expecting: '{'",
			"expecting: ';'",
			"expecting: 'if', 'int', 'string', 'return', 'void', 'while', id, num, ';', '(', '{', '}'",
			"expecting: 'if', 'return', 'while', id, num, ';', '(', '{', '}'",
			"expecting: ';', '['",
			"expecting: '('",
			"expecting: id, num, ';', '('",
			"expecting: '+', '-', '/', '*', '<', '<=', '>', '>=', '==', '!=', '=', ',', ';', '(', ')', '[', ']'",
			"expecting: '+', '-', '/', '*', '<', '<=', '>', '>=', '==', '!=', ',', ';', ')', ']'",
			"expecting: id, num, '('",
			"expecting: '+', '-', '/', '*', '<', '<=', '>', '>=', '==', '!=', '=', ',', ';', ')', ']'",
			"expecting: '<', '<=', '>', '>=', '==', '!=', ',', ';', ')', ']'",
			"expecting: '+', '-', '<', '<=', '>', '>=', '==', '!=', ',', ';', ')', ']'",
			"expecting: id, num, '(', ')'",
			"expecting: ',', ';', ')', ']'",
			"expecting: 'if', 'return', 'while', id, num, ';', '(', '{'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 2, 3, 3, 3, 1, 3, 3, 4, 5, 0, 6, 7, 1, 8, 9, 9, 10, 11, 12, 0, 13, 10, 14, 3, 9, 5, 9, 14, 14, 14, 1, 15, 15, 16, 17, 18, 17, 19, 20, 15, 21, 5, 15, 15, 15, 15, 15, 15, 13, 22, 23, 24, 20, 20, 20, 21, 15, 13, 21, 25, 21, 8, 15, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 8, 15, 8, 9, 8, 9, 8, 10, 20, 26, 20, 24, 20, 20, 27, 27, 20, 21, 22, 15, 15, 9, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
