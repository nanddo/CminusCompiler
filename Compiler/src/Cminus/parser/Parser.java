/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.parser;

import Cminus.lexer.*;
import Cminus.node.*;
import Cminus.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AVarDeclaration */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AFuncDeclaration */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AMain$Type1MainDeclaration */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AMain$Void1MainDeclaration */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AAvariablevariabledeclaration1VariableDeclaration */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce AAvariablevariabledeclaration2VariableDeclaration */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AArrayDeclaration */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce AIntTypeSpecifier */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list);
            }
            break;
            case 10: /* reduce AStringTypeSpecifier */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list);
            }
            break;
            case 11: /* reduce AType1FunctionDeclaration */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list);
            }
            break;
            case 12: /* reduce AVoid1FunctionDeclaration */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list);
            }
            break;
            case 13: /* reduce AListParameters */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list);
            }
            break;
            case 14: /* reduce AVoidParameters */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list);
            }
            break;
            case 15: /* reduce AListParametersList */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list);
            }
            break;
            case 16: /* reduce ASingleParametersList */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list);
            }
            break;
            case 17: /* reduce AAsingleparameter1SingleParameter */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list);
            }
            break;
            case 18: /* reduce AAsingleparameter2SingleParameter */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list);
            }
            break;
            case 19: /* reduce AArrayParameter */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list);
            }
            break;
            case 20: /* reduce AAStatementList */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list);
            }
            break;
            case 21: /* reduce ABStatementList */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list);
            }
            break;
            case 22: /* reduce AAStatement */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list);
            }
            break;
            case 23: /* reduce ABStatement */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list);
            }
            break;
            case 24: /* reduce ACStatement */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list);
            }
            break;
            case 25: /* reduce ADStatement */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list);
            }
            break;
            case 26: /* reduce AEStatement */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list);
            }
            break;
            case 27: /* reduce AFStatement */
            {
                ArrayList<Object> list = new27();
                push(goTo(12), list);
            }
            break;
            case 28: /* reduce AAStatementWithElse */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list);
            }
            break;
            case 29: /* reduce ABStatementWithElse */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list);
            }
            break;
            case 30: /* reduce ACStatementWithElse */
            {
                ArrayList<Object> list = new30();
                push(goTo(13), list);
            }
            break;
            case 31: /* reduce ADStatementWithElse */
            {
                ArrayList<Object> list = new31();
                push(goTo(13), list);
            }
            break;
            case 32: /* reduce AEStatementWithElse */
            {
                ArrayList<Object> list = new32();
                push(goTo(13), list);
            }
            break;
            case 33: /* reduce AAAttributionStatement */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list);
            }
            break;
            case 34: /* reduce ABAttributionStatement */
            {
                ArrayList<Object> list = new34();
                push(goTo(14), list);
            }
            break;
            case 35: /* reduce ACAttributionStatement */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list);
            }
            break;
            case 36: /* reduce ADAttributionStatement */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list);
            }
            break;
            case 37: /* reduce AAcompoundstatement1CompoundStatement */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list);
            }
            break;
            case 38: /* reduce AAcompoundstatement2CompoundStatement */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list);
            }
            break;
            case 39: /* reduce AIfStatement */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list);
            }
            break;
            case 40: /* reduce AIfElseStatement */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list);
            }
            break;
            case 41: /* reduce AIfElseStatement2 */
            {
                ArrayList<Object> list = new41();
                push(goTo(18), list);
            }
            break;
            case 42: /* reduce AIterationStatement */
            {
                ArrayList<Object> list = new42();
                push(goTo(19), list);
            }
            break;
            case 43: /* reduce AIterationStatementElse */
            {
                ArrayList<Object> list = new43();
                push(goTo(20), list);
            }
            break;
            case 44: /* reduce AAReturnStatement */
            {
                ArrayList<Object> list = new44();
                push(goTo(21), list);
            }
            break;
            case 45: /* reduce ABReturnStatement */
            {
                ArrayList<Object> list = new45();
                push(goTo(21), list);
            }
            break;
            case 46: /* reduce AAvariable1Variable */
            {
                ArrayList<Object> list = new46();
                push(goTo(22), list);
            }
            break;
            case 47: /* reduce AAvariable2Variable */
            {
                ArrayList<Object> list = new47();
                push(goTo(22), list);
            }
            break;
            case 48: /* reduce AArrayExpression */
            {
                ArrayList<Object> list = new48();
                push(goTo(23), list);
            }
            break;
            case 49: /* reduce ALessThanRelationalExpression */
            {
                ArrayList<Object> list = new49();
                push(goTo(24), list);
            }
            break;
            case 50: /* reduce ALessEqualRelationalExpression */
            {
                ArrayList<Object> list = new50();
                push(goTo(24), list);
            }
            break;
            case 51: /* reduce AGreatThanRelationalExpression */
            {
                ArrayList<Object> list = new51();
                push(goTo(24), list);
            }
            break;
            case 52: /* reduce AGreatEqualRelationalExpression */
            {
                ArrayList<Object> list = new52();
                push(goTo(24), list);
            }
            break;
            case 53: /* reduce AEqualRelationalExpression */
            {
                ArrayList<Object> list = new53();
                push(goTo(24), list);
            }
            break;
            case 54: /* reduce ADifferentRelationalExpression */
            {
                ArrayList<Object> list = new54();
                push(goTo(24), list);
            }
            break;
            case 55: /* reduce AInputFunction */
            {
                ArrayList<Object> list = new55();
                push(goTo(25), list);
            }
            break;
            case 56: /* reduce AOutputFunction */
            {
                ArrayList<Object> list = new56();
                push(goTo(26), list);
            }
            break;
            case 57: /* reduce APlusExp */
            {
                ArrayList<Object> list = new57();
                push(goTo(27), list);
            }
            break;
            case 58: /* reduce AMinusExp */
            {
                ArrayList<Object> list = new58();
                push(goTo(27), list);
            }
            break;
            case 59: /* reduce ATermExp */
            {
                ArrayList<Object> list = new59();
                push(goTo(27), list);
            }
            break;
            case 60: /* reduce AMultTerm */
            {
                ArrayList<Object> list = new60();
                push(goTo(28), list);
            }
            break;
            case 61: /* reduce ADivTerm */
            {
                ArrayList<Object> list = new61();
                push(goTo(28), list);
            }
            break;
            case 62: /* reduce AFactorTerm */
            {
                ArrayList<Object> list = new62();
                push(goTo(28), list);
            }
            break;
            case 63: /* reduce AExpFactor */
            {
                ArrayList<Object> list = new63();
                push(goTo(29), list);
            }
            break;
            case 64: /* reduce AVarFactor */
            {
                ArrayList<Object> list = new64();
                push(goTo(29), list);
            }
            break;
            case 65: /* reduce ACallFactor */
            {
                ArrayList<Object> list = new65();
                push(goTo(29), list);
            }
            break;
            case 66: /* reduce ANumFactor */
            {
                ArrayList<Object> list = new66();
                push(goTo(29), list);
            }
            break;
            case 67: /* reduce ACall */
            {
                ArrayList<Object> list = new67();
                push(goTo(30), list);
            }
            break;
            case 68: /* reduce AAArgumentsList */
            {
                ArrayList<Object> list = new68();
                push(goTo(31), list);
            }
            break;
            case 69: /* reduce ABArgumentsList */
            {
                ArrayList<Object> list = new69();
                push(goTo(31), list);
            }
            break;
            case 70: /* reduce AAArguments */
            {
                ArrayList<Object> list = new70();
                push(goTo(32), list);
            }
            break;
            case 71: /* reduce ABArguments */
            {
                ArrayList<Object> list = new71();
                push(goTo(32), list);
            }
            break;
            case 72: /* reduce AEpsilon */
            {
                ArrayList<Object> list = new72();
                push(goTo(33), list);
            }
            break;
            case 73: /* reduce ATerminal$Declaration */
            {
                ArrayList<Object> list = new73();
                push(goTo(34), list);
            }
            break;
            case 74: /* reduce ANonTerminal$Declaration */
            {
                ArrayList<Object> list = new74();
                push(goTo(34), list);
            }
            break;
            case 75: /* reduce ATerminal$ArrayDeclaration */
            {
                ArrayList<Object> list = new75();
                push(goTo(35), list);
            }
            break;
            case 76: /* reduce ANonTerminal$ArrayDeclaration */
            {
                ArrayList<Object> list = new76();
                push(goTo(35), list);
            }
            break;
            case 77: /* reduce ATerminal$ArrayParameter */
            {
                ArrayList<Object> list = new77();
                push(goTo(36), list);
            }
            break;
            case 78: /* reduce ANonTerminal$ArrayParameter */
            {
                ArrayList<Object> list = new78();
                push(goTo(36), list);
            }
            break;
            case 79: /* reduce ATerminal$VariableDeclaration */
            {
                ArrayList<Object> list = new79();
                push(goTo(37), list);
            }
            break;
            case 80: /* reduce ANonTerminal$VariableDeclaration */
            {
                ArrayList<Object> list = new80();
                push(goTo(37), list);
            }
            break;
            case 81: /* reduce ATerminal$ArrayExpression */
            {
                ArrayList<Object> list = new81();
                push(goTo(38), list);
            }
            break;
            case 82: /* reduce ANonTerminal$ArrayExpression */
            {
                ArrayList<Object> list = new82();
                push(goTo(38), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PMainDeclaration pmaindeclarationNode3;
        {
            // Block
        }
        pmaindeclarationNode3 = (PMainDeclaration)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(listNode2, pmaindeclarationNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PMainDeclaration pmaindeclarationNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pmaindeclarationNode4 = (PMainDeclaration)nodeArrayList2.get(0);

        pprogramNode1 = new AProgram(listNode3, pmaindeclarationNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AVarDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PVariableDeclaration pvariabledeclarationNode2;
        pvariabledeclarationNode2 = (PVariableDeclaration)nodeArrayList1.get(0);

        pdeclarationNode1 = new AVarDeclaration(pvariabledeclarationNode2);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AFuncDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PFunctionDeclaration pfunctiondeclarationNode2;
        pfunctiondeclarationNode2 = (PFunctionDeclaration)nodeArrayList1.get(0);

        pdeclarationNode1 = new AFuncDeclaration(pfunctiondeclarationNode2);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AMain$Type1MainDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMainDeclaration pmaindeclarationNode1;
        {
            // Block
        PImplicitTypeSpecifier pimplicittypespecifierNode2;
        TMain tmainNode4;
        TLeftPar tleftparNode5;
        TVoid tvoidNode6;
        TRightPar trightparNode7;
        PCompoundStatement pcompoundstatementNode8;
        {
            // Block
        PTypeSpecifier ptypespecifierNode3;
        ptypespecifierNode3 = (PTypeSpecifier)nodeArrayList1.get(0);

        pimplicittypespecifierNode2 = new ATypeImplicitTypeSpecifier(ptypespecifierNode3);
        }
        tmainNode4 = (TMain)nodeArrayList2.get(0);
        tleftparNode5 = (TLeftPar)nodeArrayList3.get(0);
        tvoidNode6 = (TVoid)nodeArrayList4.get(0);
        trightparNode7 = (TRightPar)nodeArrayList5.get(0);
        pcompoundstatementNode8 = (PCompoundStatement)nodeArrayList6.get(0);

        pmaindeclarationNode1 = new AMainMainDeclaration(pimplicittypespecifierNode2, tmainNode4, tleftparNode5, tvoidNode6, trightparNode7, pcompoundstatementNode8);
        }
	nodeList.add(pmaindeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AMain$Void1MainDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMainDeclaration pmaindeclarationNode1;
        {
            // Block
        PImplicitTypeSpecifier pimplicittypespecifierNode2;
        TMain tmainNode4;
        TLeftPar tleftparNode5;
        TVoid tvoidNode6;
        TRightPar trightparNode7;
        PCompoundStatement pcompoundstatementNode8;
        {
            // Block
        TVoid tvoidNode3;
        tvoidNode3 = (TVoid)nodeArrayList1.get(0);

        pimplicittypespecifierNode2 = new AVoidImplicitTypeSpecifier(tvoidNode3);
        }
        tmainNode4 = (TMain)nodeArrayList2.get(0);
        tleftparNode5 = (TLeftPar)nodeArrayList3.get(0);
        tvoidNode6 = (TVoid)nodeArrayList4.get(0);
        trightparNode7 = (TRightPar)nodeArrayList5.get(0);
        pcompoundstatementNode8 = (PCompoundStatement)nodeArrayList6.get(0);

        pmaindeclarationNode1 = new AMainMainDeclaration(pimplicittypespecifierNode2, tmainNode4, tleftparNode5, tvoidNode6, trightparNode7, pcompoundstatementNode8);
        }
	nodeList.add(pmaindeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAvariablevariabledeclaration1VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        PTypeSpecifier ptypespecifierNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TSemicolon tsemicolonNode5;
        ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        tsemicolonNode5 = (TSemicolon)nodeArrayList3.get(0);

        pvariabledeclarationNode1 = new AVariableVariableDeclaration(ptypespecifierNode2, tidNode3, listNode4, tsemicolonNode5);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAvariablevariabledeclaration2VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        PTypeSpecifier ptypespecifierNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TSemicolon tsemicolonNode6;
        ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pvariabledeclarationNode1 = new AVariableVariableDeclaration(ptypespecifierNode2, tidNode3, listNode5, tsemicolonNode6);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AArrayDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayDeclaration parraydeclarationNode1;
        {
            // Block
        TLeftBracket tleftbracketNode2;
        TNum tnumNode3;
        TRightBracket trightbracketNode4;
        tleftbracketNode2 = (TLeftBracket)nodeArrayList1.get(0);
        tnumNode3 = (TNum)nodeArrayList2.get(0);
        trightbracketNode4 = (TRightBracket)nodeArrayList3.get(0);

        parraydeclarationNode1 = new AArrayDeclaration(tleftbracketNode2, tnumNode3, trightbracketNode4);
        }
	nodeList.add(parraydeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AIntTypeSpecifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeSpecifier ptypespecifierNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypespecifierNode1 = new AIntTypeSpecifier(tintNode2);
        }
	nodeList.add(ptypespecifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AStringTypeSpecifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeSpecifier ptypespecifierNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypespecifierNode1 = new AStringTypeSpecifier(tstringNode2);
        }
	nodeList.add(ptypespecifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AType1FunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDeclaration pfunctiondeclarationNode1;
        {
            // Block
        PImplicitTypeSpecifier pimplicittypespecifierNode2;
        TId tidNode4;
        TLeftPar tleftparNode5;
        PParameters pparametersNode6;
        TRightPar trightparNode7;
        PCompoundStatement pcompoundstatementNode8;
        {
            // Block
        PTypeSpecifier ptypespecifierNode3;
        ptypespecifierNode3 = (PTypeSpecifier)nodeArrayList1.get(0);

        pimplicittypespecifierNode2 = new ATypeImplicitTypeSpecifier(ptypespecifierNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        tleftparNode5 = (TLeftPar)nodeArrayList3.get(0);
        pparametersNode6 = (PParameters)nodeArrayList4.get(0);
        trightparNode7 = (TRightPar)nodeArrayList5.get(0);
        pcompoundstatementNode8 = (PCompoundStatement)nodeArrayList6.get(0);

        pfunctiondeclarationNode1 = new AFunctionDeclaration(pimplicittypespecifierNode2, tidNode4, tleftparNode5, pparametersNode6, trightparNode7, pcompoundstatementNode8);
        }
	nodeList.add(pfunctiondeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AVoid1FunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDeclaration pfunctiondeclarationNode1;
        {
            // Block
        PImplicitTypeSpecifier pimplicittypespecifierNode2;
        TId tidNode4;
        TLeftPar tleftparNode5;
        PParameters pparametersNode6;
        TRightPar trightparNode7;
        PCompoundStatement pcompoundstatementNode8;
        {
            // Block
        TVoid tvoidNode3;
        tvoidNode3 = (TVoid)nodeArrayList1.get(0);

        pimplicittypespecifierNode2 = new AVoidImplicitTypeSpecifier(tvoidNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        tleftparNode5 = (TLeftPar)nodeArrayList3.get(0);
        pparametersNode6 = (PParameters)nodeArrayList4.get(0);
        trightparNode7 = (TRightPar)nodeArrayList5.get(0);
        pcompoundstatementNode8 = (PCompoundStatement)nodeArrayList6.get(0);

        pfunctiondeclarationNode1 = new AFunctionDeclaration(pimplicittypespecifierNode2, tidNode4, tleftparNode5, pparametersNode6, trightparNode7, pcompoundstatementNode8);
        }
	nodeList.add(pfunctiondeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AListParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        PParametersList pparameterslistNode2;
        pparameterslistNode2 = (PParametersList)nodeArrayList1.get(0);

        pparametersNode1 = new AListParameters(pparameterslistNode2);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AVoidParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        pparametersNode1 = new AVoidParameters(tvoidNode2);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AListParametersList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametersList pparameterslistNode1;
        {
            // Block
        PParametersList pparameterslistNode2;
        TComma tcommaNode3;
        PSingleParameter psingleparameterNode4;
        pparameterslistNode2 = (PParametersList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        psingleparameterNode4 = (PSingleParameter)nodeArrayList3.get(0);

        pparameterslistNode1 = new AListParametersList(pparameterslistNode2, tcommaNode3, psingleparameterNode4);
        }
	nodeList.add(pparameterslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ASingleParametersList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametersList pparameterslistNode1;
        {
            // Block
        PSingleParameter psingleparameterNode2;
        psingleparameterNode2 = (PSingleParameter)nodeArrayList1.get(0);

        pparameterslistNode1 = new ASingleParametersList(psingleparameterNode2);
        }
	nodeList.add(pparameterslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAsingleparameter1SingleParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSingleParameter psingleparameterNode1;
        {
            // Block
        PTypeSpecifier ptypespecifierNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }

        psingleparameterNode1 = new ASingleParameter(ptypespecifierNode2, tidNode3, listNode4);
        }
	nodeList.add(psingleparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAsingleparameter2SingleParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSingleParameter psingleparameterNode1;
        {
            // Block
        PTypeSpecifier ptypespecifierNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        psingleparameterNode1 = new ASingleParameter(ptypespecifierNode2, tidNode3, listNode5);
        }
	nodeList.add(psingleparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AArrayParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayParameter parrayparameterNode1;
        {
            // Block
        TLeftBracket tleftbracketNode2;
        TRightBracket trightbracketNode3;
        tleftbracketNode2 = (TLeftBracket)nodeArrayList1.get(0);
        trightbracketNode3 = (TRightBracket)nodeArrayList2.get(0);

        parrayparameterNode1 = new AArrayParameter(tleftbracketNode2, trightbracketNode3);
        }
	nodeList.add(parrayparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAStatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementList pstatementlistNode1;
        {
            // Block
        PStatementList pstatementlistNode2;
        PStatement pstatementNode3;
        pstatementlistNode2 = (PStatementList)nodeArrayList1.get(0);
        pstatementNode3 = (PStatement)nodeArrayList2.get(0);

        pstatementlistNode1 = new AAStatementList(pstatementlistNode2, pstatementNode3);
        }
	nodeList.add(pstatementlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ABStatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementList pstatementlistNode1;
        {
            // Block
        PEpsilon pepsilonNode2;
        pepsilonNode2 = (PEpsilon)nodeArrayList1.get(0);

        pstatementlistNode1 = new ABStatementList(pepsilonNode2);
        }
	nodeList.add(pstatementlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PAttributionStatement pattributionstatementNode2;
        pattributionstatementNode2 = (PAttributionStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AAStatement(pattributionstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ABStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCompoundStatement pcompoundstatementNode2;
        pcompoundstatementNode2 = (PCompoundStatement)nodeArrayList1.get(0);

        pstatementNode1 = new ABStatement(pcompoundstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ACStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PReturnStatement preturnstatementNode2;
        preturnstatementNode2 = (PReturnStatement)nodeArrayList1.get(0);

        pstatementNode1 = new ACStatement(preturnstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ADStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIfStatement pifstatementNode2;
        pifstatementNode2 = (PIfStatement)nodeArrayList1.get(0);

        pstatementNode1 = new ADStatement(pifstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AEStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIfElseStatement pifelsestatementNode2;
        pifelsestatementNode2 = (PIfElseStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AEStatement(pifelsestatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AFStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIterationStatement piterationstatementNode2;
        piterationstatementNode2 = (PIterationStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AFStatement(piterationstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAStatementWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementWithElse pstatementwithelseNode1;
        {
            // Block
        PAttributionStatement pattributionstatementNode2;
        pattributionstatementNode2 = (PAttributionStatement)nodeArrayList1.get(0);

        pstatementwithelseNode1 = new AAStatementWithElse(pattributionstatementNode2);
        }
	nodeList.add(pstatementwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ABStatementWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementWithElse pstatementwithelseNode1;
        {
            // Block
        PCompoundStatement pcompoundstatementNode2;
        pcompoundstatementNode2 = (PCompoundStatement)nodeArrayList1.get(0);

        pstatementwithelseNode1 = new ABStatementWithElse(pcompoundstatementNode2);
        }
	nodeList.add(pstatementwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ACStatementWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementWithElse pstatementwithelseNode1;
        {
            // Block
        PReturnStatement preturnstatementNode2;
        preturnstatementNode2 = (PReturnStatement)nodeArrayList1.get(0);

        pstatementwithelseNode1 = new ACStatementWithElse(preturnstatementNode2);
        }
	nodeList.add(pstatementwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ADStatementWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementWithElse pstatementwithelseNode1;
        {
            // Block
        PIfElseStatement2 pifelsestatement2Node2;
        pifelsestatement2Node2 = (PIfElseStatement2)nodeArrayList1.get(0);

        pstatementwithelseNode1 = new ADStatementWithElse(pifelsestatement2Node2);
        }
	nodeList.add(pstatementwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AEStatementWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementWithElse pstatementwithelseNode1;
        {
            // Block
        PIterationStatementElse piterationstatementelseNode2;
        piterationstatementelseNode2 = (PIterationStatementElse)nodeArrayList1.get(0);

        pstatementwithelseNode1 = new AEStatementWithElse(piterationstatementelseNode2);
        }
	nodeList.add(pstatementwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAAttributionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttributionStatement pattributionstatementNode1;
        {
            // Block
        PVariable pvariableNode2;
        TAttribution tattributionNode3;
        PExp pexpNode4;
        TSemicolon tsemicolonNode5;
        pvariableNode2 = (PVariable)nodeArrayList1.get(0);
        tattributionNode3 = (TAttribution)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pattributionstatementNode1 = new AAAttributionStatement(pvariableNode2, tattributionNode3, pexpNode4, tsemicolonNode5);
        }
	nodeList.add(pattributionstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ABAttributionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttributionStatement pattributionstatementNode1;
        {
            // Block
        PVariable pvariableNode2;
        TAttribution tattributionNode3;
        TStringValue tstringvalueNode4;
        TSemicolon tsemicolonNode5;
        pvariableNode2 = (PVariable)nodeArrayList1.get(0);
        tattributionNode3 = (TAttribution)nodeArrayList2.get(0);
        tstringvalueNode4 = (TStringValue)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pattributionstatementNode1 = new ABAttributionStatement(pvariableNode2, tattributionNode3, tstringvalueNode4, tsemicolonNode5);
        }
	nodeList.add(pattributionstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ACAttributionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttributionStatement pattributionstatementNode1;
        {
            // Block
        PCall pcallNode2;
        TSemicolon tsemicolonNode3;
        pcallNode2 = (PCall)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pattributionstatementNode1 = new ACAttributionStatement(pcallNode2, tsemicolonNode3);
        }
	nodeList.add(pattributionstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ADAttributionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttributionStatement pattributionstatementNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pattributionstatementNode1 = new ADAttributionStatement(tsemicolonNode2);
        }
	nodeList.add(pattributionstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAcompoundstatement1CompoundStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompoundStatement pcompoundstatementNode1;
        {
            // Block
        TLeftBrace tleftbraceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PStatementList pstatementlistNode4;
        TRightBrace trightbraceNode5;
        tleftbraceNode2 = (TLeftBrace)nodeArrayList1.get(0);
        {
            // Block
        }
        pstatementlistNode4 = (PStatementList)nodeArrayList2.get(0);
        trightbraceNode5 = (TRightBrace)nodeArrayList3.get(0);

        pcompoundstatementNode1 = new ACompoundStatement(tleftbraceNode2, listNode3, pstatementlistNode4, trightbraceNode5);
        }
	nodeList.add(pcompoundstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAcompoundstatement2CompoundStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompoundStatement pcompoundstatementNode1;
        {
            // Block
        TLeftBrace tleftbraceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PStatementList pstatementlistNode5;
        TRightBrace trightbraceNode6;
        tleftbraceNode2 = (TLeftBrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pstatementlistNode5 = (PStatementList)nodeArrayList3.get(0);
        trightbraceNode6 = (TRightBrace)nodeArrayList4.get(0);

        pcompoundstatementNode1 = new ACompoundStatement(tleftbraceNode2, listNode4, pstatementlistNode5, trightbraceNode6);
        }
	nodeList.add(pcompoundstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStatement pifstatementNode1;
        {
            // Block
        TIf tifNode2;
        TLeftPar tleftparNode3;
        PRelationalExpression prelationalexpressionNode4;
        TRightPar trightparNode5;
        PStatement pstatementNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tleftparNode3 = (TLeftPar)nodeArrayList2.get(0);
        prelationalexpressionNode4 = (PRelationalExpression)nodeArrayList3.get(0);
        trightparNode5 = (TRightPar)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        pifstatementNode1 = new AIfStatement(tifNode2, tleftparNode3, prelationalexpressionNode4, trightparNode5, pstatementNode6);
        }
	nodeList.add(pifstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AIfElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfElseStatement pifelsestatementNode1;
        {
            // Block
        TIf tifNode2;
        TLeftPar tleftparNode3;
        PRelationalExpression prelationalexpressionNode4;
        TRightPar trightparNode5;
        PStatementWithElse pstatementwithelseNode6;
        TElse telseNode7;
        PStatement pstatementNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tleftparNode3 = (TLeftPar)nodeArrayList2.get(0);
        prelationalexpressionNode4 = (PRelationalExpression)nodeArrayList3.get(0);
        trightparNode5 = (TRightPar)nodeArrayList4.get(0);
        pstatementwithelseNode6 = (PStatementWithElse)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pstatementNode8 = (PStatement)nodeArrayList7.get(0);

        pifelsestatementNode1 = new AIfElseStatement(tifNode2, tleftparNode3, prelationalexpressionNode4, trightparNode5, pstatementwithelseNode6, telseNode7, pstatementNode8);
        }
	nodeList.add(pifelsestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AIfElseStatement2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfElseStatement2 pifelsestatement2Node1;
        {
            // Block
        TIf tifNode2;
        TLeftPar tleftparNode3;
        PRelationalExpression prelationalexpressionNode4;
        TRightPar trightparNode5;
        PStatementWithElse pstatementwithelseNode6;
        TElse telseNode7;
        PStatementWithElse pstatementwithelseNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tleftparNode3 = (TLeftPar)nodeArrayList2.get(0);
        prelationalexpressionNode4 = (PRelationalExpression)nodeArrayList3.get(0);
        trightparNode5 = (TRightPar)nodeArrayList4.get(0);
        pstatementwithelseNode6 = (PStatementWithElse)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pstatementwithelseNode8 = (PStatementWithElse)nodeArrayList7.get(0);

        pifelsestatement2Node1 = new AIfElseStatement2(tifNode2, tleftparNode3, prelationalexpressionNode4, trightparNode5, pstatementwithelseNode6, telseNode7, pstatementwithelseNode8);
        }
	nodeList.add(pifelsestatement2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AIterationStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterationStatement piterationstatementNode1;
        {
            // Block
        TWhile twhileNode2;
        TLeftPar tleftparNode3;
        PRelationalExpression prelationalexpressionNode4;
        TRightPar trightparNode5;
        PStatement pstatementNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tleftparNode3 = (TLeftPar)nodeArrayList2.get(0);
        prelationalexpressionNode4 = (PRelationalExpression)nodeArrayList3.get(0);
        trightparNode5 = (TRightPar)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        piterationstatementNode1 = new AIterationStatement(twhileNode2, tleftparNode3, prelationalexpressionNode4, trightparNode5, pstatementNode6);
        }
	nodeList.add(piterationstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AIterationStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterationStatementElse piterationstatementelseNode1;
        {
            // Block
        TWhile twhileNode2;
        TLeftPar tleftparNode3;
        PRelationalExpression prelationalexpressionNode4;
        TRightPar trightparNode5;
        PStatementWithElse pstatementwithelseNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tleftparNode3 = (TLeftPar)nodeArrayList2.get(0);
        prelationalexpressionNode4 = (PRelationalExpression)nodeArrayList3.get(0);
        trightparNode5 = (TRightPar)nodeArrayList4.get(0);
        pstatementwithelseNode6 = (PStatementWithElse)nodeArrayList5.get(0);

        piterationstatementelseNode1 = new AIterationStatementElse(twhileNode2, tleftparNode3, prelationalexpressionNode4, trightparNode5, pstatementwithelseNode6);
        }
	nodeList.add(piterationstatementelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAReturnStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnStatement preturnstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        preturnstatementNode1 = new AAReturnStatement(treturnNode2, tsemicolonNode3);
        }
	nodeList.add(preturnstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ABReturnStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnStatement preturnstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        PExp pexpNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        preturnstatementNode1 = new ABReturnStatement(treturnNode2, pexpNode3, tsemicolonNode4);
        }
	nodeList.add(preturnstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAvariable1Variable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        pvariableNode1 = new AVariable(tidNode2, listNode3);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAvariable2Variable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pvariableNode1 = new AVariable(tidNode2, listNode4);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AArrayExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayExpression parrayexpressionNode1;
        {
            // Block
        TLeftBracket tleftbracketNode2;
        PExp pexpNode3;
        TRightBracket trightbracketNode4;
        tleftbracketNode2 = (TLeftBracket)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trightbracketNode4 = (TRightBracket)nodeArrayList3.get(0);

        parrayexpressionNode1 = new AArrayExpression(tleftbracketNode2, pexpNode3, trightbracketNode4);
        }
	nodeList.add(parrayexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ALessThanRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PExp pexpNode2;
        TLessThan tlessthanNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tlessthanNode3 = (TLessThan)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        prelationalexpressionNode1 = new ALessThanRelationalExpression(pexpNode2, tlessthanNode3, pexpNode4);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ALessEqualRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PExp pexpNode2;
        TLessEqual tlessequalNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tlessequalNode3 = (TLessEqual)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        prelationalexpressionNode1 = new ALessEqualRelationalExpression(pexpNode2, tlessequalNode3, pexpNode4);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AGreatThanRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PExp pexpNode2;
        TGreatThan tgreatthanNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tgreatthanNode3 = (TGreatThan)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        prelationalexpressionNode1 = new AGreatThanRelationalExpression(pexpNode2, tgreatthanNode3, pexpNode4);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AGreatEqualRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PExp pexpNode2;
        TGreatEqual tgreatequalNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tgreatequalNode3 = (TGreatEqual)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        prelationalexpressionNode1 = new AGreatEqualRelationalExpression(pexpNode2, tgreatequalNode3, pexpNode4);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AEqualRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PExp pexpNode2;
        TEqual tequalNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        prelationalexpressionNode1 = new AEqualRelationalExpression(pexpNode2, tequalNode3, pexpNode4);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ADifferentRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PExp pexpNode2;
        TDifferent tdifferentNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tdifferentNode3 = (TDifferent)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        prelationalexpressionNode1 = new ADifferentRelationalExpression(pexpNode2, tdifferentNode3, pexpNode4);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AInputFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInputFunction pinputfunctionNode1;
        {
            // Block
        PTypeSpecifier ptypespecifierNode2;
        TInput tinputNode3;
        TLeftPar tleftparNode4;
        TVoid tvoidNode5;
        TRightPar trightparNode6;
        ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1.get(0);
        tinputNode3 = (TInput)nodeArrayList2.get(0);
        tleftparNode4 = (TLeftPar)nodeArrayList3.get(0);
        tvoidNode5 = (TVoid)nodeArrayList4.get(0);
        trightparNode6 = (TRightPar)nodeArrayList5.get(0);

        pinputfunctionNode1 = new AInputFunction(ptypespecifierNode2, tinputNode3, tleftparNode4, tvoidNode5, trightparNode6);
        }
	nodeList.add(pinputfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AOutputFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POutputFunction poutputfunctionNode1;
        {
            // Block
        TVoid tvoidNode2;
        TOutput toutputNode3;
        TLeftPar tleftparNode4;
        PTypeSpecifier ptypespecifierNode5;
        TId tidNode6;
        TRightPar trightparNode7;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        toutputNode3 = (TOutput)nodeArrayList2.get(0);
        tleftparNode4 = (TLeftPar)nodeArrayList3.get(0);
        ptypespecifierNode5 = (PTypeSpecifier)nodeArrayList4.get(0);
        tidNode6 = (TId)nodeArrayList5.get(0);
        trightparNode7 = (TRightPar)nodeArrayList6.get(0);

        poutputfunctionNode1 = new AOutputFunction(tvoidNode2, toutputNode3, tleftparNode4, ptypespecifierNode5, tidNode6, trightparNode7);
        }
	nodeList.add(poutputfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce APlusExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TPlus tplusNode3;
        PTerm ptermNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexpNode1 = new APlusExp(pexpNode2, tplusNode3, ptermNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AMinusExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMinus tminusNode3;
        PTerm ptermNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, tminusNode3, ptermNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ATermExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pexpNode1 = new ATermExp(ptermNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TAsterisk tasteriskNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tasteriskNode3 = (TAsterisk)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new AMultTerm(ptermNode2, tasteriskNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ADivTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TSlash tslashNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tslashNode3 = (TSlash)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new ADivTerm(ptermNode2, tslashNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new AFactorTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AExpFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TLeftPar tleftparNode2;
        PExp pexpNode3;
        TRightPar trightparNode4;
        tleftparNode2 = (TLeftPar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trightparNode4 = (TRightPar)nodeArrayList3.get(0);

        pfactorNode1 = new AExpFactor(tleftparNode2, pexpNode3, trightparNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AVarFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PVariable pvariableNode2;
        pvariableNode2 = (PVariable)nodeArrayList1.get(0);

        pfactorNode1 = new AVarFactor(pvariableNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ACallFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PCall pcallNode2;
        pcallNode2 = (PCall)nodeArrayList1.get(0);

        pfactorNode1 = new ACallFactor(pcallNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ANumFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        pfactorNode1 = new ANumFactor(tnumNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ACall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCall pcallNode1;
        {
            // Block
        TId tidNode2;
        TLeftPar tleftparNode3;
        PArguments pargumentsNode4;
        TRightPar trightparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tleftparNode3 = (TLeftPar)nodeArrayList2.get(0);
        pargumentsNode4 = (PArguments)nodeArrayList3.get(0);
        trightparNode5 = (TRightPar)nodeArrayList4.get(0);

        pcallNode1 = new ACall(tidNode2, tleftparNode3, pargumentsNode4, trightparNode5);
        }
	nodeList.add(pcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAArgumentsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentsList pargumentslistNode1;
        {
            // Block
        PArgumentsList pargumentslistNode2;
        TComma tcommaNode3;
        PExp pexpNode4;
        pargumentslistNode2 = (PArgumentsList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pargumentslistNode1 = new AAArgumentsList(pargumentslistNode2, tcommaNode3, pexpNode4);
        }
	nodeList.add(pargumentslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ABArgumentsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentsList pargumentslistNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pargumentslistNode1 = new ABArgumentsList(pexpNode2);
        }
	nodeList.add(pargumentslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AAArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArguments pargumentsNode1;
        {
            // Block
        PArgumentsList pargumentslistNode2;
        pargumentslistNode2 = (PArgumentsList)nodeArrayList1.get(0);

        pargumentsNode1 = new AAArguments(pargumentslistNode2);
        }
	nodeList.add(pargumentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ABArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArguments pargumentsNode1;
        {
            // Block
        PEpsilon pepsilonNode2;
        pepsilonNode2 = (PEpsilon)nodeArrayList1.get(0);

        pargumentsNode1 = new ABArguments(pepsilonNode2);
        }
	nodeList.add(pargumentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AEpsilon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PEpsilon pepsilonNode1;
        {
            // Block

        pepsilonNode1 = new AEpsilon();
        }
	nodeList.add(pepsilonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ATerminal$Declaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaration pdeclarationNode1;
        pdeclarationNode1 = (PDeclaration)nodeArrayList1.get(0);
	if(pdeclarationNode1 != null)
	{
	  listNode2.add(pdeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ANonTerminal$Declaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaration pdeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclarationNode2 = (PDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclarationNode2 != null)
	{
	  listNode3.add(pdeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ATerminal$ArrayDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArrayDeclaration parraydeclarationNode1;
        parraydeclarationNode1 = (PArrayDeclaration)nodeArrayList1.get(0);
	if(parraydeclarationNode1 != null)
	{
	  listNode2.add(parraydeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ANonTerminal$ArrayDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArrayDeclaration parraydeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parraydeclarationNode2 = (PArrayDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parraydeclarationNode2 != null)
	{
	  listNode3.add(parraydeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ATerminal$ArrayParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArrayParameter parrayparameterNode1;
        parrayparameterNode1 = (PArrayParameter)nodeArrayList1.get(0);
	if(parrayparameterNode1 != null)
	{
	  listNode2.add(parrayparameterNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ANonTerminal$ArrayParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArrayParameter parrayparameterNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parrayparameterNode2 = (PArrayParameter)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parrayparameterNode2 != null)
	{
	  listNode3.add(parrayparameterNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ATerminal$VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVariableDeclaration pvariabledeclarationNode1;
        pvariabledeclarationNode1 = (PVariableDeclaration)nodeArrayList1.get(0);
	if(pvariabledeclarationNode1 != null)
	{
	  listNode2.add(pvariabledeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ANonTerminal$VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVariableDeclaration pvariabledeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvariabledeclarationNode2 = (PVariableDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvariabledeclarationNode2 != null)
	{
	  listNode3.add(pvariabledeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ATerminal$ArrayExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArrayExpression parrayexpressionNode1;
        parrayexpressionNode1 = (PArrayExpression)nodeArrayList1.get(0);
	if(parrayexpressionNode1 != null)
	{
	  listNode2.add(parrayexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ANonTerminal$ArrayExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArrayExpression parrayexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parrayexpressionNode2 = (PArrayExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parrayexpressionNode2 != null)
	{
	  listNode3.add(parrayexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 3}, {7, SHIFT, 11}, {10, SHIFT, 12}, },
			{{-1, ERROR, 4}, {32, ACCEPT, -1}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 8}, {7, SHIFT, 13}, {10, SHIFT, 14}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 10}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, ERROR, 11}, {26, SHIFT, 17}, },
			{{-1, ERROR, 12}, {26, SHIFT, 18}, },
			{{-1, ERROR, 13}, {26, SHIFT, 19}, },
			{{-1, ERROR, 14}, {25, SHIFT, 20}, {26, SHIFT, 21}, {28, SHIFT, 22}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 17}, {5, SHIFT, 25}, },
			{{-1, ERROR, 18}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 26}, },
			{{-1, ERROR, 19}, {5, SHIFT, 31}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 21}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 26}, },
			{{-1, ERROR, 22}, {11, SHIFT, 33}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 24}, {25, SHIFT, 34}, {28, SHIFT, 22}, },
			{{-1, ERROR, 25}, {27, SHIFT, 36}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 27}, {10, SHIFT, 37}, },
			{{-1, ERROR, 28}, {27, SHIFT, 38}, },
			{{-1, REDUCE, 13}, {24, SHIFT, 39}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 31}, {27, SHIFT, 40}, },
			{{-1, ERROR, 32}, {27, SHIFT, 41}, },
			{{-1, ERROR, 33}, {29, SHIFT, 42}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 36}, {30, SHIFT, 43}, },
			{{-1, REDUCE, 17}, {28, SHIFT, 45}, },
			{{-1, ERROR, 38}, {30, SHIFT, 43}, },
			{{-1, ERROR, 39}, {2, SHIFT, 1}, {3, SHIFT, 2}, },
			{{-1, ERROR, 40}, {30, SHIFT, 43}, },
			{{-1, ERROR, 41}, {30, SHIFT, 43}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 72}, {2, SHIFT, 1}, {3, SHIFT, 2}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 45}, {29, SHIFT, 57}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 18}, {28, SHIFT, 45}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 53}, {10, SHIFT, 59}, },
			{{-1, ERROR, 54}, {1, SHIFT, 60}, {4, SHIFT, 61}, {6, SHIFT, 62}, {10, SHIFT, 63}, {25, SHIFT, 64}, {30, SHIFT, 43}, {31, SHIFT, 65}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 72}, {2, SHIFT, 1}, {3, SHIFT, 2}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 59}, {25, SHIFT, 20}, {28, SHIFT, 22}, },
			{{-1, ERROR, 60}, {26, SHIFT, 77}, },
			{{-1, ERROR, 61}, {10, SHIFT, 63}, {11, SHIFT, 78}, {25, SHIFT, 79}, {26, SHIFT, 80}, },
			{{-1, ERROR, 62}, {26, SHIFT, 86}, },
			{{-1, REDUCE, 46}, {26, SHIFT, 87}, {28, SHIFT, 88}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 73}, {23, SHIFT, 91}, },
			{{-1, ERROR, 74}, {25, SHIFT, 92}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 76}, {1, SHIFT, 60}, {4, SHIFT, 61}, {6, SHIFT, 62}, {10, SHIFT, 63}, {25, SHIFT, 64}, {30, SHIFT, 43}, {31, SHIFT, 93}, },
			{{-1, ERROR, 77}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 80}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 82}, {13, SHIFT, 97}, {14, SHIFT, 98}, {25, SHIFT, 99}, },
			{{-1, REDUCE, 59}, {15, SHIFT, 100}, {16, SHIFT, 101}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 86}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, REDUCE, 72}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, ERROR, 88}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 47}, {28, SHIFT, 88}, },
			{{-1, ERROR, 91}, {10, SHIFT, 63}, {11, SHIFT, 78}, {12, SHIFT, 109}, {26, SHIFT, 80}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 94}, {27, SHIFT, 111}, },
			{{-1, ERROR, 95}, {13, SHIFT, 97}, {14, SHIFT, 98}, {17, SHIFT, 112}, {18, SHIFT, 113}, {19, SHIFT, 114}, {20, SHIFT, 115}, {21, SHIFT, 116}, {22, SHIFT, 117}, },
			{{-1, ERROR, 96}, {13, SHIFT, 97}, {14, SHIFT, 98}, {27, SHIFT, 118}, },
			{{-1, ERROR, 97}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, ERROR, 98}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 100}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, ERROR, 101}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, ERROR, 102}, {27, SHIFT, 123}, },
			{{-1, REDUCE, 69}, {13, SHIFT, 97}, {14, SHIFT, 98}, },
			{{-1, REDUCE, 70}, {24, SHIFT, 124}, },
			{{-1, ERROR, 105}, {27, SHIFT, 125}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 107}, {13, SHIFT, 97}, {14, SHIFT, 98}, {29, SHIFT, 126}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 109}, {25, SHIFT, 127}, },
			{{-1, ERROR, 110}, {13, SHIFT, 97}, {14, SHIFT, 98}, {25, SHIFT, 128}, },
			{{-1, ERROR, 111}, {1, SHIFT, 129}, {4, SHIFT, 61}, {6, SHIFT, 130}, {10, SHIFT, 63}, {25, SHIFT, 64}, {30, SHIFT, 43}, },
			{{-1, ERROR, 112}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, ERROR, 113}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, ERROR, 114}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, ERROR, 115}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, ERROR, 116}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, ERROR, 117}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 57}, {15, SHIFT, 100}, {16, SHIFT, 101}, },
			{{-1, REDUCE, 58}, {15, SHIFT, 100}, {16, SHIFT, 101}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 123}, {1, SHIFT, 60}, {4, SHIFT, 61}, {6, SHIFT, 62}, {10, SHIFT, 63}, {25, SHIFT, 64}, {30, SHIFT, 43}, },
			{{-1, ERROR, 124}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 129}, {26, SHIFT, 146}, },
			{{-1, ERROR, 130}, {26, SHIFT, 147}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 132}, {0, SHIFT, 148}, },
			{{-1, REDUCE, 22}, {0, REDUCE, 28}, },
			{{-1, REDUCE, 23}, {0, REDUCE, 29}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 24}, {0, REDUCE, 30}, },
			{{-1, REDUCE, 49}, {13, SHIFT, 97}, {14, SHIFT, 98}, },
			{{-1, REDUCE, 50}, {13, SHIFT, 97}, {14, SHIFT, 98}, },
			{{-1, REDUCE, 51}, {13, SHIFT, 97}, {14, SHIFT, 98}, },
			{{-1, REDUCE, 52}, {13, SHIFT, 97}, {14, SHIFT, 98}, },
			{{-1, REDUCE, 53}, {13, SHIFT, 97}, {14, SHIFT, 98}, },
			{{-1, REDUCE, 54}, {13, SHIFT, 97}, {14, SHIFT, 98}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 68}, {13, SHIFT, 97}, {14, SHIFT, 98}, },
			{{-1, ERROR, 146}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, ERROR, 147}, {10, SHIFT, 63}, {11, SHIFT, 78}, {26, SHIFT, 80}, },
			{{-1, ERROR, 148}, {1, SHIFT, 60}, {4, SHIFT, 61}, {6, SHIFT, 62}, {10, SHIFT, 63}, {25, SHIFT, 64}, {30, SHIFT, 43}, },
			{{-1, ERROR, 149}, {27, SHIFT, 152}, },
			{{-1, ERROR, 150}, {27, SHIFT, 153}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 152}, {1, SHIFT, 129}, {4, SHIFT, 61}, {6, SHIFT, 130}, {10, SHIFT, 63}, {25, SHIFT, 64}, {30, SHIFT, 43}, },
			{{-1, ERROR, 153}, {1, SHIFT, 129}, {4, SHIFT, 61}, {6, SHIFT, 130}, {10, SHIFT, 63}, {25, SHIFT, 64}, {30, SHIFT, 43}, },
			{{-1, ERROR, 154}, {0, SHIFT, 156}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 156}, {1, SHIFT, 129}, {4, SHIFT, 61}, {6, SHIFT, 130}, {10, SHIFT, 63}, {25, SHIFT, 64}, {30, SHIFT, 43}, },
			{{-1, REDUCE, 41}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, {10, 15}, },
			{{-1, 6}, {10, 16}, },
			{{-1, 7}, {43, 52}, {56, 75}, },
			{{-1, 23}, {24, 35}, },
			{{-1, 27}, {0, 8}, {10, 8}, {43, 53}, {56, 53}, },
			{{-1, 9}, },
			{{-1, 28}, {21, 32}, },
			{{-1, 29}, },
			{{-1, 30}, {39, 49}, },
			{{-1, 46}, {47, 58}, },
			{{-1, 54}, {56, 76}, },
			{{-1, 66}, {111, 131}, {123, 144}, {148, 151}, {152, 131}, {153, 144}, {156, 151}, },
			{{-1, 132}, {152, 154}, {153, 155}, {156, 157}, },
			{{-1, 67}, {111, 133}, {152, 133}, {153, 133}, {156, 133}, },
			{{-1, 68}, {36, 44}, {38, 48}, {40, 50}, {41, 51}, {111, 134}, {152, 134}, {153, 134}, {156, 134}, },
			{{-1, 69}, },
			{{-1, 70}, },
			{{-1, 135}, },
			{{-1, 71}, },
			{{-1, 136}, },
			{{-1, 72}, {111, 137}, {152, 137}, {153, 137}, {156, 137}, },
			{{-1, 81}, {54, 73}, {76, 73}, {111, 73}, {123, 73}, {148, 73}, {152, 73}, {153, 73}, {156, 73}, },
			{{-1, 89}, {90, 108}, },
			{{-1, 94}, {86, 102}, {146, 149}, {147, 150}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 95}, {61, 82}, {80, 96}, {87, 103}, {88, 107}, {91, 110}, {112, 138}, {113, 139}, {114, 140}, {115, 141}, {116, 142}, {117, 143}, {124, 145}, },
			{{-1, 83}, {97, 119}, {98, 120}, },
			{{-1, 84}, {100, 121}, {101, 122}, },
			{{-1, 85}, {54, 74}, {76, 74}, {111, 74}, {123, 74}, {148, 74}, {152, 74}, {153, 74}, {156, 74}, },
			{{-1, 104}, },
			{{-1, 105}, },
			{{-1, 55}, {87, 106}, },
			{{-1, 10}, },
			{{-1, 24}, },
			{{-1, 47}, },
			{{-1, 56}, },
			{{-1, 90}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'int', 'string', 'void'",
			"expecting: 'main', id",
			"expecting: EOF",
			"expecting: '('",
			"expecting: ';', '(', '['",
			"expecting: 'void'",
			"expecting: 'if', 'int', 'string', 'return', 'void', 'while', id, ';', '{', '}'",
			"expecting: num",
			"expecting: ';', '['",
			"expecting: ')'",
			"expecting: id",
			"expecting: ',', ')'",
			"expecting: ']'",
			"expecting: '{'",
			"expecting: ',', ')', '['",
			"expecting: 'int', 'string'",
			"expecting: 'if', 'int', 'string', 'return', 'while', id, ';', '{', '}'",
			"expecting: 'if', 'return', 'while', id, ';', '{', '}'",
			"expecting: id, num, ';', '('",
			"expecting: '+', '-', '/', '*', '<', '<=', '>', '>=', '==', '!=', '=', ',', ';', '(', ')', '[', ']'",
			"expecting: 'else', 'if', 'return', 'while', id, ';', '{', '}'",
			"expecting: 'else', 'if', 'int', 'string', 'return', 'void', 'while', id, ';', '{', '}', EOF",
			"expecting: '='",
			"expecting: ';'",
			"expecting: id, num, '('",
			"expecting: '+', '-', '/', '*', '<', '<=', '>', '>=', '==', '!=', ',', ';', ')', ']'",
			"expecting: '+', '-', ';'",
			"expecting: id, num, '(', ')'",
			"expecting: '+', '-', '/', '*', '<', '<=', '>', '>=', '==', '!=', '=', ',', ';', ')', '[', ']'",
			"expecting: id, num, string value, '('",
			"expecting: '+', '-', '<', '<=', '>', '>=', '==', '!='",
			"expecting: '+', '-', ')'",
			"expecting: '+', '-', ',', ')'",
			"expecting: '+', '-', ']'",
			"expecting: 'if', 'return', 'while', id, ';', '{'",
			"expecting: 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 2, 0, 2, 0, 1, 0, 0, 3, 3, 3, 4, 0, 2, 5, 0, 5, 6, 0, 7, 8, 8, 9, 9, 10, 9, 11, 11, 9, 9, 12, 6, 8, 13, 14, 13, 15, 13, 13, 8, 16, 2, 12, 14, 14, 0, 11, 2, 0, 16, 10, 17, 17, 16, 14, 14, 8, 3, 18, 3, 19, 20, 21, 17, 17, 17, 17, 17, 17, 17, 22, 23, 16, 17, 24, 25, 20, 24, 25, 26, 25, 25, 25, 24, 27, 24, 28, 28, 29, 20, 21, 9, 30, 31, 24, 24, 20, 24, 24, 9, 32, 11, 9, 9, 33, 28, 23, 26, 34, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 34, 24, 25, 28, 20, 20, 3, 3, 17, 35, 20, 20, 35, 35, 20, 31, 31, 31, 31, 31, 31, 17, 32, 24, 24, 34, 9, 9, 17, 34, 34, 35, 35, 34, 35, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
