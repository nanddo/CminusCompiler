/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.parser;

import Cminus.lexer.*;
import Cminus.node.*;
import Cminus.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AVarDeclaration */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AFuncDeclaration */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AMain$Int1MainDeclaration */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AMain$String1MainDeclaration */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AMain$Void1MainDeclaration */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce AVariable$Int1VariableDeclaration */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AVariable$String1VariableDeclaration */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce ASingleVarDec */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce AArrayVarDec */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AArrayDeclaration */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce AVoid$Int1FunctionDeclaration */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list);
            }
            break;
            case 13: /* reduce AVoid$String1FunctionDeclaration */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list);
            }
            break;
            case 14: /* reduce AVoid$Void1FunctionDeclaration */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list);
            }
            break;
            case 15: /* reduce AArgs$Int1FunctionDeclaration */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list);
            }
            break;
            case 16: /* reduce AArgs$String1FunctionDeclaration */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce AArgs$Void1FunctionDeclaration */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list);
            }
            break;
            case 18: /* reduce AListParameters */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce ASingleParameters */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce AInt1SingleParameter */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce AString1SingleParameter */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce ASingleParDec */
            {
                ArrayList<Object> list = new22();
                push(goTo(9), list);
            }
            break;
            case 23: /* reduce AArrayParDec */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list);
            }
            break;
            case 24: /* reduce AArrayParameter */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list);
            }
            break;
            case 25: /* reduce AListStatementList */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list);
            }
            break;
            case 26: /* reduce AEmptyStatementList */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list);
            }
            break;
            case 27: /* reduce AAttributionStatement */
            {
                ArrayList<Object> list = new27();
                push(goTo(12), list);
            }
            break;
            case 28: /* reduce ACompoundStmStatement */
            {
                ArrayList<Object> list = new28();
                push(goTo(12), list);
            }
            break;
            case 29: /* reduce AReturnStatement */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list);
            }
            break;
            case 30: /* reduce AIfStmStatement */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list);
            }
            break;
            case 31: /* reduce AIfElseStmStatement */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list);
            }
            break;
            case 32: /* reduce AIterationStmStatement */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list);
            }
            break;
            case 33: /* reduce AAttributionStatementWithElse */
            {
                ArrayList<Object> list = new33();
                push(goTo(13), list);
            }
            break;
            case 34: /* reduce ACompoundStmStatementWithElse */
            {
                ArrayList<Object> list = new34();
                push(goTo(13), list);
            }
            break;
            case 35: /* reduce AReturnStatementWithElse */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list);
            }
            break;
            case 36: /* reduce AIfElseStmStatementWithElse */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list);
            }
            break;
            case 37: /* reduce AIterationStmStatementWithElse */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list);
            }
            break;
            case 38: /* reduce AIntAttributionStatement */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list);
            }
            break;
            case 39: /* reduce AStringAttributionStatement */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list);
            }
            break;
            case 40: /* reduce ACallAttributionStatement */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list);
            }
            break;
            case 41: /* reduce AEmptyAttributionStatement */
            {
                ArrayList<Object> list = new41();
                push(goTo(14), list);
            }
            break;
            case 42: /* reduce AAcompoundstatement1CompoundStatement */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list);
            }
            break;
            case 43: /* reduce AAcompoundstatement2CompoundStatement */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list);
            }
            break;
            case 44: /* reduce AIfStatement */
            {
                ArrayList<Object> list = new44();
                push(goTo(16), list);
            }
            break;
            case 45: /* reduce AIfElseStatement */
            {
                ArrayList<Object> list = new45();
                push(goTo(17), list);
            }
            break;
            case 46: /* reduce AIfElseStatement2 */
            {
                ArrayList<Object> list = new46();
                push(goTo(18), list);
            }
            break;
            case 47: /* reduce AIterationStatement */
            {
                ArrayList<Object> list = new47();
                push(goTo(19), list);
            }
            break;
            case 48: /* reduce AIterationStatementElse */
            {
                ArrayList<Object> list = new48();
                push(goTo(20), list);
            }
            break;
            case 49: /* reduce AEmptyReturnStatement */
            {
                ArrayList<Object> list = new49();
                push(goTo(21), list);
            }
            break;
            case 50: /* reduce AReturnReturnStatement */
            {
                ArrayList<Object> list = new50();
                push(goTo(21), list);
            }
            break;
            case 51: /* reduce ALessThanRelationalExpression */
            {
                ArrayList<Object> list = new51();
                push(goTo(22), list);
            }
            break;
            case 52: /* reduce ALessEqualRelationalExpression */
            {
                ArrayList<Object> list = new52();
                push(goTo(22), list);
            }
            break;
            case 53: /* reduce AGreatThanRelationalExpression */
            {
                ArrayList<Object> list = new53();
                push(goTo(22), list);
            }
            break;
            case 54: /* reduce AGreatEqualRelationalExpression */
            {
                ArrayList<Object> list = new54();
                push(goTo(22), list);
            }
            break;
            case 55: /* reduce AEqualRelationalExpression */
            {
                ArrayList<Object> list = new55();
                push(goTo(22), list);
            }
            break;
            case 56: /* reduce ADifferentRelationalExpression */
            {
                ArrayList<Object> list = new56();
                push(goTo(22), list);
            }
            break;
            case 57: /* reduce AInt1InputFunction */
            {
                ArrayList<Object> list = new57();
                push(goTo(23), list);
            }
            break;
            case 58: /* reduce AString1InputFunction */
            {
                ArrayList<Object> list = new58();
                push(goTo(23), list);
            }
            break;
            case 59: /* reduce AInt1OutputFunction */
            {
                ArrayList<Object> list = new59();
                push(goTo(24), list);
            }
            break;
            case 60: /* reduce AString1OutputFunction */
            {
                ArrayList<Object> list = new60();
                push(goTo(24), list);
            }
            break;
            case 61: /* reduce APlusExp */
            {
                ArrayList<Object> list = new61();
                push(goTo(25), list);
            }
            break;
            case 62: /* reduce AMinusExp */
            {
                ArrayList<Object> list = new62();
                push(goTo(25), list);
            }
            break;
            case 63: /* reduce ATermExp */
            {
                ArrayList<Object> list = new63();
                push(goTo(25), list);
            }
            break;
            case 64: /* reduce AMultTerm */
            {
                ArrayList<Object> list = new64();
                push(goTo(26), list);
            }
            break;
            case 65: /* reduce ADivTerm */
            {
                ArrayList<Object> list = new65();
                push(goTo(26), list);
            }
            break;
            case 66: /* reduce AFactorTerm */
            {
                ArrayList<Object> list = new66();
                push(goTo(26), list);
            }
            break;
            case 67: /* reduce AExpFactor */
            {
                ArrayList<Object> list = new67();
                push(goTo(27), list);
            }
            break;
            case 68: /* reduce AVarFactor */
            {
                ArrayList<Object> list = new68();
                push(goTo(27), list);
            }
            break;
            case 69: /* reduce ANumFactor */
            {
                ArrayList<Object> list = new69();
                push(goTo(27), list);
            }
            break;
            case 70: /* reduce AAvariable1Variable */
            {
                ArrayList<Object> list = new70();
                push(goTo(28), list);
            }
            break;
            case 71: /* reduce AAvariable2Variable */
            {
                ArrayList<Object> list = new71();
                push(goTo(28), list);
            }
            break;
            case 72: /* reduce AArrayExpression */
            {
                ArrayList<Object> list = new72();
                push(goTo(29), list);
            }
            break;
            case 73: /* reduce ACall */
            {
                ArrayList<Object> list = new73();
                push(goTo(30), list);
            }
            break;
            case 74: /* reduce AListArguments */
            {
                ArrayList<Object> list = new74();
                push(goTo(31), list);
            }
            break;
            case 75: /* reduce AEmptyArguments */
            {
                ArrayList<Object> list = new75();
                push(goTo(31), list);
            }
            break;
            case 76: /* reduce AListArgumentsList */
            {
                ArrayList<Object> list = new76();
                push(goTo(32), list);
            }
            break;
            case 77: /* reduce ASingleArgumentsList */
            {
                ArrayList<Object> list = new77();
                push(goTo(32), list);
            }
            break;
            case 78: /* reduce AEpsilon */
            {
                ArrayList<Object> list = new78();
                push(goTo(33), list);
            }
            break;
            case 79: /* reduce ATerminal$Declaration */
            {
                ArrayList<Object> list = new79();
                push(goTo(34), list);
            }
            break;
            case 80: /* reduce ANonTerminal$Declaration */
            {
                ArrayList<Object> list = new80();
                push(goTo(34), list);
            }
            break;
            case 81: /* reduce ATerminal$ArrayDeclaration */
            {
                ArrayList<Object> list = new81();
                push(goTo(35), list);
            }
            break;
            case 82: /* reduce ANonTerminal$ArrayDeclaration */
            {
                ArrayList<Object> list = new82();
                push(goTo(35), list);
            }
            break;
            case 83: /* reduce ATerminal$ArrayParameter */
            {
                ArrayList<Object> list = new83();
                push(goTo(36), list);
            }
            break;
            case 84: /* reduce ANonTerminal$ArrayParameter */
            {
                ArrayList<Object> list = new84();
                push(goTo(36), list);
            }
            break;
            case 85: /* reduce ATerminal$VariableDeclaration */
            {
                ArrayList<Object> list = new85();
                push(goTo(37), list);
            }
            break;
            case 86: /* reduce ANonTerminal$VariableDeclaration */
            {
                ArrayList<Object> list = new86();
                push(goTo(37), list);
            }
            break;
            case 87: /* reduce ATerminal$ArrayExpression */
            {
                ArrayList<Object> list = new87();
                push(goTo(38), list);
            }
            break;
            case 88: /* reduce ANonTerminal$ArrayExpression */
            {
                ArrayList<Object> list = new88();
                push(goTo(38), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PDeclaration pdeclarationNode2;
        pdeclarationNode2 = (PDeclaration)nodeArrayList1.get(0);
	if(pdeclarationNode2 != null)
	{
	  listNode3.add(pdeclarationNode2);
	}
        }

        pprogramNode1 = new AProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PDeclaration pdeclarationNode3;
        listNode2 = (LinkedList)nodeArrayList1.get(0);
        pdeclarationNode3 = (PDeclaration)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode4.addAll(listNode2);
	}
	if(pdeclarationNode3 != null)
	{
	  listNode4.add(pdeclarationNode3);
	}
        }

        pprogramNode1 = new AProgram(listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AVarDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        pdeclarationNode1 = (PDeclaration)nodeArrayList1.get(0);
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AFuncDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        pdeclarationNode1 = (PDeclaration)nodeArrayList1.get(0);
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AMain$Int1MainDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PType ptypeNode2;
        TMain tmainNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        TInt tintNode3;
        tintNode3 = (TInt)nodeArrayList1.get(0);

        ptypeNode2 = new AIntType(tintNode3);
        }
        tmainNode4 = (TMain)nodeArrayList2.get(0);
        {
            // Block
        PStatement pstatementNode5;
        pstatementNode5 = (PStatement)nodeArrayList6.get(0);
	if(pstatementNode5 != null)
	{
	  listNode6.add(pstatementNode5);
	}
        }

        pdeclarationNode1 = new AFunctionMainDeclaration(ptypeNode2, tmainNode4, listNode6);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AMain$String1MainDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PType ptypeNode2;
        TMain tmainNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        TString tstringNode3;
        tstringNode3 = (TString)nodeArrayList1.get(0);

        ptypeNode2 = new AStringType(tstringNode3);
        }
        tmainNode4 = (TMain)nodeArrayList2.get(0);
        {
            // Block
        PStatement pstatementNode5;
        pstatementNode5 = (PStatement)nodeArrayList6.get(0);
	if(pstatementNode5 != null)
	{
	  listNode6.add(pstatementNode5);
	}
        }

        pdeclarationNode1 = new AFunctionMainDeclaration(ptypeNode2, tmainNode4, listNode6);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AMain$Void1MainDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PType ptypeNode2;
        TMain tmainNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        TVoid tvoidNode3;
        tvoidNode3 = (TVoid)nodeArrayList1.get(0);

        ptypeNode2 = new AVoidType(tvoidNode3);
        }
        tmainNode4 = (TMain)nodeArrayList2.get(0);
        {
            // Block
        PStatement pstatementNode5;
        pstatementNode5 = (PStatement)nodeArrayList6.get(0);
	if(pstatementNode5 != null)
	{
	  listNode6.add(pstatementNode5);
	}
        }

        pdeclarationNode1 = new AFunctionMainDeclaration(ptypeNode2, tmainNode4, listNode6);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AVariable$Int1VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PType ptypeNode2;
        PName pnameNode4;
        {
            // Block
        TInt tintNode3;
        tintNode3 = (TInt)nodeArrayList1.get(0);

        ptypeNode2 = new AIntType(tintNode3);
        }
        pnameNode4 = (PName)nodeArrayList2.get(0);

        pdeclarationNode1 = new AVariableDeclaration(ptypeNode2, pnameNode4);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AVariable$String1VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PType ptypeNode2;
        PName pnameNode4;
        {
            // Block
        TString tstringNode3;
        tstringNode3 = (TString)nodeArrayList1.get(0);

        ptypeNode2 = new AStringType(tstringNode3);
        }
        pnameNode4 = (PName)nodeArrayList2.get(0);

        pdeclarationNode1 = new AVariableDeclaration(ptypeNode2, pnameNode4);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ASingleVarDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PName pnameNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pnameNode1 = new ASingleName(tidNode2);
        }
	nodeList.add(pnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AArrayVarDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PName pnameNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pnameNode1 = new AArrayName(tidNode2, listNode4);
        }
	nodeList.add(pnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AArrayDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArray parrayNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        parrayNode1 = new ADimArray(pexpNode2);
        }
	nodeList.add(parrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AVoid$Int1FunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        TInt tintNode3;
        tintNode3 = (TInt)nodeArrayList1.get(0);

        ptypeNode2 = new AIntType(tintNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        {
            // Block
        PStatement pstatementNode5;
        pstatementNode5 = (PStatement)nodeArrayList6.get(0);
	if(pstatementNode5 != null)
	{
	  listNode6.add(pstatementNode5);
	}
        }

        pdeclarationNode1 = new AFunctionDeclaration(ptypeNode2, tidNode4, listNode6);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AVoid$String1FunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        TString tstringNode3;
        tstringNode3 = (TString)nodeArrayList1.get(0);

        ptypeNode2 = new AStringType(tstringNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        {
            // Block
        PStatement pstatementNode5;
        pstatementNode5 = (PStatement)nodeArrayList6.get(0);
	if(pstatementNode5 != null)
	{
	  listNode6.add(pstatementNode5);
	}
        }

        pdeclarationNode1 = new AFunctionDeclaration(ptypeNode2, tidNode4, listNode6);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AVoid$Void1FunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        TVoid tvoidNode3;
        tvoidNode3 = (TVoid)nodeArrayList1.get(0);

        ptypeNode2 = new AVoidType(tvoidNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        {
            // Block
        PStatement pstatementNode5;
        pstatementNode5 = (PStatement)nodeArrayList6.get(0);
	if(pstatementNode5 != null)
	{
	  listNode6.add(pstatementNode5);
	}
        }

        pdeclarationNode1 = new AFunctionDeclaration(ptypeNode2, tidNode4, listNode6);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AArgs$Int1FunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        {
            // Block
        TInt tintNode3;
        tintNode3 = (TInt)nodeArrayList1.get(0);

        ptypeNode2 = new AIntType(tintNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        PStatement pstatementNode7;
        pstatementNode7 = (PStatement)nodeArrayList6.get(0);
	if(pstatementNode7 != null)
	{
	  listNode8.add(pstatementNode7);
	}
        }

        pdeclarationNode1 = new AFunctionArgDeclaration(ptypeNode2, tidNode4, listNode6, listNode8);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AArgs$String1FunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        {
            // Block
        TString tstringNode3;
        tstringNode3 = (TString)nodeArrayList1.get(0);

        ptypeNode2 = new AStringType(tstringNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        PStatement pstatementNode7;
        pstatementNode7 = (PStatement)nodeArrayList6.get(0);
	if(pstatementNode7 != null)
	{
	  listNode8.add(pstatementNode7);
	}
        }

        pdeclarationNode1 = new AFunctionArgDeclaration(ptypeNode2, tidNode4, listNode6, listNode8);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AArgs$Void1FunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        {
            // Block
        TVoid tvoidNode3;
        tvoidNode3 = (TVoid)nodeArrayList1.get(0);

        ptypeNode2 = new AVoidType(tvoidNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        PStatement pstatementNode7;
        pstatementNode7 = (PStatement)nodeArrayList6.get(0);
	if(pstatementNode7 != null)
	{
	  listNode8.add(pstatementNode7);
	}
        }

        pdeclarationNode1 = new AFunctionArgDeclaration(ptypeNode2, tidNode4, listNode6, listNode8);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AListParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArg pargNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargNode2 = (PArg)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargNode2 != null)
	{
	  listNode3.add(pargNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ASingleParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArg pargNode1;
        pargNode1 = (PArg)nodeArrayList1.get(0);
	if(pargNode1 != null)
	{
	  listNode2.add(pargNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AInt1SingleParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode4;
        {
            // Block
        TInt tintNode3;
        tintNode3 = (TInt)nodeArrayList1.get(0);

        ptypeNode2 = new AIntType(tintNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);

        pargNode1 = new AArg(ptypeNode2, tidNode4);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AString1SingleParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode4;
        {
            // Block
        TString tstringNode3;
        tstringNode3 = (TString)nodeArrayList1.get(0);

        ptypeNode2 = new AStringType(tstringNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);

        pargNode1 = new AArg(ptypeNode2, tidNode4);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASingleParDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList1.get(0);
	nodeList.add(tidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AArrayParDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList1.get(0);
	nodeList.add(tidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AArrayParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArray parrayNode1;
        {
            // Block

        parrayNode1 = new AEmptyArray();
        }
	nodeList.add(parrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AListStatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AEmptyStatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        {
            // Block

        pstatementNode1 = new AEmptyStatement();
        }
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAttributionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ACompoundStmStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AReturnStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AIfStmStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AIfElseStmStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AIterationStmStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAttributionStatementWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ACompoundStmStatementWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AReturnStatementWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AIfElseStmStatementWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AIterationStmStatementWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AIntAttributionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PName pnameNode2;
        PExp pexpNode3;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pstatementNode1 = new AAttributionStatement(pnameNode2, pexpNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AStringAttributionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PName pnameNode2;
        TStringValue tstringvalueNode3;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        tstringvalueNode3 = (TStringValue)nodeArrayList3.get(0);

        pstatementNode1 = new AAttributionStringStatement(pnameNode2, tstringvalueNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ACallAttributionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AEmptyAttributionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block

        pstatementNode1 = new AEmptyStatement();
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAcompoundstatement1CompoundStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementNode1 = new ABlockStatement(listNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAcompoundstatement2CompoundStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstatementNode1 = new ABlockStatement(listNode3, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PRelExp prelexpNode2;
        PStatement pstatementNode3;
        prelexpNode2 = (PRelExp)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(prelexpNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AIfElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PRelExp prelexpNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        prelexpNode2 = (PRelExp)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AIfelseStatement(prelexpNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AIfElseStatement2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PRelExp prelexpNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        prelexpNode2 = (PRelExp)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AIfelseStatement(prelexpNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AIterationStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PRelExp prelexpNode2;
        PStatement pstatementNode3;
        prelexpNode2 = (PRelExp)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(prelexpNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AIterationStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PRelExp prelexpNode2;
        PStatement pstatementNode3;
        prelexpNode2 = (PRelExp)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(prelexpNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AEmptyReturnStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block

        pstatementNode1 = new AEmptyStatement();
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AReturnReturnStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(pexpNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ALessThanRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelExp prelexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        prelexpNode1 = new ALessThanRelExp(pexpNode2, pexpNode3);
        }
	nodeList.add(prelexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ALessEqualRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelExp prelexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        prelexpNode1 = new ALessEqualRelExp(pexpNode2, pexpNode3);
        }
	nodeList.add(prelexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AGreatThanRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelExp prelexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        prelexpNode1 = new AGreatThanRelExp(pexpNode2, pexpNode3);
        }
	nodeList.add(prelexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AGreatEqualRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelExp prelexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        prelexpNode1 = new AGreatEqualRelExp(pexpNode2, pexpNode3);
        }
	nodeList.add(prelexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AEqualRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelExp prelexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        prelexpNode1 = new AEqualRelExp(pexpNode2, pexpNode3);
        }
	nodeList.add(prelexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ADifferentRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelExp prelexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        prelexpNode1 = new ADifferentRelExp(pexpNode2, pexpNode3);
        }
	nodeList.add(prelexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AInt1InputFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AString1InputFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AInt1OutputFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AString1OutputFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce APlusExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new APlusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AMinusExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ATermExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ADivTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AExpFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AVarFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        pexpNode1 = new ANameExp(pnameNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANumFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        pexpNode1 = new ANumExp(tnumNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AAvariable1Variable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PName pnameNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        pnameNode1 = new AArrayName(tidNode2, listNode3);
        }
	nodeList.add(pnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AAvariable2Variable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PName pnameNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pnameNode1 = new AArrayName(tidNode2, listNode4);
        }
	nodeList.add(pnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AArrayExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArray parrayNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        parrayNode1 = new ADimArray(pexpNode2);
        }
	nodeList.add(parrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ACall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementNode1 = new ACallStatement(tidNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AListArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AEmptyArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AListArgumentsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ASingleArgumentsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AEpsilon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ATerminal$Declaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaration pdeclarationNode1;
        pdeclarationNode1 = (PDeclaration)nodeArrayList1.get(0);
	if(pdeclarationNode1 != null)
	{
	  listNode2.add(pdeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ANonTerminal$Declaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaration pdeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclarationNode2 = (PDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclarationNode2 != null)
	{
	  listNode3.add(pdeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ATerminal$ArrayDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArray parrayNode1;
        parrayNode1 = (PArray)nodeArrayList1.get(0);
	if(parrayNode1 != null)
	{
	  listNode2.add(parrayNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ANonTerminal$ArrayDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArray parrayNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parrayNode2 = (PArray)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parrayNode2 != null)
	{
	  listNode3.add(parrayNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ATerminal$ArrayParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArray parrayNode1;
        parrayNode1 = (PArray)nodeArrayList1.get(0);
	if(parrayNode1 != null)
	{
	  listNode2.add(parrayNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ANonTerminal$ArrayParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArray parrayNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parrayNode2 = (PArray)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parrayNode2 != null)
	{
	  listNode3.add(parrayNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ATerminal$VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaration pdeclarationNode1;
        pdeclarationNode1 = (PDeclaration)nodeArrayList1.get(0);
	if(pdeclarationNode1 != null)
	{
	  listNode2.add(pdeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ANonTerminal$VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaration pdeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclarationNode2 = (PDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclarationNode2 != null)
	{
	  listNode3.add(pdeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ATerminal$ArrayExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArray parrayNode1;
        parrayNode1 = (PArray)nodeArrayList1.get(0);
	if(parrayNode1 != null)
	{
	  listNode2.add(parrayNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ANonTerminal$ArrayExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArray parrayNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parrayNode2 = (PArray)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parrayNode2 != null)
	{
	  listNode3.add(parrayNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, ERROR, 1}, {7, SHIFT, 10}, {10, SHIFT, 11}, },
			{{-1, ERROR, 2}, {7, SHIFT, 13}, {10, SHIFT, 14}, },
			{{-1, ERROR, 3}, {7, SHIFT, 16}, {10, SHIFT, 17}, },
			{{-1, ERROR, 4}, {32, ACCEPT, -1}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 9}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, ERROR, 10}, {26, SHIFT, 20}, },
			{{-1, REDUCE, 9}, {26, SHIFT, 21}, {28, SHIFT, 22}, },
			{{-1, ERROR, 12}, {25, SHIFT, 25}, },
			{{-1, ERROR, 13}, {26, SHIFT, 26}, },
			{{-1, REDUCE, 9}, {26, SHIFT, 27}, {28, SHIFT, 22}, },
			{{-1, ERROR, 15}, {25, SHIFT, 28}, },
			{{-1, ERROR, 16}, {26, SHIFT, 29}, },
			{{-1, ERROR, 17}, {26, SHIFT, 30}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 20}, {5, SHIFT, 31}, },
			{{-1, ERROR, 21}, {2, SHIFT, 32}, {3, SHIFT, 33}, {5, SHIFT, 34}, },
			{{-1, ERROR, 22}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 10}, {28, SHIFT, 22}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 26}, {5, SHIFT, 45}, },
			{{-1, ERROR, 27}, {2, SHIFT, 32}, {3, SHIFT, 33}, {5, SHIFT, 46}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 29}, {5, SHIFT, 48}, },
			{{-1, ERROR, 30}, {2, SHIFT, 32}, {3, SHIFT, 33}, {5, SHIFT, 49}, },
			{{-1, ERROR, 31}, {27, SHIFT, 51}, },
			{{-1, ERROR, 32}, {10, SHIFT, 52}, },
			{{-1, ERROR, 33}, {10, SHIFT, 52}, },
			{{-1, ERROR, 34}, {27, SHIFT, 55}, },
			{{-1, ERROR, 35}, {24, SHIFT, 56}, {27, SHIFT, 57}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 70}, {28, SHIFT, 58}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 39}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, ERROR, 40}, {13, SHIFT, 62}, {14, SHIFT, 63}, {29, SHIFT, 64}, },
			{{-1, REDUCE, 63}, {15, SHIFT, 65}, {16, SHIFT, 66}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 45}, {27, SHIFT, 67}, },
			{{-1, ERROR, 46}, {27, SHIFT, 68}, },
			{{-1, ERROR, 47}, {24, SHIFT, 56}, {27, SHIFT, 69}, },
			{{-1, ERROR, 48}, {27, SHIFT, 70}, },
			{{-1, ERROR, 49}, {27, SHIFT, 71}, },
			{{-1, ERROR, 50}, {24, SHIFT, 56}, {27, SHIFT, 72}, },
			{{-1, ERROR, 51}, {30, SHIFT, 73}, },
			{{-1, REDUCE, 22}, {28, SHIFT, 75}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 55}, {30, SHIFT, 73}, },
			{{-1, ERROR, 56}, {2, SHIFT, 32}, {3, SHIFT, 33}, },
			{{-1, ERROR, 57}, {30, SHIFT, 73}, },
			{{-1, ERROR, 58}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 71}, {28, SHIFT, 58}, },
			{{-1, ERROR, 61}, {13, SHIFT, 62}, {14, SHIFT, 63}, {27, SHIFT, 83}, },
			{{-1, ERROR, 62}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, ERROR, 63}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 65}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, ERROR, 66}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, ERROR, 67}, {30, SHIFT, 73}, },
			{{-1, ERROR, 68}, {30, SHIFT, 73}, },
			{{-1, ERROR, 69}, {30, SHIFT, 73}, },
			{{-1, ERROR, 70}, {30, SHIFT, 73}, },
			{{-1, ERROR, 71}, {30, SHIFT, 73}, },
			{{-1, ERROR, 72}, {30, SHIFT, 73}, },
			{{-1, REDUCE, 78}, {2, SHIFT, 94}, {3, SHIFT, 95}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 75}, {29, SHIFT, 100}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 23}, {28, SHIFT, 75}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 81}, {13, SHIFT, 62}, {14, SHIFT, 63}, {29, SHIFT, 102}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 61}, {15, SHIFT, 65}, {16, SHIFT, 66}, },
			{{-1, REDUCE, 62}, {15, SHIFT, 65}, {16, SHIFT, 66}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 94}, {10, SHIFT, 103}, },
			{{-1, ERROR, 95}, {10, SHIFT, 103}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 97}, {1, SHIFT, 104}, {4, SHIFT, 105}, {6, SHIFT, 106}, {10, SHIFT, 107}, {25, SHIFT, 108}, {30, SHIFT, 73}, {31, SHIFT, 109}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 78}, {2, SHIFT, 94}, {3, SHIFT, 95}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 9}, {28, SHIFT, 22}, },
			{{-1, ERROR, 104}, {26, SHIFT, 121}, },
			{{-1, ERROR, 105}, {10, SHIFT, 37}, {11, SHIFT, 38}, {25, SHIFT, 122}, {26, SHIFT, 39}, },
			{{-1, ERROR, 106}, {26, SHIFT, 124}, },
			{{-1, REDUCE, 70}, {26, SHIFT, 125}, {28, SHIFT, 58}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 117}, {23, SHIFT, 126}, },
			{{-1, ERROR, 118}, {25, SHIFT, 127}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 120}, {1, SHIFT, 104}, {4, SHIFT, 105}, {6, SHIFT, 106}, {10, SHIFT, 107}, {25, SHIFT, 108}, {30, SHIFT, 73}, {31, SHIFT, 128}, },
			{{-1, ERROR, 121}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 123}, {13, SHIFT, 62}, {14, SHIFT, 63}, {25, SHIFT, 131}, },
			{{-1, ERROR, 124}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, REDUCE, 78}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, ERROR, 126}, {10, SHIFT, 37}, {11, SHIFT, 38}, {12, SHIFT, 137}, {26, SHIFT, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 129}, {27, SHIFT, 139}, },
			{{-1, ERROR, 130}, {13, SHIFT, 62}, {14, SHIFT, 63}, {17, SHIFT, 140}, {18, SHIFT, 141}, {19, SHIFT, 142}, {20, SHIFT, 143}, {21, SHIFT, 144}, {22, SHIFT, 145}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 132}, {27, SHIFT, 146}, },
			{{-1, REDUCE, 77}, {13, SHIFT, 62}, {14, SHIFT, 63}, },
			{{-1, ERROR, 134}, {27, SHIFT, 147}, },
			{{-1, REDUCE, 74}, {24, SHIFT, 148}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 137}, {25, SHIFT, 149}, },
			{{-1, ERROR, 138}, {13, SHIFT, 62}, {14, SHIFT, 63}, {25, SHIFT, 150}, },
			{{-1, ERROR, 139}, {1, SHIFT, 151}, {4, SHIFT, 105}, {6, SHIFT, 152}, {10, SHIFT, 107}, {25, SHIFT, 108}, {30, SHIFT, 73}, },
			{{-1, ERROR, 140}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, ERROR, 141}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, ERROR, 142}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, ERROR, 143}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, ERROR, 144}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, ERROR, 145}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, ERROR, 146}, {1, SHIFT, 104}, {4, SHIFT, 105}, {6, SHIFT, 106}, {10, SHIFT, 107}, {25, SHIFT, 108}, {30, SHIFT, 73}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 148}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 151}, {26, SHIFT, 168}, },
			{{-1, ERROR, 152}, {26, SHIFT, 169}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 154}, {0, SHIFT, 170}, },
			{{-1, REDUCE, 27}, {0, REDUCE, 33}, },
			{{-1, REDUCE, 28}, {0, REDUCE, 34}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 29}, {0, REDUCE, 35}, },
			{{-1, REDUCE, 51}, {13, SHIFT, 62}, {14, SHIFT, 63}, },
			{{-1, REDUCE, 52}, {13, SHIFT, 62}, {14, SHIFT, 63}, },
			{{-1, REDUCE, 53}, {13, SHIFT, 62}, {14, SHIFT, 63}, },
			{{-1, REDUCE, 54}, {13, SHIFT, 62}, {14, SHIFT, 63}, },
			{{-1, REDUCE, 55}, {13, SHIFT, 62}, {14, SHIFT, 63}, },
			{{-1, REDUCE, 56}, {13, SHIFT, 62}, {14, SHIFT, 63}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 76}, {13, SHIFT, 62}, {14, SHIFT, 63}, },
			{{-1, ERROR, 168}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, ERROR, 169}, {10, SHIFT, 37}, {11, SHIFT, 38}, {26, SHIFT, 39}, },
			{{-1, ERROR, 170}, {1, SHIFT, 104}, {4, SHIFT, 105}, {6, SHIFT, 106}, {10, SHIFT, 107}, {25, SHIFT, 108}, {30, SHIFT, 73}, },
			{{-1, ERROR, 171}, {27, SHIFT, 174}, },
			{{-1, ERROR, 172}, {27, SHIFT, 175}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 174}, {1, SHIFT, 151}, {4, SHIFT, 105}, {6, SHIFT, 152}, {10, SHIFT, 107}, {25, SHIFT, 108}, {30, SHIFT, 73}, },
			{{-1, ERROR, 175}, {1, SHIFT, 151}, {4, SHIFT, 105}, {6, SHIFT, 152}, {10, SHIFT, 107}, {25, SHIFT, 108}, {30, SHIFT, 73}, },
			{{-1, ERROR, 176}, {0, SHIFT, 178}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 178}, {1, SHIFT, 151}, {4, SHIFT, 105}, {6, SHIFT, 152}, {10, SHIFT, 107}, {25, SHIFT, 108}, {30, SHIFT, 73}, },
			{{-1, REDUCE, 46}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, {9, 18}, },
			{{-1, 6}, {9, 19}, },
			{{-1, 7}, {73, 96}, {99, 119}, },
			{{-1, 12}, {2, 15}, {95, 15}, },
			{{-1, 23}, {24, 44}, },
			{{-1, 8}, },
			{{-1, 35}, {27, 47}, {30, 50}, },
			{{-1, 36}, {56, 79}, },
			{{-1, 53}, {33, 54}, },
			{{-1, 76}, {77, 101}, },
			{{-1, 97}, {99, 120}, },
			{{-1, 110}, {139, 153}, {146, 166}, {170, 173}, {174, 153}, {175, 166}, {178, 173}, },
			{{-1, 154}, {174, 176}, {175, 177}, {178, 179}, },
			{{-1, 111}, {139, 155}, {174, 155}, {175, 155}, {178, 155}, },
			{{-1, 112}, {51, 74}, {55, 78}, {57, 80}, {67, 88}, {68, 89}, {69, 90}, {70, 91}, {71, 92}, {72, 93}, {139, 156}, {174, 156}, {175, 156}, {178, 156}, },
			{{-1, 113}, },
			{{-1, 114}, },
			{{-1, 157}, },
			{{-1, 115}, },
			{{-1, 158}, },
			{{-1, 116}, {139, 159}, {174, 159}, {175, 159}, {178, 159}, },
			{{-1, 129}, {124, 132}, {168, 171}, {169, 172}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 130}, {22, 40}, {39, 61}, {58, 81}, {105, 123}, {125, 133}, {126, 138}, {140, 160}, {141, 161}, {142, 162}, {143, 163}, {144, 164}, {145, 165}, {148, 167}, },
			{{-1, 41}, {62, 84}, {63, 85}, },
			{{-1, 42}, {65, 86}, {66, 87}, },
			{{-1, 43}, {97, 117}, {120, 117}, {139, 117}, {146, 117}, {170, 117}, {174, 117}, {175, 117}, {178, 117}, },
			{{-1, 59}, {60, 82}, },
			{{-1, 118}, },
			{{-1, 134}, },
			{{-1, 135}, },
			{{-1, 98}, {125, 136}, },
			{{-1, 9}, },
			{{-1, 24}, },
			{{-1, 77}, },
			{{-1, 99}, },
			{{-1, 60}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'int', 'string', 'void'",
			"expecting: 'main', id",
			"expecting: EOF",
			"expecting: '('",
			"expecting: ';', '(', '['",
			"expecting: ';'",
			"expecting: 'void'",
			"expecting: id, num, '('",
			"expecting: ';', '['",
			"expecting: 'if', 'int', 'string', 'return', 'void', 'while', id, ';', '{', '}'",
			"expecting: ')'",
			"expecting: id",
			"expecting: ',', ')'",
			"expecting: '+', '-', '/', '*', '<', '<=', '>', '>=', '==', '!=', ',', ';', ')', '[', ']'",
			"expecting: '+', '-', '/', '*', '<', '<=', '>', '>=', '==', '!=', ',', ';', ')', ']'",
			"expecting: '+', '-', ']'",
			"expecting: '{'",
			"expecting: ',', ')', '['",
			"expecting: 'int', 'string'",
			"expecting: '+', '-', '/', '*', '<', '<=', '>', '>=', '==', '!=', '=', ',', ';', ')', '[', ']'",
			"expecting: '+', '-', ')'",
			"expecting: 'if', 'int', 'string', 'return', 'while', id, ';', '{', '}'",
			"expecting: ']'",
			"expecting: 'if', 'return', 'while', id, ';', '{', '}'",
			"expecting: id, num, ';', '('",
			"expecting: '=', '(', '['",
			"expecting: 'else', 'if', 'return', 'while', id, ';', '{', '}'",
			"expecting: 'else', 'if', 'int', 'string', 'return', 'void', 'while', id, ';', '{', '}', EOF",
			"expecting: '='",
			"expecting: '+', '-', ';'",
			"expecting: id, num, '(', ')'",
			"expecting: id, num, string value, '('",
			"expecting: '+', '-', '<', '<=', '>', '>=', '==', '!='",
			"expecting: '+', '-', ',', ')'",
			"expecting: 'if', 'return', 'while', id, ';', '{'",
			"expecting: 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 2, 0, 2, 0, 0, 0, 3, 4, 5, 3, 4, 5, 3, 3, 0, 2, 6, 0, 7, 8, 8, 9, 6, 0, 9, 6, 0, 10, 11, 11, 10, 12, 12, 13, 14, 7, 15, 14, 14, 14, 8, 10, 10, 12, 10, 10, 12, 16, 17, 12, 12, 16, 18, 16, 7, 19, 19, 20, 7, 7, 8, 7, 7, 16, 16, 16, 16, 16, 16, 21, 2, 22, 17, 17, 0, 12, 0, 15, 19, 14, 14, 14, 14, 14, 2, 0, 0, 2, 0, 0, 11, 11, 21, 23, 23, 21, 17, 17, 19, 8, 3, 24, 3, 25, 26, 27, 23, 23, 23, 23, 23, 23, 23, 28, 5, 21, 23, 7, 26, 29, 7, 30, 31, 26, 27, 10, 32, 26, 10, 33, 10, 12, 10, 5, 29, 34, 7, 7, 7, 7, 7, 7, 34, 5, 7, 26, 26, 3, 3, 23, 35, 26, 26, 35, 35, 26, 20, 20, 20, 20, 20, 20, 23, 33, 7, 7, 34, 10, 10, 23, 34, 34, 35, 35, 34, 35, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
