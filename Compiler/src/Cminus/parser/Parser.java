/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.parser;

import Cminus.lexer.*;
import Cminus.node.*;
import Cminus.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AADeclarationList */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce ABDeclarationList */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AADeclaration */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ABDeclaration */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AAvariabledeclaration1VariableDeclaration */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AAvariabledeclaration2VariableDeclaration */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AArrayDeclaration */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce AATypeSpecifier */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list, false);
            }
            break;
            case 9: /* reduce ABTypeSpecifier */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce ACTypeSpecifier */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce AFunctionDeclaration */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce AAParameters */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list, false);
            }
            break;
            case 13: /* reduce ABParameters */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce AAParametersList */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list, false);
            }
            break;
            case 15: /* reduce ABParametersList */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce AAsingleparameter1SingleParameter */
            {
                ArrayList<Object> list = new16();
                push(goTo(9), list, false);
            }
            break;
            case 17: /* reduce AAsingleparameter2SingleParameter */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list, false);
            }
            break;
            case 18: /* reduce AArrayParameter */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list, false);
            }
            break;
            case 19: /* reduce AAStatementList */
            {
                ArrayList<Object> list = new19();
                push(goTo(11), list, false);
            }
            break;
            case 20: /* reduce ABStatementList */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list, false);
            }
            break;
            case 21: /* reduce AAStatement */
            {
                ArrayList<Object> list = new21();
                push(goTo(12), list, false);
            }
            break;
            case 22: /* reduce ABStatement */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list, false);
            }
            break;
            case 23: /* reduce ACStatement */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list, false);
            }
            break;
            case 24: /* reduce ADStatement */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list, false);
            }
            break;
            case 25: /* reduce AEStatement */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list, false);
            }
            break;
            case 26: /* reduce AFStatement */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list, false);
            }
            break;
            case 27: /* reduce AAStatementWithElse */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
            case 28: /* reduce ABStatementWithElse */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list, false);
            }
            break;
            case 29: /* reduce ACStatementWithElse */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list, false);
            }
            break;
            case 30: /* reduce ADStatementWithElse */
            {
                ArrayList<Object> list = new30();
                push(goTo(13), list, false);
            }
            break;
            case 31: /* reduce AEStatementWithElse */
            {
                ArrayList<Object> list = new31();
                push(goTo(13), list, false);
            }
            break;
            case 32: /* reduce AAExpressionStatement */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list, false);
            }
            break;
            case 33: /* reduce ABExpressionStatement */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list, false);
            }
            break;
            case 34: /* reduce ACompoundStatement */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list, false);
            }
            break;
            case 35: /* reduce AALocalDeclarations */
            {
                ArrayList<Object> list = new35();
                push(goTo(16), list, false);
            }
            break;
            case 36: /* reduce ABLocalDeclarations */
            {
                ArrayList<Object> list = new36();
                push(goTo(16), list, false);
            }
            break;
            case 37: /* reduce AIfStatement */
            {
                ArrayList<Object> list = new37();
                push(goTo(17), list, false);
            }
            break;
            case 38: /* reduce AIfElseStatement */
            {
                ArrayList<Object> list = new38();
                push(goTo(18), list, false);
            }
            break;
            case 39: /* reduce AIfElseStatement2 */
            {
                ArrayList<Object> list = new39();
                push(goTo(19), list, false);
            }
            break;
            case 40: /* reduce AIterationStatement */
            {
                ArrayList<Object> list = new40();
                push(goTo(20), list, false);
            }
            break;
            case 41: /* reduce AIterationStatementElse */
            {
                ArrayList<Object> list = new41();
                push(goTo(21), list, false);
            }
            break;
            case 42: /* reduce AAReturnStatement */
            {
                ArrayList<Object> list = new42();
                push(goTo(22), list, false);
            }
            break;
            case 43: /* reduce ABReturnStatement */
            {
                ArrayList<Object> list = new43();
                push(goTo(22), list, false);
            }
            break;
            case 44: /* reduce AAInputFunctions */
            {
                ArrayList<Object> list = new44();
                push(goTo(23), list, false);
            }
            break;
            case 45: /* reduce ABInputFunctions */
            {
                ArrayList<Object> list = new45();
                push(goTo(23), list, false);
            }
            break;
            case 46: /* reduce AAOutputFunctions */
            {
                ArrayList<Object> list = new46();
                push(goTo(24), list, false);
            }
            break;
            case 47: /* reduce ABOutputFunctions */
            {
                ArrayList<Object> list = new47();
                push(goTo(24), list, false);
            }
            break;
            case 48: /* reduce AAavariable1Variable */
            {
                ArrayList<Object> list = new48();
                push(goTo(25), list, false);
            }
            break;
            case 49: /* reduce AAavariable2Variable */
            {
                ArrayList<Object> list = new49();
                push(goTo(25), list, false);
            }
            break;
            case 50: /* reduce AArrayExpression */
            {
                ArrayList<Object> list = new50();
                push(goTo(26), list, false);
            }
            break;
            case 51: /* reduce AAExpression */
            {
                ArrayList<Object> list = new51();
                push(goTo(27), list, false);
            }
            break;
            case 52: /* reduce ABExpression */
            {
                ArrayList<Object> list = new52();
                push(goTo(27), list, false);
            }
            break;
            case 53: /* reduce ACExpression */
            {
                ArrayList<Object> list = new53();
                push(goTo(27), list, false);
            }
            break;
            case 54: /* reduce AASimpleExpression */
            {
                ArrayList<Object> list = new54();
                push(goTo(28), list, false);
            }
            break;
            case 55: /* reduce ABSimpleExpression */
            {
                ArrayList<Object> list = new55();
                push(goTo(28), list, false);
            }
            break;
            case 56: /* reduce AARelationalOperator */
            {
                ArrayList<Object> list = new56();
                push(goTo(29), list, false);
            }
            break;
            case 57: /* reduce ABRelationalOperator */
            {
                ArrayList<Object> list = new57();
                push(goTo(29), list, false);
            }
            break;
            case 58: /* reduce ACRelationalOperator */
            {
                ArrayList<Object> list = new58();
                push(goTo(29), list, false);
            }
            break;
            case 59: /* reduce ADRelationalOperator */
            {
                ArrayList<Object> list = new59();
                push(goTo(29), list, false);
            }
            break;
            case 60: /* reduce AERelationalOperator */
            {
                ArrayList<Object> list = new60();
                push(goTo(29), list, false);
            }
            break;
            case 61: /* reduce AFRelationalOperator */
            {
                ArrayList<Object> list = new61();
                push(goTo(29), list, false);
            }
            break;
            case 62: /* reduce AAAdditiveExpression */
            {
                ArrayList<Object> list = new62();
                push(goTo(30), list, false);
            }
            break;
            case 63: /* reduce ABAdditiveExpression */
            {
                ArrayList<Object> list = new63();
                push(goTo(30), list, false);
            }
            break;
            case 64: /* reduce AAAdditionOperator */
            {
                ArrayList<Object> list = new64();
                push(goTo(31), list, false);
            }
            break;
            case 65: /* reduce ABAdditionOperator */
            {
                ArrayList<Object> list = new65();
                push(goTo(31), list, false);
            }
            break;
            case 66: /* reduce AATerm */
            {
                ArrayList<Object> list = new66();
                push(goTo(32), list, false);
            }
            break;
            case 67: /* reduce ABTerm */
            {
                ArrayList<Object> list = new67();
                push(goTo(32), list, false);
            }
            break;
            case 68: /* reduce AAMultiplicativeOperator */
            {
                ArrayList<Object> list = new68();
                push(goTo(33), list, false);
            }
            break;
            case 69: /* reduce ABMultiplicativeOperator */
            {
                ArrayList<Object> list = new69();
                push(goTo(33), list, false);
            }
            break;
            case 70: /* reduce AAFactor */
            {
                ArrayList<Object> list = new70();
                push(goTo(34), list, false);
            }
            break;
            case 71: /* reduce ABFactor */
            {
                ArrayList<Object> list = new71();
                push(goTo(34), list, false);
            }
            break;
            case 72: /* reduce ACFactor */
            {
                ArrayList<Object> list = new72();
                push(goTo(34), list, false);
            }
            break;
            case 73: /* reduce ADFactor */
            {
                ArrayList<Object> list = new73();
                push(goTo(34), list, false);
            }
            break;
            case 74: /* reduce ACall */
            {
                ArrayList<Object> list = new74();
                push(goTo(35), list, false);
            }
            break;
            case 75: /* reduce AAArgumentsList */
            {
                ArrayList<Object> list = new75();
                push(goTo(36), list, false);
            }
            break;
            case 76: /* reduce ABArgumentsList */
            {
                ArrayList<Object> list = new76();
                push(goTo(36), list, false);
            }
            break;
            case 77: /* reduce AAArguments */
            {
                ArrayList<Object> list = new77();
                push(goTo(37), list, false);
            }
            break;
            case 78: /* reduce ABArguments */
            {
                ArrayList<Object> list = new78();
                push(goTo(37), list, false);
            }
            break;
            case 79: /* reduce AEpsilon */
            {
                ArrayList<Object> list = new79();
                push(goTo(38), list, false);
            }
            break;
            case 80: /* reduce ATerminal$ArrayDeclaration */
            {
                ArrayList<Object> list = new80();
                push(goTo(39), list, true);
            }
            break;
            case 81: /* reduce ANonTerminal$ArrayDeclaration */
            {
                ArrayList<Object> list = new81();
                push(goTo(39), list, true);
            }
            break;
            case 82: /* reduce ATerminal$ArrayParameter */
            {
                ArrayList<Object> list = new82();
                push(goTo(40), list, true);
            }
            break;
            case 83: /* reduce ANonTerminal$ArrayParameter */
            {
                ArrayList<Object> list = new83();
                push(goTo(40), list, true);
            }
            break;
            case 84: /* reduce ATerminal$ArrayExpression */
            {
                ArrayList<Object> list = new84();
                push(goTo(41), list, true);
            }
            break;
            case 85: /* reduce ANonTerminal$ArrayExpression */
            {
                ArrayList<Object> list = new85();
                push(goTo(41), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PDeclarationList pdeclarationlistNode2;
        pdeclarationlistNode2 = (PDeclarationList)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pdeclarationlistNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AADeclarationList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationList pdeclarationlistNode1;
        {
            // Block
        PDeclarationList pdeclarationlistNode2;
        PDeclaration pdeclarationNode3;
        pdeclarationlistNode2 = (PDeclarationList)nodeArrayList1.get(0);
        pdeclarationNode3 = (PDeclaration)nodeArrayList2.get(0);

        pdeclarationlistNode1 = new AADeclarationList(pdeclarationlistNode2, pdeclarationNode3);
        }
	nodeList.add(pdeclarationlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ABDeclarationList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationList pdeclarationlistNode1;
        {
            // Block
        PDeclaration pdeclarationNode2;
        pdeclarationNode2 = (PDeclaration)nodeArrayList1.get(0);

        pdeclarationlistNode1 = new ABDeclarationList(pdeclarationNode2);
        }
	nodeList.add(pdeclarationlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AADeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PVariableDeclaration pvariabledeclarationNode2;
        pvariabledeclarationNode2 = (PVariableDeclaration)nodeArrayList1.get(0);

        pdeclarationNode1 = new AADeclaration(pvariabledeclarationNode2);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ABDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PFunctionDeclaration pfunctiondeclarationNode2;
        pfunctiondeclarationNode2 = (PFunctionDeclaration)nodeArrayList1.get(0);

        pdeclarationNode1 = new ABDeclaration(pfunctiondeclarationNode2);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAvariabledeclaration1VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        PTypeSpecifier ptypespecifierNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TSemicolon tsemicolonNode5;
        ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        tsemicolonNode5 = (TSemicolon)nodeArrayList3.get(0);

        pvariabledeclarationNode1 = new AVariableDeclaration(ptypespecifierNode2, tidNode3, listNode4, tsemicolonNode5);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAvariabledeclaration2VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        PTypeSpecifier ptypespecifierNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TSemicolon tsemicolonNode6;
        ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pvariabledeclarationNode1 = new AVariableDeclaration(ptypespecifierNode2, tidNode3, listNode5, tsemicolonNode6);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AArrayDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayDeclaration parraydeclarationNode1;
        {
            // Block
        TLeftBracket tleftbracketNode2;
        TNum tnumNode3;
        TRightBracket trightbracketNode4;
        tleftbracketNode2 = (TLeftBracket)nodeArrayList1.get(0);
        tnumNode3 = (TNum)nodeArrayList2.get(0);
        trightbracketNode4 = (TRightBracket)nodeArrayList3.get(0);

        parraydeclarationNode1 = new AArrayDeclaration(tleftbracketNode2, tnumNode3, trightbracketNode4);
        }
	nodeList.add(parraydeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AATypeSpecifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeSpecifier ptypespecifierNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypespecifierNode1 = new AATypeSpecifier(tintNode2);
        }
	nodeList.add(ptypespecifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ABTypeSpecifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeSpecifier ptypespecifierNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        ptypespecifierNode1 = new ABTypeSpecifier(tvoidNode2);
        }
	nodeList.add(ptypespecifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ACTypeSpecifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeSpecifier ptypespecifierNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypespecifierNode1 = new ACTypeSpecifier(tstringNode2);
        }
	nodeList.add(ptypespecifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AFunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDeclaration pfunctiondeclarationNode1;
        {
            // Block
        PTypeSpecifier ptypespecifierNode2;
        TId tidNode3;
        TLeftPar tleftparNode4;
        PParameters pparametersNode5;
        TRightPar trightparNode6;
        PCompoundStatement pcompoundstatementNode7;
        ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tleftparNode4 = (TLeftPar)nodeArrayList3.get(0);
        pparametersNode5 = (PParameters)nodeArrayList4.get(0);
        trightparNode6 = (TRightPar)nodeArrayList5.get(0);
        pcompoundstatementNode7 = (PCompoundStatement)nodeArrayList6.get(0);

        pfunctiondeclarationNode1 = new AFunctionDeclaration(ptypespecifierNode2, tidNode3, tleftparNode4, pparametersNode5, trightparNode6, pcompoundstatementNode7);
        }
	nodeList.add(pfunctiondeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        PParametersList pparameterslistNode2;
        pparameterslistNode2 = (PParametersList)nodeArrayList1.get(0);

        pparametersNode1 = new AAParameters(pparameterslistNode2);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ABParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        pparametersNode1 = new ABParameters(tvoidNode2);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAParametersList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametersList pparameterslistNode1;
        {
            // Block
        PParametersList pparameterslistNode2;
        TComma tcommaNode3;
        PSingleParameter psingleparameterNode4;
        pparameterslistNode2 = (PParametersList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        psingleparameterNode4 = (PSingleParameter)nodeArrayList3.get(0);

        pparameterslistNode1 = new AAParametersList(pparameterslistNode2, tcommaNode3, psingleparameterNode4);
        }
	nodeList.add(pparameterslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ABParametersList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametersList pparameterslistNode1;
        {
            // Block
        PSingleParameter psingleparameterNode2;
        psingleparameterNode2 = (PSingleParameter)nodeArrayList1.get(0);

        pparameterslistNode1 = new ABParametersList(psingleparameterNode2);
        }
	nodeList.add(pparameterslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAsingleparameter1SingleParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSingleParameter psingleparameterNode1;
        {
            // Block
        PTypeSpecifier ptypespecifierNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }

        psingleparameterNode1 = new ASingleParameter(ptypespecifierNode2, tidNode3, listNode4);
        }
	nodeList.add(psingleparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAsingleparameter2SingleParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSingleParameter psingleparameterNode1;
        {
            // Block
        PTypeSpecifier ptypespecifierNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        ptypespecifierNode2 = (PTypeSpecifier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        psingleparameterNode1 = new ASingleParameter(ptypespecifierNode2, tidNode3, listNode5);
        }
	nodeList.add(psingleparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AArrayParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayParameter parrayparameterNode1;
        {
            // Block
        TLeftBracket tleftbracketNode2;
        TRightBracket trightbracketNode3;
        tleftbracketNode2 = (TLeftBracket)nodeArrayList1.get(0);
        trightbracketNode3 = (TRightBracket)nodeArrayList2.get(0);

        parrayparameterNode1 = new AArrayParameter(tleftbracketNode2, trightbracketNode3);
        }
	nodeList.add(parrayparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAStatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementList pstatementlistNode1;
        {
            // Block
        PStatementList pstatementlistNode2;
        PStatement pstatementNode3;
        pstatementlistNode2 = (PStatementList)nodeArrayList1.get(0);
        pstatementNode3 = (PStatement)nodeArrayList2.get(0);

        pstatementlistNode1 = new AAStatementList(pstatementlistNode2, pstatementNode3);
        }
	nodeList.add(pstatementlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ABStatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementList pstatementlistNode1;
        {
            // Block
        PEpsilon pepsilonNode2;
        pepsilonNode2 = (PEpsilon)nodeArrayList1.get(0);

        pstatementlistNode1 = new ABStatementList(pepsilonNode2);
        }
	nodeList.add(pstatementlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpressionStatement pexpressionstatementNode2;
        pexpressionstatementNode2 = (PExpressionStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AAStatement(pexpressionstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ABStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCompoundStatement pcompoundstatementNode2;
        pcompoundstatementNode2 = (PCompoundStatement)nodeArrayList1.get(0);

        pstatementNode1 = new ABStatement(pcompoundstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ACStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PReturnStatement preturnstatementNode2;
        preturnstatementNode2 = (PReturnStatement)nodeArrayList1.get(0);

        pstatementNode1 = new ACStatement(preturnstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ADStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIfStatement pifstatementNode2;
        pifstatementNode2 = (PIfStatement)nodeArrayList1.get(0);

        pstatementNode1 = new ADStatement(pifstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AEStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIfElseStatement pifelsestatementNode2;
        pifelsestatementNode2 = (PIfElseStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AEStatement(pifelsestatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AFStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIterationStatement piterationstatementNode2;
        piterationstatementNode2 = (PIterationStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AFStatement(piterationstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAStatementWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementWithElse pstatementwithelseNode1;
        {
            // Block
        PExpressionStatement pexpressionstatementNode2;
        pexpressionstatementNode2 = (PExpressionStatement)nodeArrayList1.get(0);

        pstatementwithelseNode1 = new AAStatementWithElse(pexpressionstatementNode2);
        }
	nodeList.add(pstatementwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ABStatementWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementWithElse pstatementwithelseNode1;
        {
            // Block
        PCompoundStatement pcompoundstatementNode2;
        pcompoundstatementNode2 = (PCompoundStatement)nodeArrayList1.get(0);

        pstatementwithelseNode1 = new ABStatementWithElse(pcompoundstatementNode2);
        }
	nodeList.add(pstatementwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ACStatementWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementWithElse pstatementwithelseNode1;
        {
            // Block
        PReturnStatement preturnstatementNode2;
        preturnstatementNode2 = (PReturnStatement)nodeArrayList1.get(0);

        pstatementwithelseNode1 = new ACStatementWithElse(preturnstatementNode2);
        }
	nodeList.add(pstatementwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ADStatementWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementWithElse pstatementwithelseNode1;
        {
            // Block
        PIfElseStatement2 pifelsestatement2Node2;
        pifelsestatement2Node2 = (PIfElseStatement2)nodeArrayList1.get(0);

        pstatementwithelseNode1 = new ADStatementWithElse(pifelsestatement2Node2);
        }
	nodeList.add(pstatementwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AEStatementWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementWithElse pstatementwithelseNode1;
        {
            // Block
        PIterationStatementElse piterationstatementelseNode2;
        piterationstatementelseNode2 = (PIterationStatementElse)nodeArrayList1.get(0);

        pstatementwithelseNode1 = new AEStatementWithElse(piterationstatementelseNode2);
        }
	nodeList.add(pstatementwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAExpressionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionStatement pexpressionstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TSemicolon tsemicolonNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pexpressionstatementNode1 = new AAExpressionStatement(pexpressionNode2, tsemicolonNode3);
        }
	nodeList.add(pexpressionstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ABExpressionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionStatement pexpressionstatementNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pexpressionstatementNode1 = new ABExpressionStatement(tsemicolonNode2);
        }
	nodeList.add(pexpressionstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ACompoundStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompoundStatement pcompoundstatementNode1;
        {
            // Block
        TLeftBrace tleftbraceNode2;
        PLocalDeclarations plocaldeclarationsNode3;
        PStatementList pstatementlistNode4;
        TRightBrace trightbraceNode5;
        tleftbraceNode2 = (TLeftBrace)nodeArrayList1.get(0);
        plocaldeclarationsNode3 = (PLocalDeclarations)nodeArrayList2.get(0);
        pstatementlistNode4 = (PStatementList)nodeArrayList3.get(0);
        trightbraceNode5 = (TRightBrace)nodeArrayList4.get(0);

        pcompoundstatementNode1 = new ACompoundStatement(tleftbraceNode2, plocaldeclarationsNode3, pstatementlistNode4, trightbraceNode5);
        }
	nodeList.add(pcompoundstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AALocalDeclarations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDeclarations plocaldeclarationsNode1;
        {
            // Block
        PLocalDeclarations plocaldeclarationsNode2;
        PVariableDeclaration pvariabledeclarationNode3;
        plocaldeclarationsNode2 = (PLocalDeclarations)nodeArrayList1.get(0);
        pvariabledeclarationNode3 = (PVariableDeclaration)nodeArrayList2.get(0);

        plocaldeclarationsNode1 = new AALocalDeclarations(plocaldeclarationsNode2, pvariabledeclarationNode3);
        }
	nodeList.add(plocaldeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ABLocalDeclarations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDeclarations plocaldeclarationsNode1;
        {
            // Block
        PEpsilon pepsilonNode2;
        pepsilonNode2 = (PEpsilon)nodeArrayList1.get(0);

        plocaldeclarationsNode1 = new ABLocalDeclarations(pepsilonNode2);
        }
	nodeList.add(plocaldeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStatement pifstatementNode1;
        {
            // Block
        TIf tifNode2;
        TLeftPar tleftparNode3;
        PExpression pexpressionNode4;
        TRightPar trightparNode5;
        PStatement pstatementNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tleftparNode3 = (TLeftPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trightparNode5 = (TRightPar)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        pifstatementNode1 = new AIfStatement(tifNode2, tleftparNode3, pexpressionNode4, trightparNode5, pstatementNode6);
        }
	nodeList.add(pifstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AIfElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfElseStatement pifelsestatementNode1;
        {
            // Block
        TIf tifNode2;
        TLeftPar tleftparNode3;
        PExpression pexpressionNode4;
        TRightPar trightparNode5;
        PStatementWithElse pstatementwithelseNode6;
        TElse telseNode7;
        PStatement pstatementNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tleftparNode3 = (TLeftPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trightparNode5 = (TRightPar)nodeArrayList4.get(0);
        pstatementwithelseNode6 = (PStatementWithElse)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pstatementNode8 = (PStatement)nodeArrayList7.get(0);

        pifelsestatementNode1 = new AIfElseStatement(tifNode2, tleftparNode3, pexpressionNode4, trightparNode5, pstatementwithelseNode6, telseNode7, pstatementNode8);
        }
	nodeList.add(pifelsestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AIfElseStatement2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfElseStatement2 pifelsestatement2Node1;
        {
            // Block
        TIf tifNode2;
        TLeftPar tleftparNode3;
        PExpression pexpressionNode4;
        TRightPar trightparNode5;
        PStatementWithElse pstatementwithelseNode6;
        TElse telseNode7;
        PStatementWithElse pstatementwithelseNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tleftparNode3 = (TLeftPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trightparNode5 = (TRightPar)nodeArrayList4.get(0);
        pstatementwithelseNode6 = (PStatementWithElse)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pstatementwithelseNode8 = (PStatementWithElse)nodeArrayList7.get(0);

        pifelsestatement2Node1 = new AIfElseStatement2(tifNode2, tleftparNode3, pexpressionNode4, trightparNode5, pstatementwithelseNode6, telseNode7, pstatementwithelseNode8);
        }
	nodeList.add(pifelsestatement2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AIterationStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterationStatement piterationstatementNode1;
        {
            // Block
        TWhile twhileNode2;
        TLeftPar tleftparNode3;
        PExpression pexpressionNode4;
        TRightPar trightparNode5;
        PStatement pstatementNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tleftparNode3 = (TLeftPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trightparNode5 = (TRightPar)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        piterationstatementNode1 = new AIterationStatement(twhileNode2, tleftparNode3, pexpressionNode4, trightparNode5, pstatementNode6);
        }
	nodeList.add(piterationstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AIterationStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterationStatementElse piterationstatementelseNode1;
        {
            // Block
        TWhile twhileNode2;
        TLeftPar tleftparNode3;
        PExpression pexpressionNode4;
        TRightPar trightparNode5;
        PStatementWithElse pstatementwithelseNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tleftparNode3 = (TLeftPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trightparNode5 = (TRightPar)nodeArrayList4.get(0);
        pstatementwithelseNode6 = (PStatementWithElse)nodeArrayList5.get(0);

        piterationstatementelseNode1 = new AIterationStatementElse(twhileNode2, tleftparNode3, pexpressionNode4, trightparNode5, pstatementwithelseNode6);
        }
	nodeList.add(piterationstatementelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAReturnStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnStatement preturnstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        preturnstatementNode1 = new AAReturnStatement(treturnNode2, tsemicolonNode3);
        }
	nodeList.add(preturnstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ABReturnStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnStatement preturnstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpression pexpressionNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        preturnstatementNode1 = new ABReturnStatement(treturnNode2, pexpressionNode3, tsemicolonNode4);
        }
	nodeList.add(preturnstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAInputFunctions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInputFunctions pinputfunctionsNode1;
        {
            // Block
        TInt tintNode2;
        TInput tinputNode3;
        TLeftPar tleftparNode4;
        TVoid tvoidNode5;
        TRightPar trightparNode6;
        tintNode2 = (TInt)nodeArrayList1.get(0);
        tinputNode3 = (TInput)nodeArrayList2.get(0);
        tleftparNode4 = (TLeftPar)nodeArrayList3.get(0);
        tvoidNode5 = (TVoid)nodeArrayList4.get(0);
        trightparNode6 = (TRightPar)nodeArrayList5.get(0);

        pinputfunctionsNode1 = new AAInputFunctions(tintNode2, tinputNode3, tleftparNode4, tvoidNode5, trightparNode6);
        }
	nodeList.add(pinputfunctionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ABInputFunctions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInputFunctions pinputfunctionsNode1;
        {
            // Block
        TString tstringNode2;
        TInput tinputNode3;
        TLeftPar tleftparNode4;
        TVoid tvoidNode5;
        TRightPar trightparNode6;
        tstringNode2 = (TString)nodeArrayList1.get(0);
        tinputNode3 = (TInput)nodeArrayList2.get(0);
        tleftparNode4 = (TLeftPar)nodeArrayList3.get(0);
        tvoidNode5 = (TVoid)nodeArrayList4.get(0);
        trightparNode6 = (TRightPar)nodeArrayList5.get(0);

        pinputfunctionsNode1 = new ABInputFunctions(tstringNode2, tinputNode3, tleftparNode4, tvoidNode5, trightparNode6);
        }
	nodeList.add(pinputfunctionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAOutputFunctions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POutputFunctions poutputfunctionsNode1;
        {
            // Block
        TVoid tvoidNode2;
        TOutput toutputNode3;
        TLeftPar tleftparNode4;
        TInt tintNode5;
        TId tidNode6;
        TRightPar trightparNode7;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        toutputNode3 = (TOutput)nodeArrayList2.get(0);
        tleftparNode4 = (TLeftPar)nodeArrayList3.get(0);
        tintNode5 = (TInt)nodeArrayList4.get(0);
        tidNode6 = (TId)nodeArrayList5.get(0);
        trightparNode7 = (TRightPar)nodeArrayList6.get(0);

        poutputfunctionsNode1 = new AAOutputFunctions(tvoidNode2, toutputNode3, tleftparNode4, tintNode5, tidNode6, trightparNode7);
        }
	nodeList.add(poutputfunctionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ABOutputFunctions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POutputFunctions poutputfunctionsNode1;
        {
            // Block
        TVoid tvoidNode2;
        TOutput toutputNode3;
        TLeftPar tleftparNode4;
        TString tstringNode5;
        TId tidNode6;
        TRightPar trightparNode7;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        toutputNode3 = (TOutput)nodeArrayList2.get(0);
        tleftparNode4 = (TLeftPar)nodeArrayList3.get(0);
        tstringNode5 = (TString)nodeArrayList4.get(0);
        tidNode6 = (TId)nodeArrayList5.get(0);
        trightparNode7 = (TRightPar)nodeArrayList6.get(0);

        poutputfunctionsNode1 = new ABOutputFunctions(tvoidNode2, toutputNode3, tleftparNode4, tstringNode5, tidNode6, trightparNode7);
        }
	nodeList.add(poutputfunctionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAavariable1Variable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        pvariableNode1 = new AAVariable(tidNode2, listNode3);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAavariable2Variable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pvariableNode1 = new AAVariable(tidNode2, listNode4);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AArrayExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayExpression parrayexpressionNode1;
        {
            // Block
        TLeftBracket tleftbracketNode2;
        PExpression pexpressionNode3;
        TRightBracket trightbracketNode4;
        tleftbracketNode2 = (TLeftBracket)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trightbracketNode4 = (TRightBracket)nodeArrayList3.get(0);

        parrayexpressionNode1 = new AArrayExpression(tleftbracketNode2, pexpressionNode3, trightbracketNode4);
        }
	nodeList.add(parrayexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PVariable pvariableNode2;
        TAttribution tattributionNode3;
        PExpression pexpressionNode4;
        pvariableNode2 = (PVariable)nodeArrayList1.get(0);
        tattributionNode3 = (TAttribution)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAExpression(pvariableNode2, tattributionNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ABExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PVariable pvariableNode2;
        TAttribution tattributionNode3;
        PInputFunctions pinputfunctionsNode4;
        pvariableNode2 = (PVariable)nodeArrayList1.get(0);
        tattributionNode3 = (TAttribution)nodeArrayList2.get(0);
        pinputfunctionsNode4 = (PInputFunctions)nodeArrayList3.get(0);

        pexpressionNode1 = new ABExpression(pvariableNode2, tattributionNode3, pinputfunctionsNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ACExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PSimpleExpression psimpleexpressionNode2;
        psimpleexpressionNode2 = (PSimpleExpression)nodeArrayList1.get(0);

        pexpressionNode1 = new ACExpression(psimpleexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AASimpleExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleExpression psimpleexpressionNode1;
        {
            // Block
        PSimpleExpression psimpleexpressionNode2;
        PRelationalOperator prelationaloperatorNode3;
        PAdditiveExpression padditiveexpressionNode4;
        psimpleexpressionNode2 = (PSimpleExpression)nodeArrayList1.get(0);
        prelationaloperatorNode3 = (PRelationalOperator)nodeArrayList2.get(0);
        padditiveexpressionNode4 = (PAdditiveExpression)nodeArrayList3.get(0);

        psimpleexpressionNode1 = new AASimpleExpression(psimpleexpressionNode2, prelationaloperatorNode3, padditiveexpressionNode4);
        }
	nodeList.add(psimpleexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ABSimpleExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleExpression psimpleexpressionNode1;
        {
            // Block
        PAdditiveExpression padditiveexpressionNode2;
        padditiveexpressionNode2 = (PAdditiveExpression)nodeArrayList1.get(0);

        psimpleexpressionNode1 = new ABSimpleExpression(padditiveexpressionNode2);
        }
	nodeList.add(psimpleexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AARelationalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalOperator prelationaloperatorNode1;
        {
            // Block
        TLessThan tlessthanNode2;
        tlessthanNode2 = (TLessThan)nodeArrayList1.get(0);

        prelationaloperatorNode1 = new AARelationalOperator(tlessthanNode2);
        }
	nodeList.add(prelationaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ABRelationalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalOperator prelationaloperatorNode1;
        {
            // Block
        TLessEqual tlessequalNode2;
        tlessequalNode2 = (TLessEqual)nodeArrayList1.get(0);

        prelationaloperatorNode1 = new ABRelationalOperator(tlessequalNode2);
        }
	nodeList.add(prelationaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ACRelationalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalOperator prelationaloperatorNode1;
        {
            // Block
        TGreatThan tgreatthanNode2;
        tgreatthanNode2 = (TGreatThan)nodeArrayList1.get(0);

        prelationaloperatorNode1 = new ACRelationalOperator(tgreatthanNode2);
        }
	nodeList.add(prelationaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ADRelationalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalOperator prelationaloperatorNode1;
        {
            // Block
        TGreatEqual tgreatequalNode2;
        tgreatequalNode2 = (TGreatEqual)nodeArrayList1.get(0);

        prelationaloperatorNode1 = new ADRelationalOperator(tgreatequalNode2);
        }
	nodeList.add(prelationaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AERelationalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalOperator prelationaloperatorNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        prelationaloperatorNode1 = new AERelationalOperator(tequalNode2);
        }
	nodeList.add(prelationaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AFRelationalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalOperator prelationaloperatorNode1;
        {
            // Block
        TDifferent tdifferentNode2;
        tdifferentNode2 = (TDifferent)nodeArrayList1.get(0);

        prelationaloperatorNode1 = new AFRelationalOperator(tdifferentNode2);
        }
	nodeList.add(prelationaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAAdditiveExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveExpression padditiveexpressionNode1;
        {
            // Block
        PAdditiveExpression padditiveexpressionNode2;
        PAdditionOperator padditionoperatorNode3;
        PTerm ptermNode4;
        padditiveexpressionNode2 = (PAdditiveExpression)nodeArrayList1.get(0);
        padditionoperatorNode3 = (PAdditionOperator)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        padditiveexpressionNode1 = new AAAdditiveExpression(padditiveexpressionNode2, padditionoperatorNode3, ptermNode4);
        }
	nodeList.add(padditiveexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ABAdditiveExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveExpression padditiveexpressionNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        padditiveexpressionNode1 = new ABAdditiveExpression(ptermNode2);
        }
	nodeList.add(padditiveexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AAAdditionOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionOperator padditionoperatorNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        padditionoperatorNode1 = new AAAdditionOperator(tplusNode2);
        }
	nodeList.add(padditionoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ABAdditionOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionOperator padditionoperatorNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        padditionoperatorNode1 = new ABAdditionOperator(tminusNode2);
        }
	nodeList.add(padditionoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AATerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        PMultiplicativeOperator pmultiplicativeoperatorNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        pmultiplicativeoperatorNode3 = (PMultiplicativeOperator)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new AATerm(ptermNode2, pmultiplicativeoperatorNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ABTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new ABTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAMultiplicativeOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiplicativeOperator pmultiplicativeoperatorNode1;
        {
            // Block
        TAsterisk tasteriskNode2;
        tasteriskNode2 = (TAsterisk)nodeArrayList1.get(0);

        pmultiplicativeoperatorNode1 = new AAMultiplicativeOperator(tasteriskNode2);
        }
	nodeList.add(pmultiplicativeoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ABMultiplicativeOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiplicativeOperator pmultiplicativeoperatorNode1;
        {
            // Block
        TSlash tslashNode2;
        tslashNode2 = (TSlash)nodeArrayList1.get(0);

        pmultiplicativeoperatorNode1 = new ABMultiplicativeOperator(tslashNode2);
        }
	nodeList.add(pmultiplicativeoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AAFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TLeftPar tleftparNode2;
        PExpression pexpressionNode3;
        TRightPar trightparNode4;
        tleftparNode2 = (TLeftPar)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trightparNode4 = (TRightPar)nodeArrayList3.get(0);

        pfactorNode1 = new AAFactor(tleftparNode2, pexpressionNode3, trightparNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ABFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PVariable pvariableNode2;
        pvariableNode2 = (PVariable)nodeArrayList1.get(0);

        pfactorNode1 = new ABFactor(pvariableNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ACFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PCall pcallNode2;
        pcallNode2 = (PCall)nodeArrayList1.get(0);

        pfactorNode1 = new ACFactor(pcallNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ADFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        pfactorNode1 = new ADFactor(tnumNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ACall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCall pcallNode1;
        {
            // Block
        TId tidNode2;
        TLeftPar tleftparNode3;
        PArguments pargumentsNode4;
        TRightPar trightparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tleftparNode3 = (TLeftPar)nodeArrayList2.get(0);
        pargumentsNode4 = (PArguments)nodeArrayList3.get(0);
        trightparNode5 = (TRightPar)nodeArrayList4.get(0);

        pcallNode1 = new ACall(tidNode2, tleftparNode3, pargumentsNode4, trightparNode5);
        }
	nodeList.add(pcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AAArgumentsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentsList pargumentslistNode1;
        {
            // Block
        PArgumentsList pargumentslistNode2;
        TComma tcommaNode3;
        PExpression pexpressionNode4;
        pargumentslistNode2 = (PArgumentsList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pargumentslistNode1 = new AAArgumentsList(pargumentslistNode2, tcommaNode3, pexpressionNode4);
        }
	nodeList.add(pargumentslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ABArgumentsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentsList pargumentslistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pargumentslistNode1 = new ABArgumentsList(pexpressionNode2);
        }
	nodeList.add(pargumentslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AAArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArguments pargumentsNode1;
        {
            // Block
        PArgumentsList pargumentslistNode2;
        pargumentslistNode2 = (PArgumentsList)nodeArrayList1.get(0);

        pargumentsNode1 = new AAArguments(pargumentslistNode2);
        }
	nodeList.add(pargumentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ABArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArguments pargumentsNode1;
        {
            // Block
        PEpsilon pepsilonNode2;
        pepsilonNode2 = (PEpsilon)nodeArrayList1.get(0);

        pargumentsNode1 = new ABArguments(pepsilonNode2);
        }
	nodeList.add(pargumentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AEpsilon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PEpsilon pepsilonNode1;
        {
            // Block

        pepsilonNode1 = new AEpsilon();
        }
	nodeList.add(pepsilonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ATerminal$ArrayDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArrayDeclaration parraydeclarationNode1;
        parraydeclarationNode1 = (PArrayDeclaration)nodeArrayList1.get(0);
	if(parraydeclarationNode1 != null)
	{
	  listNode2.add(parraydeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ANonTerminal$ArrayDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArrayDeclaration parraydeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parraydeclarationNode2 = (PArrayDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parraydeclarationNode2 != null)
	{
	  listNode3.add(parraydeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ATerminal$ArrayParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArrayParameter parrayparameterNode1;
        parrayparameterNode1 = (PArrayParameter)nodeArrayList1.get(0);
	if(parrayparameterNode1 != null)
	{
	  listNode2.add(parrayparameterNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ANonTerminal$ArrayParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArrayParameter parrayparameterNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parrayparameterNode2 = (PArrayParameter)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parrayparameterNode2 != null)
	{
	  listNode3.add(parrayparameterNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ATerminal$ArrayExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArrayExpression parrayexpressionNode1;
        parrayexpressionNode1 = (PArrayExpression)nodeArrayList1.get(0);
	if(parrayexpressionNode1 != null)
	{
	  listNode2.add(parrayexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ANonTerminal$ArrayExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArrayExpression parrayexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parrayexpressionNode2 = (PArrayExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parrayexpressionNode2 != null)
	{
	  listNode3.add(parrayexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 4}, {33, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 8}, {9, SHIFT, 11}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 11}, {24, SHIFT, 12}, {25, SHIFT, 13}, {27, SHIFT, 14}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 13}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 17}, },
			{{-1, ERROR, 14}, {10, SHIFT, 22}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 16}, {24, SHIFT, 23}, {27, SHIFT, 14}, },
			{{-1, REDUCE, 9}, {26, REDUCE, 13}, },
			{{-1, ERROR, 18}, {9, SHIFT, 25}, },
			{{-1, ERROR, 19}, {26, SHIFT, 26}, },
			{{-1, REDUCE, 12}, {23, SHIFT, 27}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 22}, {28, SHIFT, 28}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 16}, {27, SHIFT, 29}, },
			{{-1, ERROR, 26}, {29, SHIFT, 32}, },
			{{-1, ERROR, 27}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 29}, {28, SHIFT, 35}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 17}, {27, SHIFT, 29}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 79}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 40}, {9, SHIFT, 43}, },
			{{-1, ERROR, 41}, {1, SHIFT, 44}, {4, SHIFT, 45}, {6, SHIFT, 46}, {9, SHIFT, 47}, {10, SHIFT, 48}, {24, SHIFT, 49}, {25, SHIFT, 50}, {29, SHIFT, 32}, {30, SHIFT, 51}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 43}, {24, SHIFT, 12}, {27, SHIFT, 14}, },
			{{-1, ERROR, 44}, {25, SHIFT, 66}, },
			{{-1, ERROR, 45}, {9, SHIFT, 47}, {10, SHIFT, 48}, {24, SHIFT, 67}, {25, SHIFT, 50}, },
			{{-1, ERROR, 46}, {25, SHIFT, 69}, },
			{{-1, REDUCE, 48}, {25, SHIFT, 70}, {27, SHIFT, 71}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 50}, {9, SHIFT, 47}, {10, SHIFT, 48}, {25, SHIFT, 50}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 71}, {22, SHIFT, 75}, },
			{{-1, ERROR, 60}, {24, SHIFT, 76}, },
			{{-1, REDUCE, 53}, {16, SHIFT, 77}, {17, SHIFT, 78}, {18, SHIFT, 79}, {19, SHIFT, 80}, {20, SHIFT, 81}, {21, SHIFT, 82}, },
			{{-1, REDUCE, 55}, {12, SHIFT, 84}, {13, SHIFT, 85}, },
			{{-1, REDUCE, 63}, {14, SHIFT, 87}, {15, SHIFT, 88}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 66}, {9, SHIFT, 47}, {10, SHIFT, 48}, {25, SHIFT, 50}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 68}, {24, SHIFT, 91}, },
			{{-1, ERROR, 69}, {9, SHIFT, 47}, {10, SHIFT, 48}, {25, SHIFT, 50}, },
			{{-1, REDUCE, 79}, {9, SHIFT, 47}, {10, SHIFT, 48}, {25, SHIFT, 50}, },
			{{-1, ERROR, 71}, {9, SHIFT, 47}, {10, SHIFT, 48}, {25, SHIFT, 50}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 49}, {27, SHIFT, 71}, },
			{{-1, ERROR, 74}, {26, SHIFT, 99}, },
			{{-1, ERROR, 75}, {2, SHIFT, 100}, {3, SHIFT, 101}, {9, SHIFT, 47}, {10, SHIFT, 48}, {25, SHIFT, 50}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 83}, {9, SHIFT, 47}, {10, SHIFT, 48}, {25, SHIFT, 50}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 86}, {9, SHIFT, 47}, {10, SHIFT, 48}, {25, SHIFT, 50}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 89}, {9, SHIFT, 47}, {10, SHIFT, 48}, {25, SHIFT, 50}, },
			{{-1, ERROR, 90}, {26, SHIFT, 108}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 92}, {26, SHIFT, 109}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 77}, {23, SHIFT, 110}, },
			{{-1, ERROR, 95}, {26, SHIFT, 111}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 97}, {28, SHIFT, 112}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 100}, {7, SHIFT, 113}, },
			{{-1, ERROR, 101}, {7, SHIFT, 114}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 54}, {12, SHIFT, 84}, {13, SHIFT, 85}, },
			{{-1, REDUCE, 62}, {14, SHIFT, 87}, {15, SHIFT, 88}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 108}, {1, SHIFT, 115}, {4, SHIFT, 45}, {6, SHIFT, 116}, {9, SHIFT, 47}, {10, SHIFT, 48}, {24, SHIFT, 49}, {25, SHIFT, 50}, {29, SHIFT, 32}, },
			{{-1, ERROR, 109}, {1, SHIFT, 44}, {4, SHIFT, 45}, {6, SHIFT, 46}, {9, SHIFT, 47}, {10, SHIFT, 48}, {24, SHIFT, 49}, {25, SHIFT, 50}, {29, SHIFT, 32}, },
			{{-1, ERROR, 110}, {9, SHIFT, 47}, {10, SHIFT, 48}, {25, SHIFT, 50}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 113}, {25, SHIFT, 126}, },
			{{-1, ERROR, 114}, {25, SHIFT, 127}, },
			{{-1, ERROR, 115}, {25, SHIFT, 128}, },
			{{-1, ERROR, 116}, {25, SHIFT, 129}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 118}, {0, SHIFT, 130}, },
			{{-1, REDUCE, 21}, {0, REDUCE, 27}, },
			{{-1, REDUCE, 22}, {0, REDUCE, 28}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 23}, {0, REDUCE, 29}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 126}, {5, SHIFT, 131}, },
			{{-1, ERROR, 127}, {5, SHIFT, 132}, },
			{{-1, ERROR, 128}, {9, SHIFT, 47}, {10, SHIFT, 48}, {25, SHIFT, 50}, },
			{{-1, ERROR, 129}, {9, SHIFT, 47}, {10, SHIFT, 48}, {25, SHIFT, 50}, },
			{{-1, ERROR, 130}, {1, SHIFT, 44}, {4, SHIFT, 45}, {6, SHIFT, 46}, {9, SHIFT, 47}, {10, SHIFT, 48}, {24, SHIFT, 49}, {25, SHIFT, 50}, {29, SHIFT, 32}, },
			{{-1, ERROR, 131}, {26, SHIFT, 136}, },
			{{-1, ERROR, 132}, {26, SHIFT, 137}, },
			{{-1, ERROR, 133}, {26, SHIFT, 138}, },
			{{-1, ERROR, 134}, {26, SHIFT, 139}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 138}, {1, SHIFT, 115}, {4, SHIFT, 45}, {6, SHIFT, 116}, {9, SHIFT, 47}, {10, SHIFT, 48}, {24, SHIFT, 49}, {25, SHIFT, 50}, {29, SHIFT, 32}, },
			{{-1, ERROR, 139}, {1, SHIFT, 115}, {4, SHIFT, 45}, {6, SHIFT, 116}, {9, SHIFT, 47}, {10, SHIFT, 48}, {24, SHIFT, 49}, {25, SHIFT, 50}, {29, SHIFT, 32}, },
			{{-1, ERROR, 140}, {0, SHIFT, 142}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 142}, {1, SHIFT, 115}, {4, SHIFT, 45}, {6, SHIFT, 116}, {9, SHIFT, 47}, {10, SHIFT, 48}, {24, SHIFT, 49}, {25, SHIFT, 50}, {29, SHIFT, 32}, },
			{{-1, REDUCE, 39}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, },
			{{-1, 6}, {5, 10}, },
			{{-1, 7}, {37, 39}, },
			{{-1, 15}, {16, 24}, },
			{{-1, 8}, {13, 18}, {27, 18}, {37, 40}, },
			{{-1, 9}, },
			{{-1, 19}, },
			{{-1, 20}, },
			{{-1, 21}, {27, 34}, },
			{{-1, 30}, {31, 36}, },
			{{-1, 41}, },
			{{-1, 117}, {41, 52}, {109, 124}, {130, 135}, {139, 124}, {142, 135}, },
			{{-1, 118}, {138, 140}, {139, 141}, {142, 143}, },
			{{-1, 119}, {41, 53}, {109, 53}, {130, 53}, },
			{{-1, 120}, {26, 33}, {41, 54}, {109, 54}, {130, 54}, },
			{{-1, 37}, },
			{{-1, 55}, },
			{{-1, 56}, },
			{{-1, 121}, },
			{{-1, 57}, },
			{{-1, 122}, },
			{{-1, 123}, {41, 58}, {109, 58}, {130, 58}, },
			{{-1, 102}, },
			{{-1, -1}, },
			{{-1, 59}, {83, 104}, {86, 104}, {89, 104}, },
			{{-1, 72}, {73, 98}, },
			{{-1, 60}, {45, 68}, {50, 74}, {66, 90}, {69, 92}, {70, 93}, {71, 97}, {75, 103}, {110, 125}, {128, 133}, {129, 134}, },
			{{-1, 61}, },
			{{-1, 83}, },
			{{-1, 62}, {83, 105}, },
			{{-1, 86}, },
			{{-1, 63}, {86, 106}, },
			{{-1, 89}, },
			{{-1, 64}, {89, 107}, },
			{{-1, 65}, },
			{{-1, 94}, },
			{{-1, 95}, },
			{{-1, 38}, {37, 42}, {70, 96}, },
			{{-1, 16}, },
			{{-1, 31}, },
			{{-1, 73}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'int', 'string', 'void'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'int', 'string', 'void', EOF",
			"expecting: ';', '(', '['",
			"expecting: 'if', 'int', 'string', 'return', 'void', 'while', id, num, ';', '(', '{', '}', EOF",
			"expecting: num",
			"expecting: ';', '['",
			"expecting: id, ')'",
			"expecting: ')'",
			"expecting: ',', ')'",
			"expecting: ']'",
			"expecting: ',', ')', '['",
			"expecting: '{'",
			"expecting: 'if', 'int', 'string', 'return', 'void', 'while', id, num, ';', '(', '{', '}'",
			"expecting: 'if', 'return', 'while', id, num, ';', '(', '{', '}'",
			"expecting: '('",
			"expecting: id, num, ';', '('",
			"expecting: '+', '-', '/', '*', '<', '<=', '>', '>=', '==', '!=', '=', ',', ';', '(', ')', '[', ']'",
			"expecting: '+', '-', '/', '*', '<', '<=', '>', '>=', '==', '!=', ',', ';', ')', ']'",
			"expecting: 'else', 'if', 'return', 'while', id, num, ';', '(', '{', '}'",
			"expecting: id, num, '('",
			"expecting: 'else', 'if', 'int', 'string', 'return', 'void', 'while', id, num, ';', '(', '{', '}', EOF",
			"expecting: '+', '-', '/', '*', '<', '<=', '>', '>=', '==', '!=', '=', ',', ';', ')', ']'",
			"expecting: ';'",
			"expecting: '<', '<=', '>', '>=', '==', '!=', ',', ';', ')', ']'",
			"expecting: '+', '-', '<', '<=', '>', '>=', '==', '!=', ',', ';', ')', ']'",
			"expecting: id, num, '(', ')'",
			"expecting: '+', '-', '/', '*', '<', '<=', '>', '>=', '==', '!=', '=', ',', ';', ')', '[', ']'",
			"expecting: 'int', 'string', id, num, '('",
			"expecting: 'input'",
			"expecting: ',', ';', ')', ']'",
			"expecting: 'if', 'return', 'while', id, num, ';', '(', '{'",
			"expecting: 'else'",
			"expecting: 'void'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 2, 3, 3, 3, 1, 3, 3, 4, 5, 0, 6, 7, 7, 8, 1, 9, 10, 10, 11, 5, 7, 12, 13, 0, 7, 11, 12, 12, 14, 3, 10, 12, 12, 14, 14, 14, 1, 15, 15, 7, 16, 17, 16, 18, 19, 20, 21, 22, 15, 15, 15, 15, 15, 15, 15, 23, 24, 25, 26, 19, 19, 19, 21, 20, 24, 21, 27, 21, 28, 28, 9, 29, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 9, 20, 9, 10, 10, 9, 9, 11, 28, 19, 30, 30, 31, 31, 19, 26, 19, 19, 32, 32, 21, 19, 28, 16, 16, 16, 16, 15, 33, 20, 20, 33, 33, 20, 15, 10, 34, 34, 21, 21, 32, 9, 9, 9, 9, 15, 31, 31, 32, 32, 33, 33, 32, 33, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
