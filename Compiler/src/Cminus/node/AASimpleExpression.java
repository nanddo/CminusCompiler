/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.node;

import Cminus.analysis.*;

@SuppressWarnings("nls")
public final class AASimpleExpression extends PSimpleExpression
{
    private PSimpleExpression _simpleExpression_;
    private PRelop _relop_;
    private PAdditiveExpression _additiveExpression_;

    public AASimpleExpression()
    {
        // Constructor
    }

    public AASimpleExpression(
        @SuppressWarnings("hiding") PSimpleExpression _simpleExpression_,
        @SuppressWarnings("hiding") PRelop _relop_,
        @SuppressWarnings("hiding") PAdditiveExpression _additiveExpression_)
    {
        // Constructor
        setSimpleExpression(_simpleExpression_);

        setRelop(_relop_);

        setAdditiveExpression(_additiveExpression_);

    }

    @Override
    public Object clone()
    {
        return new AASimpleExpression(
            cloneNode(this._simpleExpression_),
            cloneNode(this._relop_),
            cloneNode(this._additiveExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAASimpleExpression(this);
    }

    public PSimpleExpression getSimpleExpression()
    {
        return this._simpleExpression_;
    }

    public void setSimpleExpression(PSimpleExpression node)
    {
        if(this._simpleExpression_ != null)
        {
            this._simpleExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleExpression_ = node;
    }

    public PRelop getRelop()
    {
        return this._relop_;
    }

    public void setRelop(PRelop node)
    {
        if(this._relop_ != null)
        {
            this._relop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._relop_ = node;
    }

    public PAdditiveExpression getAdditiveExpression()
    {
        return this._additiveExpression_;
    }

    public void setAdditiveExpression(PAdditiveExpression node)
    {
        if(this._additiveExpression_ != null)
        {
            this._additiveExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._additiveExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._simpleExpression_)
            + toString(this._relop_)
            + toString(this._additiveExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._simpleExpression_ == child)
        {
            this._simpleExpression_ = null;
            return;
        }

        if(this._relop_ == child)
        {
            this._relop_ = null;
            return;
        }

        if(this._additiveExpression_ == child)
        {
            this._additiveExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._simpleExpression_ == oldChild)
        {
            setSimpleExpression((PSimpleExpression) newChild);
            return;
        }

        if(this._relop_ == oldChild)
        {
            setRelop((PRelop) newChild);
            return;
        }

        if(this._additiveExpression_ == oldChild)
        {
            setAdditiveExpression((PAdditiveExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
