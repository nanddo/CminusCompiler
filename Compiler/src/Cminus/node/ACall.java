/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.node;

import Cminus.analysis.*;

@SuppressWarnings("nls")
public final class ACall extends PCall
{
    private TId _id_;
    private TLeftPar _leftPar_;
    private PArguments _arguments_;
    private TRightPar _rightPar_;

    public ACall()
    {
        // Constructor
    }

    public ACall(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TLeftPar _leftPar_,
        @SuppressWarnings("hiding") PArguments _arguments_,
        @SuppressWarnings("hiding") TRightPar _rightPar_)
    {
        // Constructor
        setId(_id_);

        setLeftPar(_leftPar_);

        setArguments(_arguments_);

        setRightPar(_rightPar_);

    }

    @Override
    public Object clone()
    {
        return new ACall(
            cloneNode(this._id_),
            cloneNode(this._leftPar_),
            cloneNode(this._arguments_),
            cloneNode(this._rightPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACall(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLeftPar getLeftPar()
    {
        return this._leftPar_;
    }

    public void setLeftPar(TLeftPar node)
    {
        if(this._leftPar_ != null)
        {
            this._leftPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftPar_ = node;
    }

    public PArguments getArguments()
    {
        return this._arguments_;
    }

    public void setArguments(PArguments node)
    {
        if(this._arguments_ != null)
        {
            this._arguments_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arguments_ = node;
    }

    public TRightPar getRightPar()
    {
        return this._rightPar_;
    }

    public void setRightPar(TRightPar node)
    {
        if(this._rightPar_ != null)
        {
            this._rightPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._leftPar_)
            + toString(this._arguments_)
            + toString(this._rightPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._leftPar_ == child)
        {
            this._leftPar_ = null;
            return;
        }

        if(this._arguments_ == child)
        {
            this._arguments_ = null;
            return;
        }

        if(this._rightPar_ == child)
        {
            this._rightPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._leftPar_ == oldChild)
        {
            setLeftPar((TLeftPar) newChild);
            return;
        }

        if(this._arguments_ == oldChild)
        {
            setArguments((PArguments) newChild);
            return;
        }

        if(this._rightPar_ == oldChild)
        {
            setRightPar((TRightPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
