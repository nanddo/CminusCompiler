/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.node;

import java.util.*;
import Cminus.analysis.*;

@SuppressWarnings("nls")
public final class AVariableDeclaration extends PVariableDeclaration
{
    private PTypeSpecifier _typeSpecifier_;
    private TId _id_;
    private final LinkedList<PArrayDeclaration> _arrayDeclaration_ = new LinkedList<PArrayDeclaration>();
    private TSemicolon _semicolon_;

    public AVariableDeclaration()
    {
        // Constructor
    }

    public AVariableDeclaration(
        @SuppressWarnings("hiding") PTypeSpecifier _typeSpecifier_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") List<?> _arrayDeclaration_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setTypeSpecifier(_typeSpecifier_);

        setId(_id_);

        setArrayDeclaration(_arrayDeclaration_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AVariableDeclaration(
            cloneNode(this._typeSpecifier_),
            cloneNode(this._id_),
            cloneList(this._arrayDeclaration_),
            cloneNode(this._semicolon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVariableDeclaration(this);
    }

    public PTypeSpecifier getTypeSpecifier()
    {
        return this._typeSpecifier_;
    }

    public void setTypeSpecifier(PTypeSpecifier node)
    {
        if(this._typeSpecifier_ != null)
        {
            this._typeSpecifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeSpecifier_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public LinkedList<PArrayDeclaration> getArrayDeclaration()
    {
        return this._arrayDeclaration_;
    }

    public void setArrayDeclaration(List<?> list)
    {
        for(PArrayDeclaration e : this._arrayDeclaration_)
        {
            e.parent(null);
        }
        this._arrayDeclaration_.clear();

        for(Object obj_e : list)
        {
            PArrayDeclaration e = (PArrayDeclaration) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._arrayDeclaration_.add(e);
        }
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._typeSpecifier_)
            + toString(this._id_)
            + toString(this._arrayDeclaration_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._typeSpecifier_ == child)
        {
            this._typeSpecifier_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._arrayDeclaration_.remove(child))
        {
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._typeSpecifier_ == oldChild)
        {
            setTypeSpecifier((PTypeSpecifier) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        for(ListIterator<PArrayDeclaration> i = this._arrayDeclaration_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PArrayDeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
