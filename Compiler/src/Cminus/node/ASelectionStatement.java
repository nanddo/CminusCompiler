/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.node;

import Cminus.analysis.*;

@SuppressWarnings("nls")
public final class ASelectionStatement extends PSelectionStatement
{
    private TIf _if_;
    private TLeftPar _leftPar_;
    private PExpression _expression_;
    private TRightPar _rightPar_;
    private PStatement _statement_;

    public ASelectionStatement()
    {
        // Constructor
    }

    public ASelectionStatement(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") TLeftPar _leftPar_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TRightPar _rightPar_,
        @SuppressWarnings("hiding") PStatement _statement_)
    {
        // Constructor
        setIf(_if_);

        setLeftPar(_leftPar_);

        setExpression(_expression_);

        setRightPar(_rightPar_);

        setStatement(_statement_);

    }

    @Override
    public Object clone()
    {
        return new ASelectionStatement(
            cloneNode(this._if_),
            cloneNode(this._leftPar_),
            cloneNode(this._expression_),
            cloneNode(this._rightPar_),
            cloneNode(this._statement_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASelectionStatement(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public TLeftPar getLeftPar()
    {
        return this._leftPar_;
    }

    public void setLeftPar(TLeftPar node)
    {
        if(this._leftPar_ != null)
        {
            this._leftPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftPar_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TRightPar getRightPar()
    {
        return this._rightPar_;
    }

    public void setRightPar(TRightPar node)
    {
        if(this._rightPar_ != null)
        {
            this._rightPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightPar_ = node;
    }

    public PStatement getStatement()
    {
        return this._statement_;
    }

    public void setStatement(PStatement node)
    {
        if(this._statement_ != null)
        {
            this._statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._leftPar_)
            + toString(this._expression_)
            + toString(this._rightPar_)
            + toString(this._statement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._leftPar_ == child)
        {
            this._leftPar_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._rightPar_ == child)
        {
            this._rightPar_ = null;
            return;
        }

        if(this._statement_ == child)
        {
            this._statement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._leftPar_ == oldChild)
        {
            setLeftPar((TLeftPar) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._rightPar_ == oldChild)
        {
            setRightPar((TRightPar) newChild);
            return;
        }

        if(this._statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
