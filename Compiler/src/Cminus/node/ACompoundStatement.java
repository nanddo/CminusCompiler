/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.node;

import Cminus.analysis.*;

@SuppressWarnings("nls")
public final class ACompoundStatement extends PCompoundStatement
{
    private TLeftBrace _leftBrace_;
    private PLocalDeclarations _localDeclarations_;
    private PStatementList _statementList_;
    private TRightBrace _rightBrace_;

    public ACompoundStatement()
    {
        // Constructor
    }

    public ACompoundStatement(
        @SuppressWarnings("hiding") TLeftBrace _leftBrace_,
        @SuppressWarnings("hiding") PLocalDeclarations _localDeclarations_,
        @SuppressWarnings("hiding") PStatementList _statementList_,
        @SuppressWarnings("hiding") TRightBrace _rightBrace_)
    {
        // Constructor
        setLeftBrace(_leftBrace_);

        setLocalDeclarations(_localDeclarations_);

        setStatementList(_statementList_);

        setRightBrace(_rightBrace_);

    }

    @Override
    public Object clone()
    {
        return new ACompoundStatement(
            cloneNode(this._leftBrace_),
            cloneNode(this._localDeclarations_),
            cloneNode(this._statementList_),
            cloneNode(this._rightBrace_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompoundStatement(this);
    }

    public TLeftBrace getLeftBrace()
    {
        return this._leftBrace_;
    }

    public void setLeftBrace(TLeftBrace node)
    {
        if(this._leftBrace_ != null)
        {
            this._leftBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftBrace_ = node;
    }

    public PLocalDeclarations getLocalDeclarations()
    {
        return this._localDeclarations_;
    }

    public void setLocalDeclarations(PLocalDeclarations node)
    {
        if(this._localDeclarations_ != null)
        {
            this._localDeclarations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._localDeclarations_ = node;
    }

    public PStatementList getStatementList()
    {
        return this._statementList_;
    }

    public void setStatementList(PStatementList node)
    {
        if(this._statementList_ != null)
        {
            this._statementList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementList_ = node;
    }

    public TRightBrace getRightBrace()
    {
        return this._rightBrace_;
    }

    public void setRightBrace(TRightBrace node)
    {
        if(this._rightBrace_ != null)
        {
            this._rightBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightBrace_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._leftBrace_)
            + toString(this._localDeclarations_)
            + toString(this._statementList_)
            + toString(this._rightBrace_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._leftBrace_ == child)
        {
            this._leftBrace_ = null;
            return;
        }

        if(this._localDeclarations_ == child)
        {
            this._localDeclarations_ = null;
            return;
        }

        if(this._statementList_ == child)
        {
            this._statementList_ = null;
            return;
        }

        if(this._rightBrace_ == child)
        {
            this._rightBrace_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._leftBrace_ == oldChild)
        {
            setLeftBrace((TLeftBrace) newChild);
            return;
        }

        if(this._localDeclarations_ == oldChild)
        {
            setLocalDeclarations((PLocalDeclarations) newChild);
            return;
        }

        if(this._statementList_ == oldChild)
        {
            setStatementList((PStatementList) newChild);
            return;
        }

        if(this._rightBrace_ == oldChild)
        {
            setRightBrace((TRightBrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
