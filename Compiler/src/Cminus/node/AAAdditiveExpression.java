/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.node;

import Cminus.analysis.*;

@SuppressWarnings("nls")
public final class AAAdditiveExpression extends PAdditiveExpression
{
    private PAdditiveExpression _additiveExpression_;
    private PAdditionOperator _additionOperator_;
    private PTerm _term_;

    public AAAdditiveExpression()
    {
        // Constructor
    }

    public AAAdditiveExpression(
        @SuppressWarnings("hiding") PAdditiveExpression _additiveExpression_,
        @SuppressWarnings("hiding") PAdditionOperator _additionOperator_,
        @SuppressWarnings("hiding") PTerm _term_)
    {
        // Constructor
        setAdditiveExpression(_additiveExpression_);

        setAdditionOperator(_additionOperator_);

        setTerm(_term_);

    }

    @Override
    public Object clone()
    {
        return new AAAdditiveExpression(
            cloneNode(this._additiveExpression_),
            cloneNode(this._additionOperator_),
            cloneNode(this._term_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAAdditiveExpression(this);
    }

    public PAdditiveExpression getAdditiveExpression()
    {
        return this._additiveExpression_;
    }

    public void setAdditiveExpression(PAdditiveExpression node)
    {
        if(this._additiveExpression_ != null)
        {
            this._additiveExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._additiveExpression_ = node;
    }

    public PAdditionOperator getAdditionOperator()
    {
        return this._additionOperator_;
    }

    public void setAdditionOperator(PAdditionOperator node)
    {
        if(this._additionOperator_ != null)
        {
            this._additionOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._additionOperator_ = node;
    }

    public PTerm getTerm()
    {
        return this._term_;
    }

    public void setTerm(PTerm node)
    {
        if(this._term_ != null)
        {
            this._term_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._term_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._additiveExpression_)
            + toString(this._additionOperator_)
            + toString(this._term_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._additiveExpression_ == child)
        {
            this._additiveExpression_ = null;
            return;
        }

        if(this._additionOperator_ == child)
        {
            this._additionOperator_ = null;
            return;
        }

        if(this._term_ == child)
        {
            this._term_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._additiveExpression_ == oldChild)
        {
            setAdditiveExpression((PAdditiveExpression) newChild);
            return;
        }

        if(this._additionOperator_ == oldChild)
        {
            setAdditionOperator((PAdditionOperator) newChild);
            return;
        }

        if(this._term_ == oldChild)
        {
            setTerm((PTerm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
