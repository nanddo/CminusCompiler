/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.node;

import Cminus.analysis.*;

@SuppressWarnings("nls")
public final class AAParametersList extends PParametersList
{
    private PParametersList _parametersList_;
    private TComma _comma_;
    private PSingleParameter _singleParameter_;

    public AAParametersList()
    {
        // Constructor
    }

    public AAParametersList(
        @SuppressWarnings("hiding") PParametersList _parametersList_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PSingleParameter _singleParameter_)
    {
        // Constructor
        setParametersList(_parametersList_);

        setComma(_comma_);

        setSingleParameter(_singleParameter_);

    }

    @Override
    public Object clone()
    {
        return new AAParametersList(
            cloneNode(this._parametersList_),
            cloneNode(this._comma_),
            cloneNode(this._singleParameter_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAParametersList(this);
    }

    public PParametersList getParametersList()
    {
        return this._parametersList_;
    }

    public void setParametersList(PParametersList node)
    {
        if(this._parametersList_ != null)
        {
            this._parametersList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parametersList_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PSingleParameter getSingleParameter()
    {
        return this._singleParameter_;
    }

    public void setSingleParameter(PSingleParameter node)
    {
        if(this._singleParameter_ != null)
        {
            this._singleParameter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._singleParameter_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._parametersList_)
            + toString(this._comma_)
            + toString(this._singleParameter_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._parametersList_ == child)
        {
            this._parametersList_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._singleParameter_ == child)
        {
            this._singleParameter_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._parametersList_ == oldChild)
        {
            setParametersList((PParametersList) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._singleParameter_ == oldChild)
        {
            setSingleParameter((PSingleParameter) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
