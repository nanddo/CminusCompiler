/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.analysis;

import Cminus.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAVarDeclaration(AVarDeclaration node);
    void caseAFuncDeclaration(AFuncDeclaration node);
    void caseAMainMainDeclaration(AMainMainDeclaration node);
    void caseAVariableVariableDeclaration(AVariableVariableDeclaration node);
    void caseAArrayDeclaration(AArrayDeclaration node);
    void caseAIntTypeSpecifier(AIntTypeSpecifier node);
    void caseAStringTypeSpecifier(AStringTypeSpecifier node);
    void caseATypeImplicitTypeSpecifier(ATypeImplicitTypeSpecifier node);
    void caseAVoidImplicitTypeSpecifier(AVoidImplicitTypeSpecifier node);
    void caseAFunctionDeclaration(AFunctionDeclaration node);
    void caseAListParameters(AListParameters node);
    void caseAVoidParameters(AVoidParameters node);
    void caseAListParametersList(AListParametersList node);
    void caseASingleParametersList(ASingleParametersList node);
    void caseASingleParameter(ASingleParameter node);
    void caseAArrayParameter(AArrayParameter node);
    void caseAAStatementList(AAStatementList node);
    void caseABStatementList(ABStatementList node);
    void caseAAStatement(AAStatement node);
    void caseABStatement(ABStatement node);
    void caseACStatement(ACStatement node);
    void caseADStatement(ADStatement node);
    void caseAEStatement(AEStatement node);
    void caseAFStatement(AFStatement node);
    void caseAAStatementWithElse(AAStatementWithElse node);
    void caseABStatementWithElse(ABStatementWithElse node);
    void caseACStatementWithElse(ACStatementWithElse node);
    void caseADStatementWithElse(ADStatementWithElse node);
    void caseAEStatementWithElse(AEStatementWithElse node);
    void caseAAAttributionStatement(AAAttributionStatement node);
    void caseABAttributionStatement(ABAttributionStatement node);
    void caseACAttributionStatement(ACAttributionStatement node);
    void caseADAttributionStatement(ADAttributionStatement node);
    void caseACompoundStatement(ACompoundStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseAIfElseStatement(AIfElseStatement node);
    void caseAIfElseStatement2(AIfElseStatement2 node);
    void caseAIterationStatement(AIterationStatement node);
    void caseAIterationStatementElse(AIterationStatementElse node);
    void caseAAReturnStatement(AAReturnStatement node);
    void caseABReturnStatement(ABReturnStatement node);
    void caseAVariable(AVariable node);
    void caseAArrayExpression(AArrayExpression node);
    void caseALessThanRelationalExpression(ALessThanRelationalExpression node);
    void caseALessEqualRelationalExpression(ALessEqualRelationalExpression node);
    void caseAGreatThanRelationalExpression(AGreatThanRelationalExpression node);
    void caseAGreatEqualRelationalExpression(AGreatEqualRelationalExpression node);
    void caseAEqualRelationalExpression(AEqualRelationalExpression node);
    void caseADifferentRelationalExpression(ADifferentRelationalExpression node);
    void caseAInputFunction(AInputFunction node);
    void caseAOutputFunction(AOutputFunction node);
    void caseAPlusExp(APlusExp node);
    void caseAMinusExp(AMinusExp node);
    void caseATermExp(ATermExp node);
    void caseAMultTerm(AMultTerm node);
    void caseADivTerm(ADivTerm node);
    void caseAFactorTerm(AFactorTerm node);
    void caseAExpFactor(AExpFactor node);
    void caseAVarFactor(AVarFactor node);
    void caseACallFactor(ACallFactor node);
    void caseANumFactor(ANumFactor node);
    void caseACall(ACall node);
    void caseAAArgumentsList(AAArgumentsList node);
    void caseABArgumentsList(ABArgumentsList node);
    void caseAAArguments(AAArguments node);
    void caseABArguments(ABArguments node);
    void caseAEpsilon(AEpsilon node);

    void caseTElse(TElse node);
    void caseTIf(TIf node);
    void caseTInt(TInt node);
    void caseTString(TString node);
    void caseTReturn(TReturn node);
    void caseTVoid(TVoid node);
    void caseTWhile(TWhile node);
    void caseTMain(TMain node);
    void caseTInput(TInput node);
    void caseTOutput(TOutput node);
    void caseTId(TId node);
    void caseTNum(TNum node);
    void caseTStringValue(TStringValue node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTSlash(TSlash node);
    void caseTAsterisk(TAsterisk node);
    void caseTLessThan(TLessThan node);
    void caseTLessEqual(TLessEqual node);
    void caseTGreatThan(TGreatThan node);
    void caseTGreatEqual(TGreatEqual node);
    void caseTEqual(TEqual node);
    void caseTDifferent(TDifferent node);
    void caseTAttribution(TAttribution node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTLeftPar(TLeftPar node);
    void caseTRightPar(TRightPar node);
    void caseTLeftBracket(TLeftBracket node);
    void caseTRightBracket(TRightBracket node);
    void caseTLeftBrace(TLeftBrace node);
    void caseTRightBrace(TRightBrace node);
    void caseTOpenComment(TOpenComment node);
    void caseTCloseComment(TCloseComment node);
    void caseTBlockComment(TBlockComment node);
    void caseTSpace(TSpace node);
    void caseTEndLine(TEndLine node);
    void caseTLineComment(TLineComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
