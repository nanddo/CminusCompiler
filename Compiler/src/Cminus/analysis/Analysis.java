/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.analysis;

import Cminus.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAVariableDeclaration(AVariableDeclaration node);
    void caseAFunctionDeclaration(AFunctionDeclaration node);
    void caseAFunctionMainDeclaration(AFunctionMainDeclaration node);
    void caseAFunctionArgDeclaration(AFunctionArgDeclaration node);
    void caseAIntType(AIntType node);
    void caseAStringType(AStringType node);
    void caseAVoidType(AVoidType node);
    void caseAArg(AArg node);
    void caseASingleName(ASingleName node);
    void caseAArrayName(AArrayName node);
    void caseAEmptyArray(AEmptyArray node);
    void caseADimArray(ADimArray node);
    void caseAAttributionStatement(AAttributionStatement node);
    void caseAAttributionStringStatement(AAttributionStringStatement node);
    void caseABlockStatement(ABlockStatement node);
    void caseADeclarationStatement(ADeclarationStatement node);
    void caseACallStatement(ACallStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseAIfelseStatement(AIfelseStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAEmptyStatement(AEmptyStatement node);
    void caseALessThanRelExp(ALessThanRelExp node);
    void caseALessEqualRelExp(ALessEqualRelExp node);
    void caseAGreatThanRelExp(AGreatThanRelExp node);
    void caseAGreatEqualRelExp(AGreatEqualRelExp node);
    void caseAEqualRelExp(AEqualRelExp node);
    void caseADifferentRelExp(ADifferentRelExp node);
    void caseAPlusExp(APlusExp node);
    void caseAMinusExp(AMinusExp node);
    void caseAMultExp(AMultExp node);
    void caseADivExp(ADivExp node);
    void caseANumExp(ANumExp node);
    void caseAIdExp(AIdExp node);
    void caseANameExp(ANameExp node);

    void caseTElse(TElse node);
    void caseTIf(TIf node);
    void caseTInt(TInt node);
    void caseTString(TString node);
    void caseTReturn(TReturn node);
    void caseTVoid(TVoid node);
    void caseTWhile(TWhile node);
    void caseTMain(TMain node);
    void caseTInput(TInput node);
    void caseTOutput(TOutput node);
    void caseTId(TId node);
    void caseTNum(TNum node);
    void caseTStringValue(TStringValue node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTSlash(TSlash node);
    void caseTAsterisk(TAsterisk node);
    void caseTLessThan(TLessThan node);
    void caseTLessEqual(TLessEqual node);
    void caseTGreatThan(TGreatThan node);
    void caseTGreatEqual(TGreatEqual node);
    void caseTEqual(TEqual node);
    void caseTDifferent(TDifferent node);
    void caseTAttribution(TAttribution node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTLeftPar(TLeftPar node);
    void caseTRightPar(TRightPar node);
    void caseTLeftBracket(TLeftBracket node);
    void caseTRightBracket(TRightBracket node);
    void caseTLeftBrace(TLeftBrace node);
    void caseTRightBrace(TRightBrace node);
    void caseTOpenComment(TOpenComment node);
    void caseTCloseComment(TCloseComment node);
    void caseTBlockComment(TBlockComment node);
    void caseTSpace(TSpace node);
    void caseTEndLine(TEndLine node);
    void caseTLineComment(TLineComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
