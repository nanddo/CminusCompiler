/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.analysis;

import Cminus.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAADeclarationList(AADeclarationList node);
    void caseABDeclarationList(ABDeclarationList node);
    void caseAADeclaration(AADeclaration node);
    void caseABDeclaration(ABDeclaration node);
    void caseAAVariableDeclaration(AAVariableDeclaration node);
    void caseABVariableDeclaration(ABVariableDeclaration node);
    void caseAAArrayDeclaration(AAArrayDeclaration node);
    void caseABArrayDeclaration(ABArrayDeclaration node);
    void caseAATypeSpecifier(AATypeSpecifier node);
    void caseABTypeSpecifier(ABTypeSpecifier node);
    void caseACTypeSpecifier(ACTypeSpecifier node);
    void caseAFunctionDeclaration(AFunctionDeclaration node);
    void caseAAParameters(AAParameters node);
    void caseABParameters(ABParameters node);
    void caseAAParametersList(AAParametersList node);
    void caseABParametersList(ABParametersList node);
    void caseAASingleParameter(AASingleParameter node);
    void caseABSingleParameter(ABSingleParameter node);
    void caseAAArrayParameter(AAArrayParameter node);
    void caseABArrayParameter(ABArrayParameter node);
    void caseAAStatementList(AAStatementList node);
    void caseABStatementList(ABStatementList node);
    void caseAAStatement(AAStatement node);
    void caseABStatement(ABStatement node);
    void caseACStatement(ACStatement node);
    void caseADStatement(ADStatement node);
    void caseAEStatement(AEStatement node);
    void caseAFStatement(AFStatement node);
    void caseAAStatementWithElse(AAStatementWithElse node);
    void caseABStatementWithElse(ABStatementWithElse node);
    void caseACStatementWithElse(ACStatementWithElse node);
    void caseADStatementWithElse(ADStatementWithElse node);
    void caseAEStatementWithElse(AEStatementWithElse node);
    void caseAAExpressionStatement(AAExpressionStatement node);
    void caseABExpressionStatement(ABExpressionStatement node);
    void caseACompoundStatement(ACompoundStatement node);
    void caseAALocalDeclarations(AALocalDeclarations node);
    void caseABLocalDeclarations(ABLocalDeclarations node);
    void caseAIfStatement(AIfStatement node);
    void caseAIfElseStatement(AIfElseStatement node);
    void caseAIfElseStatement2(AIfElseStatement2 node);
    void caseAIterationStatement(AIterationStatement node);
    void caseAIterationStatementElse(AIterationStatementElse node);
    void caseAAReturnStatement(AAReturnStatement node);
    void caseABReturnStatement(ABReturnStatement node);
    void caseAAInputFunctions(AAInputFunctions node);
    void caseABInputFunctions(ABInputFunctions node);
    void caseAAOutputFunctions(AAOutputFunctions node);
    void caseABOutputFunctions(ABOutputFunctions node);
    void caseAAVariable(AAVariable node);
    void caseABVariable(ABVariable node);
    void caseAAArrayExpression(AAArrayExpression node);
    void caseABArrayExpression(ABArrayExpression node);
    void caseAAExpression(AAExpression node);
    void caseABExpression(ABExpression node);
    void caseACExpression(ACExpression node);
    void caseAASimpleExpression(AASimpleExpression node);
    void caseABSimpleExpression(ABSimpleExpression node);
    void caseAARelationalOperator(AARelationalOperator node);
    void caseABRelationalOperator(ABRelationalOperator node);
    void caseACRelationalOperator(ACRelationalOperator node);
    void caseADRelationalOperator(ADRelationalOperator node);
    void caseAERelationalOperator(AERelationalOperator node);
    void caseAFRelationalOperator(AFRelationalOperator node);
    void caseAAAdditiveExpression(AAAdditiveExpression node);
    void caseABAdditiveExpression(ABAdditiveExpression node);
    void caseAAAdditionOperator(AAAdditionOperator node);
    void caseABAdditionOperator(ABAdditionOperator node);
    void caseAATerm(AATerm node);
    void caseABTerm(ABTerm node);
    void caseAAMultiplicativeOperator(AAMultiplicativeOperator node);
    void caseABMultiplicativeOperator(ABMultiplicativeOperator node);
    void caseAAFactor(AAFactor node);
    void caseABFactor(ABFactor node);
    void caseACFactor(ACFactor node);
    void caseADFactor(ADFactor node);
    void caseACall(ACall node);
    void caseAAArgumentsList(AAArgumentsList node);
    void caseABArgumentsList(ABArgumentsList node);
    void caseAAArguments(AAArguments node);
    void caseABArguments(ABArguments node);
    void caseAEpsilon(AEpsilon node);

    void caseTElse(TElse node);
    void caseTIf(TIf node);
    void caseTInt(TInt node);
    void caseTString(TString node);
    void caseTReturn(TReturn node);
    void caseTVoid(TVoid node);
    void caseTWhile(TWhile node);
    void caseTInput(TInput node);
    void caseTOutput(TOutput node);
    void caseTId(TId node);
    void caseTNum(TNum node);
    void caseTStringValue(TStringValue node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTSlash(TSlash node);
    void caseTAsterisk(TAsterisk node);
    void caseTLessThan(TLessThan node);
    void caseTLessEqual(TLessEqual node);
    void caseTGreatThan(TGreatThan node);
    void caseTGreatEqual(TGreatEqual node);
    void caseTEqual(TEqual node);
    void caseTDifferent(TDifferent node);
    void caseTAttribution(TAttribution node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTLeftPar(TLeftPar node);
    void caseTRightPar(TRightPar node);
    void caseTLeftBracket(TLeftBracket node);
    void caseTRightBracket(TRightBracket node);
    void caseTLeftBrace(TLeftBrace node);
    void caseTRightBrace(TRightBrace node);
    void caseTOpenComment(TOpenComment node);
    void caseTCloseComment(TCloseComment node);
    void caseTBlockComment(TBlockComment node);
    void caseTBlank(TBlank node);
    void caseTEndLine(TEndLine node);
    void caseTLineComment(TLineComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
