/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.analysis;

import java.util.*;
import Cminus.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getDeclarationList() != null)
        {
            node.getDeclarationList().apply(this);
        }
        outAProgram(node);
    }

    public void inAADeclarationList(AADeclarationList node)
    {
        defaultIn(node);
    }

    public void outAADeclarationList(AADeclarationList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADeclarationList(AADeclarationList node)
    {
        inAADeclarationList(node);
        if(node.getDeclaration() != null)
        {
            node.getDeclaration().apply(this);
        }
        if(node.getDeclarationList() != null)
        {
            node.getDeclarationList().apply(this);
        }
        outAADeclarationList(node);
    }

    public void inABDeclarationList(ABDeclarationList node)
    {
        defaultIn(node);
    }

    public void outABDeclarationList(ABDeclarationList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABDeclarationList(ABDeclarationList node)
    {
        inABDeclarationList(node);
        if(node.getDeclaration() != null)
        {
            node.getDeclaration().apply(this);
        }
        outABDeclarationList(node);
    }

    public void inAADeclaration(AADeclaration node)
    {
        defaultIn(node);
    }

    public void outAADeclaration(AADeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADeclaration(AADeclaration node)
    {
        inAADeclaration(node);
        if(node.getVarDeclaration() != null)
        {
            node.getVarDeclaration().apply(this);
        }
        outAADeclaration(node);
    }

    public void inABDeclaration(ABDeclaration node)
    {
        defaultIn(node);
    }

    public void outABDeclaration(ABDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABDeclaration(ABDeclaration node)
    {
        inABDeclaration(node);
        if(node.getFuncDeclaration() != null)
        {
            node.getFuncDeclaration().apply(this);
        }
        outABDeclaration(node);
    }

    public void inAAVarDeclaration(AAVarDeclaration node)
    {
        defaultIn(node);
    }

    public void outAAVarDeclaration(AAVarDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAVarDeclaration(AAVarDeclaration node)
    {
        inAAVarDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        outAAVarDeclaration(node);
    }

    public void inABVarDeclaration(ABVarDeclaration node)
    {
        defaultIn(node);
    }

    public void outABVarDeclaration(ABVarDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABVarDeclaration(ABVarDeclaration node)
    {
        inABVarDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        outABVarDeclaration(node);
    }

    public void inAATypeSpecifier(AATypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAATypeSpecifier(AATypeSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAATypeSpecifier(AATypeSpecifier node)
    {
        inAATypeSpecifier(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAATypeSpecifier(node);
    }

    public void inABTypeSpecifier(ABTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outABTypeSpecifier(ABTypeSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABTypeSpecifier(ABTypeSpecifier node)
    {
        inABTypeSpecifier(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outABTypeSpecifier(node);
    }

    public void inACTypeSpecifier(ACTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outACTypeSpecifier(ACTypeSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACTypeSpecifier(ACTypeSpecifier node)
    {
        inACTypeSpecifier(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outACTypeSpecifier(node);
    }

    public void inAFuncDeclaration(AFuncDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFuncDeclaration(AFuncDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDeclaration(AFuncDeclaration node)
    {
        inAFuncDeclaration(node);
        if(node.getCompoundStatement() != null)
        {
            node.getCompoundStatement().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        outAFuncDeclaration(node);
    }

    public void inAAParams(AAParams node)
    {
        defaultIn(node);
    }

    public void outAAParams(AAParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAParams(AAParams node)
    {
        inAAParams(node);
        if(node.getParamList() != null)
        {
            node.getParamList().apply(this);
        }
        outAAParams(node);
    }

    public void inABParams(ABParams node)
    {
        defaultIn(node);
    }

    public void outABParams(ABParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABParams(ABParams node)
    {
        inABParams(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outABParams(node);
    }

    public void inAAParamList(AAParamList node)
    {
        defaultIn(node);
    }

    public void outAAParamList(AAParamList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAParamList(AAParamList node)
    {
        inAAParamList(node);
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getParamList() != null)
        {
            node.getParamList().apply(this);
        }
        outAAParamList(node);
    }

    public void inABParamList(ABParamList node)
    {
        defaultIn(node);
    }

    public void outABParamList(ABParamList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABParamList(ABParamList node)
    {
        inABParamList(node);
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        outABParamList(node);
    }

    public void inAAParam(AAParam node)
    {
        defaultIn(node);
    }

    public void outAAParam(AAParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAParam(AAParam node)
    {
        inAAParam(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        outAAParam(node);
    }

    public void inABParam(ABParam node)
    {
        defaultIn(node);
    }

    public void outABParam(ABParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABParam(ABParam node)
    {
        inABParam(node);
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        outABParam(node);
    }

    public void inACompoundStatement(ACompoundStatement node)
    {
        defaultIn(node);
    }

    public void outACompoundStatement(ACompoundStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundStatement(ACompoundStatement node)
    {
        inACompoundStatement(node);
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getLocalDeclarations() != null)
        {
            node.getLocalDeclarations().apply(this);
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        outACompoundStatement(node);
    }

    public void inAALocalDeclarations(AALocalDeclarations node)
    {
        defaultIn(node);
    }

    public void outAALocalDeclarations(AALocalDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAALocalDeclarations(AALocalDeclarations node)
    {
        inAALocalDeclarations(node);
        if(node.getVarDeclaration() != null)
        {
            node.getVarDeclaration().apply(this);
        }
        if(node.getLocalDeclarations() != null)
        {
            node.getLocalDeclarations().apply(this);
        }
        outAALocalDeclarations(node);
    }

    public void inABLocalDeclarations(ABLocalDeclarations node)
    {
        defaultIn(node);
    }

    public void outABLocalDeclarations(ABLocalDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABLocalDeclarations(ABLocalDeclarations node)
    {
        inABLocalDeclarations(node);
        if(node.getEpsilon() != null)
        {
            node.getEpsilon().apply(this);
        }
        outABLocalDeclarations(node);
    }

    public void inAAStatementList(AAStatementList node)
    {
        defaultIn(node);
    }

    public void outAAStatementList(AAStatementList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAStatementList(AAStatementList node)
    {
        inAAStatementList(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        outAAStatementList(node);
    }

    public void inABStatementList(ABStatementList node)
    {
        defaultIn(node);
    }

    public void outABStatementList(ABStatementList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABStatementList(ABStatementList node)
    {
        inABStatementList(node);
        if(node.getEpsilon() != null)
        {
            node.getEpsilon().apply(this);
        }
        outABStatementList(node);
    }

    public void inAAStatement(AAStatement node)
    {
        defaultIn(node);
    }

    public void outAAStatement(AAStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAStatement(AAStatement node)
    {
        inAAStatement(node);
        if(node.getExpressionStatement() != null)
        {
            node.getExpressionStatement().apply(this);
        }
        outAAStatement(node);
    }

    public void inABStatement(ABStatement node)
    {
        defaultIn(node);
    }

    public void outABStatement(ABStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABStatement(ABStatement node)
    {
        inABStatement(node);
        if(node.getCompoundStatement() != null)
        {
            node.getCompoundStatement().apply(this);
        }
        outABStatement(node);
    }

    public void inACStatement(ACStatement node)
    {
        defaultIn(node);
    }

    public void outACStatement(ACStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACStatement(ACStatement node)
    {
        inACStatement(node);
        if(node.getSelectionStatement() != null)
        {
            node.getSelectionStatement().apply(this);
        }
        outACStatement(node);
    }

    public void inADStatement(ADStatement node)
    {
        defaultIn(node);
    }

    public void outADStatement(ADStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADStatement(ADStatement node)
    {
        inADStatement(node);
        if(node.getIterationStatement() != null)
        {
            node.getIterationStatement().apply(this);
        }
        outADStatement(node);
    }

    public void inAEStatement(AEStatement node)
    {
        defaultIn(node);
    }

    public void outAEStatement(AEStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEStatement(AEStatement node)
    {
        inAEStatement(node);
        if(node.getReturnStatement() != null)
        {
            node.getReturnStatement().apply(this);
        }
        outAEStatement(node);
    }

    public void inAAExpressionStatement(AAExpressionStatement node)
    {
        defaultIn(node);
    }

    public void outAAExpressionStatement(AAExpressionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpressionStatement(AAExpressionStatement node)
    {
        inAAExpressionStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAExpressionStatement(node);
    }

    public void inABExpressionStatement(ABExpressionStatement node)
    {
        defaultIn(node);
    }

    public void outABExpressionStatement(ABExpressionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABExpressionStatement(ABExpressionStatement node)
    {
        inABExpressionStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outABExpressionStatement(node);
    }

    public void inASelectionStatement(ASelectionStatement node)
    {
        defaultIn(node);
    }

    public void outASelectionStatement(ASelectionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectionStatement(ASelectionStatement node)
    {
        inASelectionStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outASelectionStatement(node);
    }

    public void inAIterationStatement(AIterationStatement node)
    {
        defaultIn(node);
    }

    public void outAIterationStatement(AIterationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterationStatement(AIterationStatement node)
    {
        inAIterationStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAIterationStatement(node);
    }

    public void inAAReturnStatement(AAReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAAReturnStatement(AAReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAReturnStatement(AAReturnStatement node)
    {
        inAAReturnStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAAReturnStatement(node);
    }

    public void inABReturnStatement(ABReturnStatement node)
    {
        defaultIn(node);
    }

    public void outABReturnStatement(ABReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABReturnStatement(ABReturnStatement node)
    {
        inABReturnStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outABReturnStatement(node);
    }

    public void inAAExpression(AAExpression node)
    {
        defaultIn(node);
    }

    public void outAAExpression(AAExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpression(AAExpression node)
    {
        inAAExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAttribution() != null)
        {
            node.getAttribution().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAExpression(node);
    }

    public void inABExpression(ABExpression node)
    {
        defaultIn(node);
    }

    public void outABExpression(ABExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABExpression(ABExpression node)
    {
        inABExpression(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outABExpression(node);
    }

    public void inAAVar(AAVar node)
    {
        defaultIn(node);
    }

    public void outAAVar(AAVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAVar(AAVar node)
    {
        inAAVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAVar(node);
    }

    public void inABVar(ABVar node)
    {
        defaultIn(node);
    }

    public void outABVar(ABVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABVar(ABVar node)
    {
        inABVar(node);
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outABVar(node);
    }

    public void inAASimpleExpression(AASimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAASimpleExpression(AASimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASimpleExpression(AASimpleExpression node)
    {
        inAASimpleExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getRelop() != null)
        {
            node.getRelop().apply(this);
        }
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outAASimpleExpression(node);
    }

    public void inABSimpleExpression(ABSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outABSimpleExpression(ABSimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABSimpleExpression(ABSimpleExpression node)
    {
        inABSimpleExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outABSimpleExpression(node);
    }

    public void inAARelop(AARelop node)
    {
        defaultIn(node);
    }

    public void outAARelop(AARelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAARelop(AARelop node)
    {
        inAARelop(node);
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        outAARelop(node);
    }

    public void inABRelop(ABRelop node)
    {
        defaultIn(node);
    }

    public void outABRelop(ABRelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABRelop(ABRelop node)
    {
        inABRelop(node);
        if(node.getLessEqual() != null)
        {
            node.getLessEqual().apply(this);
        }
        outABRelop(node);
    }

    public void inACRelop(ACRelop node)
    {
        defaultIn(node);
    }

    public void outACRelop(ACRelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACRelop(ACRelop node)
    {
        inACRelop(node);
        if(node.getGreatThan() != null)
        {
            node.getGreatThan().apply(this);
        }
        outACRelop(node);
    }

    public void inADRelop(ADRelop node)
    {
        defaultIn(node);
    }

    public void outADRelop(ADRelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADRelop(ADRelop node)
    {
        inADRelop(node);
        if(node.getGreatEqual() != null)
        {
            node.getGreatEqual().apply(this);
        }
        outADRelop(node);
    }

    public void inAERelop(AERelop node)
    {
        defaultIn(node);
    }

    public void outAERelop(AERelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAERelop(AERelop node)
    {
        inAERelop(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAERelop(node);
    }

    public void inAFRelop(AFRelop node)
    {
        defaultIn(node);
    }

    public void outAFRelop(AFRelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFRelop(AFRelop node)
    {
        inAFRelop(node);
        if(node.getDifferent() != null)
        {
            node.getDifferent().apply(this);
        }
        outAFRelop(node);
    }

    public void inAAAdditiveExpression(AAAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAAAdditiveExpression(AAAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAdditiveExpression(AAAdditiveExpression node)
    {
        inAAAdditiveExpression(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getAddop() != null)
        {
            node.getAddop().apply(this);
        }
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outAAAdditiveExpression(node);
    }

    public void inABAdditiveExpression(ABAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outABAdditiveExpression(ABAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABAdditiveExpression(ABAdditiveExpression node)
    {
        inABAdditiveExpression(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outABAdditiveExpression(node);
    }

    public void inAAAddop(AAAddop node)
    {
        defaultIn(node);
    }

    public void outAAAddop(AAAddop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAddop(AAAddop node)
    {
        inAAAddop(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAAAddop(node);
    }

    public void inABAddop(ABAddop node)
    {
        defaultIn(node);
    }

    public void outABAddop(ABAddop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABAddop(ABAddop node)
    {
        inABAddop(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outABAddop(node);
    }

    public void inAATerm(AATerm node)
    {
        defaultIn(node);
    }

    public void outAATerm(AATerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAATerm(AATerm node)
    {
        inAATerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMulop() != null)
        {
            node.getMulop().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAATerm(node);
    }

    public void inABTerm(ABTerm node)
    {
        defaultIn(node);
    }

    public void outABTerm(ABTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABTerm(ABTerm node)
    {
        inABTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outABTerm(node);
    }

    public void inAAMulop(AAMulop node)
    {
        defaultIn(node);
    }

    public void outAAMulop(AAMulop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMulop(AAMulop node)
    {
        inAAMulop(node);
        if(node.getAsterisk() != null)
        {
            node.getAsterisk().apply(this);
        }
        outAAMulop(node);
    }

    public void inABMulop(ABMulop node)
    {
        defaultIn(node);
    }

    public void outABMulop(ABMulop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABMulop(ABMulop node)
    {
        inABMulop(node);
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        outABMulop(node);
    }

    public void inAAFactor(AAFactor node)
    {
        defaultIn(node);
    }

    public void outAAFactor(AAFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAFactor(AAFactor node)
    {
        inAAFactor(node);
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        outAAFactor(node);
    }

    public void inABFactor(ABFactor node)
    {
        defaultIn(node);
    }

    public void outABFactor(ABFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABFactor(ABFactor node)
    {
        inABFactor(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outABFactor(node);
    }

    public void inACFactor(ACFactor node)
    {
        defaultIn(node);
    }

    public void outACFactor(ACFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACFactor(ACFactor node)
    {
        inACFactor(node);
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        outACFactor(node);
    }

    public void inADFactor(ADFactor node)
    {
        defaultIn(node);
    }

    public void outADFactor(ADFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADFactor(ADFactor node)
    {
        inADFactor(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outADFactor(node);
    }

    public void inACall(ACall node)
    {
        defaultIn(node);
    }

    public void outACall(ACall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACall(ACall node)
    {
        inACall(node);
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outACall(node);
    }

    public void inAAArgs(AAArgs node)
    {
        defaultIn(node);
    }

    public void outAAArgs(AAArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAArgs(AAArgs node)
    {
        inAAArgs(node);
        if(node.getArgsList() != null)
        {
            node.getArgsList().apply(this);
        }
        outAAArgs(node);
    }

    public void inABArgs(ABArgs node)
    {
        defaultIn(node);
    }

    public void outABArgs(ABArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABArgs(ABArgs node)
    {
        inABArgs(node);
        if(node.getEpsilon() != null)
        {
            node.getEpsilon().apply(this);
        }
        outABArgs(node);
    }

    public void inAAArgsList(AAArgsList node)
    {
        defaultIn(node);
    }

    public void outAAArgsList(AAArgsList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAArgsList(AAArgsList node)
    {
        inAAArgsList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getArgsList() != null)
        {
            node.getArgsList().apply(this);
        }
        outAAArgsList(node);
    }

    public void inABArgsList(ABArgsList node)
    {
        defaultIn(node);
    }

    public void outABArgsList(ABArgsList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABArgsList(ABArgsList node)
    {
        inABArgsList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outABArgsList(node);
    }

    public void inAEpsilon(AEpsilon node)
    {
        defaultIn(node);
    }

    public void outAEpsilon(AEpsilon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilon(AEpsilon node)
    {
        inAEpsilon(node);
        outAEpsilon(node);
    }
}
