/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.analysis;

import java.util.*;
import Cminus.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getMainDeclaration() != null)
        {
            node.getMainDeclaration().apply(this);
        }
        {
            List<PDeclaration> copy = new ArrayList<PDeclaration>(node.getDeclaration());
            Collections.reverse(copy);
            for(PDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inAVarDeclaration(AVarDeclaration node)
    {
        defaultIn(node);
    }

    public void outAVarDeclaration(AVarDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclaration(AVarDeclaration node)
    {
        inAVarDeclaration(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarDeclaration(node);
    }

    public void inAFuncDeclaration(AFuncDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFuncDeclaration(AFuncDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDeclaration(AFuncDeclaration node)
    {
        inAFuncDeclaration(node);
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        outAFuncDeclaration(node);
    }

    public void inAMainMainDeclaration(AMainMainDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMainMainDeclaration(AMainMainDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainMainDeclaration(AMainMainDeclaration node)
    {
        inAMainMainDeclaration(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAMainMainDeclaration(node);
    }

    public void inAVariableVariableDeclaration(AVariableVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAVariableVariableDeclaration(AVariableVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableVariableDeclaration(AVariableVariableDeclaration node)
    {
        inAVariableVariableDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        {
            List<PArrayDeclaration> copy = new ArrayList<PArrayDeclaration>(node.getArrayDeclaration());
            Collections.reverse(copy);
            for(PArrayDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        outAVariableVariableDeclaration(node);
    }

    public void inAArrayDeclaration(AArrayDeclaration node)
    {
        defaultIn(node);
    }

    public void outAArrayDeclaration(AArrayDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayDeclaration(AArrayDeclaration node)
    {
        inAArrayDeclaration(node);
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        outAArrayDeclaration(node);
    }

    public void inAIntTypeSpecifier(AIntTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAIntTypeSpecifier(AIntTypeSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTypeSpecifier(AIntTypeSpecifier node)
    {
        inAIntTypeSpecifier(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntTypeSpecifier(node);
    }

    public void inAStringTypeSpecifier(AStringTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAStringTypeSpecifier(AStringTypeSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTypeSpecifier(AStringTypeSpecifier node)
    {
        inAStringTypeSpecifier(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringTypeSpecifier(node);
    }

    public void inATypeImplicitTypeSpecifier(ATypeImplicitTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outATypeImplicitTypeSpecifier(ATypeImplicitTypeSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeImplicitTypeSpecifier(ATypeImplicitTypeSpecifier node)
    {
        inATypeImplicitTypeSpecifier(node);
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        outATypeImplicitTypeSpecifier(node);
    }

    public void inAVoidImplicitTypeSpecifier(AVoidImplicitTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAVoidImplicitTypeSpecifier(AVoidImplicitTypeSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidImplicitTypeSpecifier(AVoidImplicitTypeSpecifier node)
    {
        inAVoidImplicitTypeSpecifier(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidImplicitTypeSpecifier(node);
    }

    public void inAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDeclaration(AFunctionDeclaration node)
    {
        inAFunctionDeclaration(node);
        if(node.getCompoundStatement() != null)
        {
            node.getCompoundStatement().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getParameters() != null)
        {
            node.getParameters().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getImplicitTypeSpecifier() != null)
        {
            node.getImplicitTypeSpecifier().apply(this);
        }
        outAFunctionDeclaration(node);
    }

    public void inAListParameters(AListParameters node)
    {
        defaultIn(node);
    }

    public void outAListParameters(AListParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListParameters(AListParameters node)
    {
        inAListParameters(node);
        if(node.getParametersList() != null)
        {
            node.getParametersList().apply(this);
        }
        outAListParameters(node);
    }

    public void inAVoidParameters(AVoidParameters node)
    {
        defaultIn(node);
    }

    public void outAVoidParameters(AVoidParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidParameters(AVoidParameters node)
    {
        inAVoidParameters(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidParameters(node);
    }

    public void inAListParametersList(AListParametersList node)
    {
        defaultIn(node);
    }

    public void outAListParametersList(AListParametersList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListParametersList(AListParametersList node)
    {
        inAListParametersList(node);
        if(node.getSingleParameter() != null)
        {
            node.getSingleParameter().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getParametersList() != null)
        {
            node.getParametersList().apply(this);
        }
        outAListParametersList(node);
    }

    public void inASingleParametersList(ASingleParametersList node)
    {
        defaultIn(node);
    }

    public void outASingleParametersList(ASingleParametersList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleParametersList(ASingleParametersList node)
    {
        inASingleParametersList(node);
        if(node.getSingleParameter() != null)
        {
            node.getSingleParameter().apply(this);
        }
        outASingleParametersList(node);
    }

    public void inASingleParameter(ASingleParameter node)
    {
        defaultIn(node);
    }

    public void outASingleParameter(ASingleParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleParameter(ASingleParameter node)
    {
        inASingleParameter(node);
        {
            List<PArrayParameter> copy = new ArrayList<PArrayParameter>(node.getArrayParameter());
            Collections.reverse(copy);
            for(PArrayParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        outASingleParameter(node);
    }

    public void inAArrayParameter(AArrayParameter node)
    {
        defaultIn(node);
    }

    public void outAArrayParameter(AArrayParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayParameter(AArrayParameter node)
    {
        inAArrayParameter(node);
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        outAArrayParameter(node);
    }

    public void inAAStatementList(AAStatementList node)
    {
        defaultIn(node);
    }

    public void outAAStatementList(AAStatementList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAStatementList(AAStatementList node)
    {
        inAAStatementList(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        outAAStatementList(node);
    }

    public void inABStatementList(ABStatementList node)
    {
        defaultIn(node);
    }

    public void outABStatementList(ABStatementList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABStatementList(ABStatementList node)
    {
        inABStatementList(node);
        if(node.getEpsilon() != null)
        {
            node.getEpsilon().apply(this);
        }
        outABStatementList(node);
    }

    public void inAAStatement(AAStatement node)
    {
        defaultIn(node);
    }

    public void outAAStatement(AAStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAStatement(AAStatement node)
    {
        inAAStatement(node);
        if(node.getAttributionStatement() != null)
        {
            node.getAttributionStatement().apply(this);
        }
        outAAStatement(node);
    }

    public void inABStatement(ABStatement node)
    {
        defaultIn(node);
    }

    public void outABStatement(ABStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABStatement(ABStatement node)
    {
        inABStatement(node);
        if(node.getCompoundStatement() != null)
        {
            node.getCompoundStatement().apply(this);
        }
        outABStatement(node);
    }

    public void inACStatement(ACStatement node)
    {
        defaultIn(node);
    }

    public void outACStatement(ACStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACStatement(ACStatement node)
    {
        inACStatement(node);
        if(node.getReturnStatement() != null)
        {
            node.getReturnStatement().apply(this);
        }
        outACStatement(node);
    }

    public void inADStatement(ADStatement node)
    {
        defaultIn(node);
    }

    public void outADStatement(ADStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADStatement(ADStatement node)
    {
        inADStatement(node);
        if(node.getIfStatement() != null)
        {
            node.getIfStatement().apply(this);
        }
        outADStatement(node);
    }

    public void inAEStatement(AEStatement node)
    {
        defaultIn(node);
    }

    public void outAEStatement(AEStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEStatement(AEStatement node)
    {
        inAEStatement(node);
        if(node.getIfElseStatement() != null)
        {
            node.getIfElseStatement().apply(this);
        }
        outAEStatement(node);
    }

    public void inAFStatement(AFStatement node)
    {
        defaultIn(node);
    }

    public void outAFStatement(AFStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFStatement(AFStatement node)
    {
        inAFStatement(node);
        if(node.getIterationStatement() != null)
        {
            node.getIterationStatement().apply(this);
        }
        outAFStatement(node);
    }

    public void inAAStatementWithElse(AAStatementWithElse node)
    {
        defaultIn(node);
    }

    public void outAAStatementWithElse(AAStatementWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAStatementWithElse(AAStatementWithElse node)
    {
        inAAStatementWithElse(node);
        if(node.getAttributionStatement() != null)
        {
            node.getAttributionStatement().apply(this);
        }
        outAAStatementWithElse(node);
    }

    public void inABStatementWithElse(ABStatementWithElse node)
    {
        defaultIn(node);
    }

    public void outABStatementWithElse(ABStatementWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABStatementWithElse(ABStatementWithElse node)
    {
        inABStatementWithElse(node);
        if(node.getCompoundStatement() != null)
        {
            node.getCompoundStatement().apply(this);
        }
        outABStatementWithElse(node);
    }

    public void inACStatementWithElse(ACStatementWithElse node)
    {
        defaultIn(node);
    }

    public void outACStatementWithElse(ACStatementWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACStatementWithElse(ACStatementWithElse node)
    {
        inACStatementWithElse(node);
        if(node.getReturnStatement() != null)
        {
            node.getReturnStatement().apply(this);
        }
        outACStatementWithElse(node);
    }

    public void inADStatementWithElse(ADStatementWithElse node)
    {
        defaultIn(node);
    }

    public void outADStatementWithElse(ADStatementWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADStatementWithElse(ADStatementWithElse node)
    {
        inADStatementWithElse(node);
        if(node.getIfElseStatement2() != null)
        {
            node.getIfElseStatement2().apply(this);
        }
        outADStatementWithElse(node);
    }

    public void inAEStatementWithElse(AEStatementWithElse node)
    {
        defaultIn(node);
    }

    public void outAEStatementWithElse(AEStatementWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEStatementWithElse(AEStatementWithElse node)
    {
        inAEStatementWithElse(node);
        if(node.getIterationStatementElse() != null)
        {
            node.getIterationStatementElse().apply(this);
        }
        outAEStatementWithElse(node);
    }

    public void inAAAttributionStatement(AAAttributionStatement node)
    {
        defaultIn(node);
    }

    public void outAAAttributionStatement(AAAttributionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAttributionStatement(AAAttributionStatement node)
    {
        inAAAttributionStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAttribution() != null)
        {
            node.getAttribution().apply(this);
        }
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAAAttributionStatement(node);
    }

    public void inABAttributionStatement(ABAttributionStatement node)
    {
        defaultIn(node);
    }

    public void outABAttributionStatement(ABAttributionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABAttributionStatement(ABAttributionStatement node)
    {
        inABAttributionStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getStringValue() != null)
        {
            node.getStringValue().apply(this);
        }
        if(node.getAttribution() != null)
        {
            node.getAttribution().apply(this);
        }
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outABAttributionStatement(node);
    }

    public void inACAttributionStatement(ACAttributionStatement node)
    {
        defaultIn(node);
    }

    public void outACAttributionStatement(ACAttributionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACAttributionStatement(ACAttributionStatement node)
    {
        inACAttributionStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        outACAttributionStatement(node);
    }

    public void inADAttributionStatement(ADAttributionStatement node)
    {
        defaultIn(node);
    }

    public void outADAttributionStatement(ADAttributionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADAttributionStatement(ADAttributionStatement node)
    {
        inADAttributionStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADAttributionStatement(node);
    }

    public void inACompoundStatement(ACompoundStatement node)
    {
        defaultIn(node);
    }

    public void outACompoundStatement(ACompoundStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundStatement(ACompoundStatement node)
    {
        inACompoundStatement(node);
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        {
            List<PVariableDeclaration> copy = new ArrayList<PVariableDeclaration>(node.getVariableDeclaration());
            Collections.reverse(copy);
            for(PVariableDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        outACompoundStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAIfElseStatement(AIfElseStatement node)
    {
        defaultIn(node);
    }

    public void outAIfElseStatement(AIfElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStatement(AIfElseStatement node)
    {
        inAIfElseStatement(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfElseStatement(node);
    }

    public void inAIfElseStatement2(AIfElseStatement2 node)
    {
        defaultIn(node);
    }

    public void outAIfElseStatement2(AIfElseStatement2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStatement2(AIfElseStatement2 node)
    {
        inAIfElseStatement2(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfElseStatement2(node);
    }

    public void inAIterationStatement(AIterationStatement node)
    {
        defaultIn(node);
    }

    public void outAIterationStatement(AIterationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterationStatement(AIterationStatement node)
    {
        inAIterationStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAIterationStatement(node);
    }

    public void inAIterationStatementElse(AIterationStatementElse node)
    {
        defaultIn(node);
    }

    public void outAIterationStatementElse(AIterationStatementElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterationStatementElse(AIterationStatementElse node)
    {
        inAIterationStatementElse(node);
        if(node.getStatementWithElse() != null)
        {
            node.getStatementWithElse().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAIterationStatementElse(node);
    }

    public void inAAReturnStatement(AAReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAAReturnStatement(AAReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAReturnStatement(AAReturnStatement node)
    {
        inAAReturnStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAAReturnStatement(node);
    }

    public void inABReturnStatement(ABReturnStatement node)
    {
        defaultIn(node);
    }

    public void outABReturnStatement(ABReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABReturnStatement(ABReturnStatement node)
    {
        inABReturnStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outABReturnStatement(node);
    }

    public void inAVariable(AVariable node)
    {
        defaultIn(node);
    }

    public void outAVariable(AVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariable(AVariable node)
    {
        inAVariable(node);
        {
            List<PArrayExpression> copy = new ArrayList<PArrayExpression>(node.getArrayExpression());
            Collections.reverse(copy);
            for(PArrayExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVariable(node);
    }

    public void inAArrayExpression(AArrayExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayExpression(AArrayExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExpression(AArrayExpression node)
    {
        inAArrayExpression(node);
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        outAArrayExpression(node);
    }

    public void inALessThanRelationalExpression(ALessThanRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outALessThanRelationalExpression(ALessThanRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanRelationalExpression(ALessThanRelationalExpression node)
    {
        inALessThanRelationalExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALessThanRelationalExpression(node);
    }

    public void inALessEqualRelationalExpression(ALessEqualRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outALessEqualRelationalExpression(ALessEqualRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqualRelationalExpression(ALessEqualRelationalExpression node)
    {
        inALessEqualRelationalExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLessEqual() != null)
        {
            node.getLessEqual().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALessEqualRelationalExpression(node);
    }

    public void inAGreatThanRelationalExpression(AGreatThanRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAGreatThanRelationalExpression(AGreatThanRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreatThanRelationalExpression(AGreatThanRelationalExpression node)
    {
        inAGreatThanRelationalExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getGreatThan() != null)
        {
            node.getGreatThan().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGreatThanRelationalExpression(node);
    }

    public void inAGreatEqualRelationalExpression(AGreatEqualRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAGreatEqualRelationalExpression(AGreatEqualRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreatEqualRelationalExpression(AGreatEqualRelationalExpression node)
    {
        inAGreatEqualRelationalExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getGreatEqual() != null)
        {
            node.getGreatEqual().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGreatEqualRelationalExpression(node);
    }

    public void inAEqualRelationalExpression(AEqualRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAEqualRelationalExpression(AEqualRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualRelationalExpression(AEqualRelationalExpression node)
    {
        inAEqualRelationalExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAEqualRelationalExpression(node);
    }

    public void inADifferentRelationalExpression(ADifferentRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outADifferentRelationalExpression(ADifferentRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifferentRelationalExpression(ADifferentRelationalExpression node)
    {
        inADifferentRelationalExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getDifferent() != null)
        {
            node.getDifferent().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADifferentRelationalExpression(node);
    }

    public void inAInputFunction(AInputFunction node)
    {
        defaultIn(node);
    }

    public void outAInputFunction(AInputFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInputFunction(AInputFunction node)
    {
        inAInputFunction(node);
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getInput() != null)
        {
            node.getInput().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        outAInputFunction(node);
    }

    public void inAOutputFunction(AOutputFunction node)
    {
        defaultIn(node);
    }

    public void outAOutputFunction(AOutputFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutputFunction(AOutputFunction node)
    {
        inAOutputFunction(node);
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getOutput() != null)
        {
            node.getOutput().apply(this);
        }
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAOutputFunction(node);
    }

    public void inAPlusExp(APlusExp node)
    {
        defaultIn(node);
    }

    public void outAPlusExp(APlusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExp(APlusExp node)
    {
        inAPlusExp(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAPlusExp(node);
    }

    public void inAMinusExp(AMinusExp node)
    {
        defaultIn(node);
    }

    public void outAMinusExp(AMinusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExp(AMinusExp node)
    {
        inAMinusExp(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMinusExp(node);
    }

    public void inATermExp(ATermExp node)
    {
        defaultIn(node);
    }

    public void outATermExp(ATermExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExp(ATermExp node)
    {
        inATermExp(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExp(node);
    }

    public void inAMultTerm(AMultTerm node)
    {
        defaultIn(node);
    }

    public void outAMultTerm(AMultTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTerm(AMultTerm node)
    {
        inAMultTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getAsterisk() != null)
        {
            node.getAsterisk().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAMultTerm(node);
    }

    public void inADivTerm(ADivTerm node)
    {
        defaultIn(node);
    }

    public void outADivTerm(ADivTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTerm(ADivTerm node)
    {
        inADivTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outADivTerm(node);
    }

    public void inAFactorTerm(AFactorTerm node)
    {
        defaultIn(node);
    }

    public void outAFactorTerm(AFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        inAFactorTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorTerm(node);
    }

    public void inAExpFactor(AExpFactor node)
    {
        defaultIn(node);
    }

    public void outAExpFactor(AExpFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpFactor(AExpFactor node)
    {
        inAExpFactor(node);
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        outAExpFactor(node);
    }

    public void inAVarFactor(AVarFactor node)
    {
        defaultIn(node);
    }

    public void outAVarFactor(AVarFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarFactor(AVarFactor node)
    {
        inAVarFactor(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAVarFactor(node);
    }

    public void inACallFactor(ACallFactor node)
    {
        defaultIn(node);
    }

    public void outACallFactor(ACallFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallFactor(ACallFactor node)
    {
        inACallFactor(node);
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        outACallFactor(node);
    }

    public void inANumFactor(ANumFactor node)
    {
        defaultIn(node);
    }

    public void outANumFactor(ANumFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumFactor(ANumFactor node)
    {
        inANumFactor(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outANumFactor(node);
    }

    public void inACall(ACall node)
    {
        defaultIn(node);
    }

    public void outACall(ACall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACall(ACall node)
    {
        inACall(node);
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getArguments() != null)
        {
            node.getArguments().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outACall(node);
    }

    public void inAAArgumentsList(AAArgumentsList node)
    {
        defaultIn(node);
    }

    public void outAAArgumentsList(AAArgumentsList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAArgumentsList(AAArgumentsList node)
    {
        inAAArgumentsList(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getArgumentsList() != null)
        {
            node.getArgumentsList().apply(this);
        }
        outAAArgumentsList(node);
    }

    public void inABArgumentsList(ABArgumentsList node)
    {
        defaultIn(node);
    }

    public void outABArgumentsList(ABArgumentsList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABArgumentsList(ABArgumentsList node)
    {
        inABArgumentsList(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outABArgumentsList(node);
    }

    public void inAAArguments(AAArguments node)
    {
        defaultIn(node);
    }

    public void outAAArguments(AAArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAArguments(AAArguments node)
    {
        inAAArguments(node);
        if(node.getArgumentsList() != null)
        {
            node.getArgumentsList().apply(this);
        }
        outAAArguments(node);
    }

    public void inABArguments(ABArguments node)
    {
        defaultIn(node);
    }

    public void outABArguments(ABArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABArguments(ABArguments node)
    {
        inABArguments(node);
        if(node.getEpsilon() != null)
        {
            node.getEpsilon().apply(this);
        }
        outABArguments(node);
    }

    public void inAEpsilon(AEpsilon node)
    {
        defaultIn(node);
    }

    public void outAEpsilon(AEpsilon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilon(AEpsilon node)
    {
        inAEpsilon(node);
        outAEpsilon(node);
    }
}
