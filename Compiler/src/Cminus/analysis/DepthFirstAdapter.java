/* This file was generated by SableCC (http://www.sablecc.org/). */

package Cminus.analysis;

import java.util.*;
import Cminus.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getDeclarationList() != null)
        {
            node.getDeclarationList().apply(this);
        }
        outAProgram(node);
    }

    public void inAADeclarationList(AADeclarationList node)
    {
        defaultIn(node);
    }

    public void outAADeclarationList(AADeclarationList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADeclarationList(AADeclarationList node)
    {
        inAADeclarationList(node);
        if(node.getDeclarationList() != null)
        {
            node.getDeclarationList().apply(this);
        }
        if(node.getDeclaration() != null)
        {
            node.getDeclaration().apply(this);
        }
        outAADeclarationList(node);
    }

    public void inABDeclarationList(ABDeclarationList node)
    {
        defaultIn(node);
    }

    public void outABDeclarationList(ABDeclarationList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABDeclarationList(ABDeclarationList node)
    {
        inABDeclarationList(node);
        if(node.getDeclaration() != null)
        {
            node.getDeclaration().apply(this);
        }
        outABDeclarationList(node);
    }

    public void inAADeclaration(AADeclaration node)
    {
        defaultIn(node);
    }

    public void outAADeclaration(AADeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADeclaration(AADeclaration node)
    {
        inAADeclaration(node);
        if(node.getVariableDeclaration() != null)
        {
            node.getVariableDeclaration().apply(this);
        }
        outAADeclaration(node);
    }

    public void inABDeclaration(ABDeclaration node)
    {
        defaultIn(node);
    }

    public void outABDeclaration(ABDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABDeclaration(ABDeclaration node)
    {
        inABDeclaration(node);
        if(node.getFunctionDeclaration() != null)
        {
            node.getFunctionDeclaration().apply(this);
        }
        outABDeclaration(node);
    }

    public void inAVariableDeclaration(AVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclaration(AVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclaration(AVariableDeclaration node)
    {
        inAVariableDeclaration(node);
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PArrayDeclaration> copy = new ArrayList<PArrayDeclaration>(node.getArrayDeclaration());
            for(PArrayDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAVariableDeclaration(node);
    }

    public void inAArrayDeclaration(AArrayDeclaration node)
    {
        defaultIn(node);
    }

    public void outAArrayDeclaration(AArrayDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayDeclaration(AArrayDeclaration node)
    {
        inAArrayDeclaration(node);
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        outAArrayDeclaration(node);
    }

    public void inAATypeSpecifier(AATypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAATypeSpecifier(AATypeSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAATypeSpecifier(AATypeSpecifier node)
    {
        inAATypeSpecifier(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAATypeSpecifier(node);
    }

    public void inABTypeSpecifier(ABTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outABTypeSpecifier(ABTypeSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABTypeSpecifier(ABTypeSpecifier node)
    {
        inABTypeSpecifier(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outABTypeSpecifier(node);
    }

    public void inACTypeSpecifier(ACTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outACTypeSpecifier(ACTypeSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACTypeSpecifier(ACTypeSpecifier node)
    {
        inACTypeSpecifier(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outACTypeSpecifier(node);
    }

    public void inAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDeclaration(AFunctionDeclaration node)
    {
        inAFunctionDeclaration(node);
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getParameters() != null)
        {
            node.getParameters().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getCompoundStatement() != null)
        {
            node.getCompoundStatement().apply(this);
        }
        outAFunctionDeclaration(node);
    }

    public void inAAParameters(AAParameters node)
    {
        defaultIn(node);
    }

    public void outAAParameters(AAParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAParameters(AAParameters node)
    {
        inAAParameters(node);
        if(node.getParametersList() != null)
        {
            node.getParametersList().apply(this);
        }
        outAAParameters(node);
    }

    public void inABParameters(ABParameters node)
    {
        defaultIn(node);
    }

    public void outABParameters(ABParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABParameters(ABParameters node)
    {
        inABParameters(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outABParameters(node);
    }

    public void inAAParametersList(AAParametersList node)
    {
        defaultIn(node);
    }

    public void outAAParametersList(AAParametersList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAParametersList(AAParametersList node)
    {
        inAAParametersList(node);
        if(node.getParametersList() != null)
        {
            node.getParametersList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getSingleParameter() != null)
        {
            node.getSingleParameter().apply(this);
        }
        outAAParametersList(node);
    }

    public void inABParametersList(ABParametersList node)
    {
        defaultIn(node);
    }

    public void outABParametersList(ABParametersList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABParametersList(ABParametersList node)
    {
        inABParametersList(node);
        if(node.getSingleParameter() != null)
        {
            node.getSingleParameter().apply(this);
        }
        outABParametersList(node);
    }

    public void inASingleParameter(ASingleParameter node)
    {
        defaultIn(node);
    }

    public void outASingleParameter(ASingleParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleParameter(ASingleParameter node)
    {
        inASingleParameter(node);
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PArrayParameter> copy = new ArrayList<PArrayParameter>(node.getArrayParameter());
            for(PArrayParameter e : copy)
            {
                e.apply(this);
            }
        }
        outASingleParameter(node);
    }

    public void inAArrayParameter(AArrayParameter node)
    {
        defaultIn(node);
    }

    public void outAArrayParameter(AArrayParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayParameter(AArrayParameter node)
    {
        inAArrayParameter(node);
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        outAArrayParameter(node);
    }

    public void inAAStatementList(AAStatementList node)
    {
        defaultIn(node);
    }

    public void outAAStatementList(AAStatementList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAStatementList(AAStatementList node)
    {
        inAAStatementList(node);
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAAStatementList(node);
    }

    public void inABStatementList(ABStatementList node)
    {
        defaultIn(node);
    }

    public void outABStatementList(ABStatementList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABStatementList(ABStatementList node)
    {
        inABStatementList(node);
        if(node.getEpsilon() != null)
        {
            node.getEpsilon().apply(this);
        }
        outABStatementList(node);
    }

    public void inAAStatement(AAStatement node)
    {
        defaultIn(node);
    }

    public void outAAStatement(AAStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAStatement(AAStatement node)
    {
        inAAStatement(node);
        if(node.getExpressionStatement() != null)
        {
            node.getExpressionStatement().apply(this);
        }
        outAAStatement(node);
    }

    public void inABStatement(ABStatement node)
    {
        defaultIn(node);
    }

    public void outABStatement(ABStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABStatement(ABStatement node)
    {
        inABStatement(node);
        if(node.getCompoundStatement() != null)
        {
            node.getCompoundStatement().apply(this);
        }
        outABStatement(node);
    }

    public void inACStatement(ACStatement node)
    {
        defaultIn(node);
    }

    public void outACStatement(ACStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACStatement(ACStatement node)
    {
        inACStatement(node);
        if(node.getReturnStatement() != null)
        {
            node.getReturnStatement().apply(this);
        }
        outACStatement(node);
    }

    public void inADStatement(ADStatement node)
    {
        defaultIn(node);
    }

    public void outADStatement(ADStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADStatement(ADStatement node)
    {
        inADStatement(node);
        if(node.getIfStatement() != null)
        {
            node.getIfStatement().apply(this);
        }
        outADStatement(node);
    }

    public void inAEStatement(AEStatement node)
    {
        defaultIn(node);
    }

    public void outAEStatement(AEStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEStatement(AEStatement node)
    {
        inAEStatement(node);
        if(node.getIfElseStatement() != null)
        {
            node.getIfElseStatement().apply(this);
        }
        outAEStatement(node);
    }

    public void inAFStatement(AFStatement node)
    {
        defaultIn(node);
    }

    public void outAFStatement(AFStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFStatement(AFStatement node)
    {
        inAFStatement(node);
        if(node.getIterationStatement() != null)
        {
            node.getIterationStatement().apply(this);
        }
        outAFStatement(node);
    }

    public void inAAStatementWithElse(AAStatementWithElse node)
    {
        defaultIn(node);
    }

    public void outAAStatementWithElse(AAStatementWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAStatementWithElse(AAStatementWithElse node)
    {
        inAAStatementWithElse(node);
        if(node.getExpressionStatement() != null)
        {
            node.getExpressionStatement().apply(this);
        }
        outAAStatementWithElse(node);
    }

    public void inABStatementWithElse(ABStatementWithElse node)
    {
        defaultIn(node);
    }

    public void outABStatementWithElse(ABStatementWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABStatementWithElse(ABStatementWithElse node)
    {
        inABStatementWithElse(node);
        if(node.getCompoundStatement() != null)
        {
            node.getCompoundStatement().apply(this);
        }
        outABStatementWithElse(node);
    }

    public void inACStatementWithElse(ACStatementWithElse node)
    {
        defaultIn(node);
    }

    public void outACStatementWithElse(ACStatementWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACStatementWithElse(ACStatementWithElse node)
    {
        inACStatementWithElse(node);
        if(node.getReturnStatement() != null)
        {
            node.getReturnStatement().apply(this);
        }
        outACStatementWithElse(node);
    }

    public void inADStatementWithElse(ADStatementWithElse node)
    {
        defaultIn(node);
    }

    public void outADStatementWithElse(ADStatementWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADStatementWithElse(ADStatementWithElse node)
    {
        inADStatementWithElse(node);
        if(node.getIfElseStatement2() != null)
        {
            node.getIfElseStatement2().apply(this);
        }
        outADStatementWithElse(node);
    }

    public void inAEStatementWithElse(AEStatementWithElse node)
    {
        defaultIn(node);
    }

    public void outAEStatementWithElse(AEStatementWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEStatementWithElse(AEStatementWithElse node)
    {
        inAEStatementWithElse(node);
        if(node.getIterationStatementElse() != null)
        {
            node.getIterationStatementElse().apply(this);
        }
        outAEStatementWithElse(node);
    }

    public void inAAExpressionStatement(AAExpressionStatement node)
    {
        defaultIn(node);
    }

    public void outAAExpressionStatement(AAExpressionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpressionStatement(AAExpressionStatement node)
    {
        inAAExpressionStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAExpressionStatement(node);
    }

    public void inABExpressionStatement(ABExpressionStatement node)
    {
        defaultIn(node);
    }

    public void outABExpressionStatement(ABExpressionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABExpressionStatement(ABExpressionStatement node)
    {
        inABExpressionStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outABExpressionStatement(node);
    }

    public void inACompoundStatement(ACompoundStatement node)
    {
        defaultIn(node);
    }

    public void outACompoundStatement(ACompoundStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundStatement(ACompoundStatement node)
    {
        inACompoundStatement(node);
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        if(node.getLocalDeclarations() != null)
        {
            node.getLocalDeclarations().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        outACompoundStatement(node);
    }

    public void inAALocalDeclarations(AALocalDeclarations node)
    {
        defaultIn(node);
    }

    public void outAALocalDeclarations(AALocalDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAALocalDeclarations(AALocalDeclarations node)
    {
        inAALocalDeclarations(node);
        if(node.getLocalDeclarations() != null)
        {
            node.getLocalDeclarations().apply(this);
        }
        if(node.getVariableDeclaration() != null)
        {
            node.getVariableDeclaration().apply(this);
        }
        outAALocalDeclarations(node);
    }

    public void inABLocalDeclarations(ABLocalDeclarations node)
    {
        defaultIn(node);
    }

    public void outABLocalDeclarations(ABLocalDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABLocalDeclarations(ABLocalDeclarations node)
    {
        inABLocalDeclarations(node);
        if(node.getEpsilon() != null)
        {
            node.getEpsilon().apply(this);
        }
        outABLocalDeclarations(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAIfElseStatement(AIfElseStatement node)
    {
        defaultIn(node);
    }

    public void outAIfElseStatement(AIfElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStatement(AIfElseStatement node)
    {
        inAIfElseStatement(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAIfElseStatement(node);
    }

    public void inAIfElseStatement2(AIfElseStatement2 node)
    {
        defaultIn(node);
    }

    public void outAIfElseStatement2(AIfElseStatement2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStatement2(AIfElseStatement2 node)
    {
        inAIfElseStatement2(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAIfElseStatement2(node);
    }

    public void inAIterationStatement(AIterationStatement node)
    {
        defaultIn(node);
    }

    public void outAIterationStatement(AIterationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterationStatement(AIterationStatement node)
    {
        inAIterationStatement(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAIterationStatement(node);
    }

    public void inAIterationStatementElse(AIterationStatementElse node)
    {
        defaultIn(node);
    }

    public void outAIterationStatementElse(AIterationStatementElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterationStatementElse(AIterationStatementElse node)
    {
        inAIterationStatementElse(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        if(node.getStatementWithElse() != null)
        {
            node.getStatementWithElse().apply(this);
        }
        outAIterationStatementElse(node);
    }

    public void inAAReturnStatement(AAReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAAReturnStatement(AAReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAReturnStatement(AAReturnStatement node)
    {
        inAAReturnStatement(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAReturnStatement(node);
    }

    public void inABReturnStatement(ABReturnStatement node)
    {
        defaultIn(node);
    }

    public void outABReturnStatement(ABReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABReturnStatement(ABReturnStatement node)
    {
        inABReturnStatement(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outABReturnStatement(node);
    }

    public void inAAInputFunctions(AAInputFunctions node)
    {
        defaultIn(node);
    }

    public void outAAInputFunctions(AAInputFunctions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAInputFunctions(AAInputFunctions node)
    {
        inAAInputFunctions(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getInput() != null)
        {
            node.getInput().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        outAAInputFunctions(node);
    }

    public void inABInputFunctions(ABInputFunctions node)
    {
        defaultIn(node);
    }

    public void outABInputFunctions(ABInputFunctions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABInputFunctions(ABInputFunctions node)
    {
        inABInputFunctions(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getInput() != null)
        {
            node.getInput().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        outABInputFunctions(node);
    }

    public void inAAOutputFunctions(AAOutputFunctions node)
    {
        defaultIn(node);
    }

    public void outAAOutputFunctions(AAOutputFunctions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAOutputFunctions(AAOutputFunctions node)
    {
        inAAOutputFunctions(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        if(node.getOutput() != null)
        {
            node.getOutput().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        outAAOutputFunctions(node);
    }

    public void inABOutputFunctions(ABOutputFunctions node)
    {
        defaultIn(node);
    }

    public void outABOutputFunctions(ABOutputFunctions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABOutputFunctions(ABOutputFunctions node)
    {
        inABOutputFunctions(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        if(node.getOutput() != null)
        {
            node.getOutput().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        outABOutputFunctions(node);
    }

    public void inAAVariable(AAVariable node)
    {
        defaultIn(node);
    }

    public void outAAVariable(AAVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAVariable(AAVariable node)
    {
        inAAVariable(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PArrayExpression> copy = new ArrayList<PArrayExpression>(node.getArrayExpression());
            for(PArrayExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAAVariable(node);
    }

    public void inAArrayExpression(AArrayExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayExpression(AArrayExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExpression(AArrayExpression node)
    {
        inAArrayExpression(node);
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        outAArrayExpression(node);
    }

    public void inAAExpression(AAExpression node)
    {
        defaultIn(node);
    }

    public void outAAExpression(AAExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpression(AAExpression node)
    {
        inAAExpression(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getAttribution() != null)
        {
            node.getAttribution().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAExpression(node);
    }

    public void inABExpression(ABExpression node)
    {
        defaultIn(node);
    }

    public void outABExpression(ABExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABExpression(ABExpression node)
    {
        inABExpression(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getAttribution() != null)
        {
            node.getAttribution().apply(this);
        }
        if(node.getInputFunctions() != null)
        {
            node.getInputFunctions().apply(this);
        }
        outABExpression(node);
    }

    public void inACExpression(ACExpression node)
    {
        defaultIn(node);
    }

    public void outACExpression(ACExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACExpression(ACExpression node)
    {
        inACExpression(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outACExpression(node);
    }

    public void inAASimpleExpression(AASimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAASimpleExpression(AASimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASimpleExpression(AASimpleExpression node)
    {
        inAASimpleExpression(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        if(node.getRelationalOperator() != null)
        {
            node.getRelationalOperator().apply(this);
        }
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outAASimpleExpression(node);
    }

    public void inABSimpleExpression(ABSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outABSimpleExpression(ABSimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABSimpleExpression(ABSimpleExpression node)
    {
        inABSimpleExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outABSimpleExpression(node);
    }

    public void inAARelationalOperator(AARelationalOperator node)
    {
        defaultIn(node);
    }

    public void outAARelationalOperator(AARelationalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAARelationalOperator(AARelationalOperator node)
    {
        inAARelationalOperator(node);
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        outAARelationalOperator(node);
    }

    public void inABRelationalOperator(ABRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outABRelationalOperator(ABRelationalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABRelationalOperator(ABRelationalOperator node)
    {
        inABRelationalOperator(node);
        if(node.getLessEqual() != null)
        {
            node.getLessEqual().apply(this);
        }
        outABRelationalOperator(node);
    }

    public void inACRelationalOperator(ACRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outACRelationalOperator(ACRelationalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACRelationalOperator(ACRelationalOperator node)
    {
        inACRelationalOperator(node);
        if(node.getGreatThan() != null)
        {
            node.getGreatThan().apply(this);
        }
        outACRelationalOperator(node);
    }

    public void inADRelationalOperator(ADRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outADRelationalOperator(ADRelationalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADRelationalOperator(ADRelationalOperator node)
    {
        inADRelationalOperator(node);
        if(node.getGreatEqual() != null)
        {
            node.getGreatEqual().apply(this);
        }
        outADRelationalOperator(node);
    }

    public void inAERelationalOperator(AERelationalOperator node)
    {
        defaultIn(node);
    }

    public void outAERelationalOperator(AERelationalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAERelationalOperator(AERelationalOperator node)
    {
        inAERelationalOperator(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAERelationalOperator(node);
    }

    public void inAFRelationalOperator(AFRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outAFRelationalOperator(AFRelationalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFRelationalOperator(AFRelationalOperator node)
    {
        inAFRelationalOperator(node);
        if(node.getDifferent() != null)
        {
            node.getDifferent().apply(this);
        }
        outAFRelationalOperator(node);
    }

    public void inAAAdditiveExpression(AAAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAAAdditiveExpression(AAAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAdditiveExpression(AAAdditiveExpression node)
    {
        inAAAdditiveExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        if(node.getAdditionOperator() != null)
        {
            node.getAdditionOperator().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAAAdditiveExpression(node);
    }

    public void inABAdditiveExpression(ABAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outABAdditiveExpression(ABAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABAdditiveExpression(ABAdditiveExpression node)
    {
        inABAdditiveExpression(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outABAdditiveExpression(node);
    }

    public void inAAAdditionOperator(AAAdditionOperator node)
    {
        defaultIn(node);
    }

    public void outAAAdditionOperator(AAAdditionOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAdditionOperator(AAAdditionOperator node)
    {
        inAAAdditionOperator(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAAAdditionOperator(node);
    }

    public void inABAdditionOperator(ABAdditionOperator node)
    {
        defaultIn(node);
    }

    public void outABAdditionOperator(ABAdditionOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABAdditionOperator(ABAdditionOperator node)
    {
        inABAdditionOperator(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outABAdditionOperator(node);
    }

    public void inAATerm(AATerm node)
    {
        defaultIn(node);
    }

    public void outAATerm(AATerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAATerm(AATerm node)
    {
        inAATerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMultiplicativeOperator() != null)
        {
            node.getMultiplicativeOperator().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAATerm(node);
    }

    public void inABTerm(ABTerm node)
    {
        defaultIn(node);
    }

    public void outABTerm(ABTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABTerm(ABTerm node)
    {
        inABTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outABTerm(node);
    }

    public void inAAMultiplicativeOperator(AAMultiplicativeOperator node)
    {
        defaultIn(node);
    }

    public void outAAMultiplicativeOperator(AAMultiplicativeOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMultiplicativeOperator(AAMultiplicativeOperator node)
    {
        inAAMultiplicativeOperator(node);
        if(node.getAsterisk() != null)
        {
            node.getAsterisk().apply(this);
        }
        outAAMultiplicativeOperator(node);
    }

    public void inABMultiplicativeOperator(ABMultiplicativeOperator node)
    {
        defaultIn(node);
    }

    public void outABMultiplicativeOperator(ABMultiplicativeOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABMultiplicativeOperator(ABMultiplicativeOperator node)
    {
        inABMultiplicativeOperator(node);
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        outABMultiplicativeOperator(node);
    }

    public void inAAFactor(AAFactor node)
    {
        defaultIn(node);
    }

    public void outAAFactor(AAFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAFactor(AAFactor node)
    {
        inAAFactor(node);
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        outAAFactor(node);
    }

    public void inABFactor(ABFactor node)
    {
        defaultIn(node);
    }

    public void outABFactor(ABFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABFactor(ABFactor node)
    {
        inABFactor(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outABFactor(node);
    }

    public void inACFactor(ACFactor node)
    {
        defaultIn(node);
    }

    public void outACFactor(ACFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACFactor(ACFactor node)
    {
        inACFactor(node);
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        outACFactor(node);
    }

    public void inADFactor(ADFactor node)
    {
        defaultIn(node);
    }

    public void outADFactor(ADFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADFactor(ADFactor node)
    {
        inADFactor(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outADFactor(node);
    }

    public void inACall(ACall node)
    {
        defaultIn(node);
    }

    public void outACall(ACall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACall(ACall node)
    {
        inACall(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLeftPar() != null)
        {
            node.getLeftPar().apply(this);
        }
        if(node.getArguments() != null)
        {
            node.getArguments().apply(this);
        }
        if(node.getRightPar() != null)
        {
            node.getRightPar().apply(this);
        }
        outACall(node);
    }

    public void inAAArgumentsList(AAArgumentsList node)
    {
        defaultIn(node);
    }

    public void outAAArgumentsList(AAArgumentsList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAArgumentsList(AAArgumentsList node)
    {
        inAAArgumentsList(node);
        if(node.getArgumentsList() != null)
        {
            node.getArgumentsList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAArgumentsList(node);
    }

    public void inABArgumentsList(ABArgumentsList node)
    {
        defaultIn(node);
    }

    public void outABArgumentsList(ABArgumentsList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABArgumentsList(ABArgumentsList node)
    {
        inABArgumentsList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outABArgumentsList(node);
    }

    public void inAAArguments(AAArguments node)
    {
        defaultIn(node);
    }

    public void outAAArguments(AAArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAArguments(AAArguments node)
    {
        inAAArguments(node);
        if(node.getArgumentsList() != null)
        {
            node.getArgumentsList().apply(this);
        }
        outAAArguments(node);
    }

    public void inABArguments(ABArguments node)
    {
        defaultIn(node);
    }

    public void outABArguments(ABArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABArguments(ABArguments node)
    {
        inABArguments(node);
        if(node.getEpsilon() != null)
        {
            node.getEpsilon().apply(this);
        }
        outABArguments(node);
    }

    public void inAEpsilon(AEpsilon node)
    {
        defaultIn(node);
    }

    public void outAEpsilon(AEpsilon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilon(AEpsilon node)
    {
        inAEpsilon(node);
        outAEpsilon(node);
    }
}
